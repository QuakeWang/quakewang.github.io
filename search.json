[{"categories":null,"content":"Rust--02 ｜ 编程开发中，必须掌握的基本概念 牢骚话😩 上一讲我们了解了内存的基本运作方式，简单回顾一下：栈上存放的数据是静态的，固定大小，固定生命周期；堆上存放的数据是动态，不固定大小，不固定生命周期。\n这一讲，来梳理一下编程开发过程中一些常见的基础概念。按照习惯，我会将其分为四大类：数据（值和类型、指针和引用）、代码（函数、方法、闭包、接口和虚标）、运行方式（并发并行、同步异步和 Promise / async / await），以及编程范式（泛型编程）。\n有的时候，很多人都说在搞开发，写代码。从某种程度上来说确实如此。如果说，仅仅是把需求翻译成代码也算事程序员的话，那么什么才是职业的程序员呢？？怎么做才是职业的程序员呢？？我的答案是从基础做起，夯实软件开发相关的基础知识，而 Rust 恰恰是可以从一定程度上反应程序员是否合格的标准，比如所有权、动态分派以及并发处理等。\n说了点废话，下面开始正片～～\n数据 数据是程序操作的对象，不进行数据处理的程序是没有意义的，我们先来重温和数据有关的概念，包括值和类型、指针和引用。\n值和类型 严谨地说，类型是对值的区分，它包含了值在内存中的长度、对齐以及值可以进行的操作等信息。一个值是符合一个特定类型的数据的某个实体。比如 64u8，它是 u8 类型，对应一个字节大小、取值范围在 0～255 的某个整数实体，这个实体是 64。\n值以类型规定的表达方式（representation）被存储成一组字节流进行访问。比如 64，存储在内存中的表现形式是 0x40，或者 0b 0100 0000。\n这里需要注意的是，值是无法脱离具体的类型讨论的。同样是内存中的一个字节 0x40，如果其类型是 ASCII char，那么其含义就不是 64，而是 @ 符号。\n不管是强类型的语言还是弱类型的语言，语言内部都有其类型的具体表述。一般而言，编程语言的类型可以分为原生类型和组合类型两大类。\n原生类型（primitive type）是编程语言提供的最基础的数据类型。比如字符、整数、浮点数、布尔值、数组（array）、元组（tuple）、指针、引用、函数、闭包等。所有原生类型的大小都是固定的，因此它们可以被分配到栈上。\n组合类型（composite type）或者说复合类型，是指由一组原生类型和其它类型组合而成的类型。组合类型也可以细分为两类：\n 结构体（structure type）：多个类型组合在一起共同表达一个值的复杂数据结构。比如 Person 结构体，内部包含 name、age、email 等信息。用代数数据类型（algebraic data type）的说法，结构体是 product type。 标签联合（tagged union）：也叫不相交并集（disjoint union），可以存储一组不同但固定的类型中的某个类型的对象，具体是哪个类型由其标签决定。比如 Haskell 里的 Maybe 类型，或者 Swift 中的 Optional 就是标签联合。用代数数据类型的说法，标签联合是 sum type。  另外不少语言不支持标签联合，只取其标签部分，提供了枚举类型（enumerate）。枚举是标签联合的子类型，但功能比较弱，无法表达复杂的结构。\n指针和引用 在内存中，一个值被存储到内存中的某个位置，这个位置对应一个内存地址。而指针是一个持有内存地址的值，可以通过解引用（dereference）来访问它指向的内存地址，理论上可以解引用到任意数据类型。\n引用（reference）和指针非常类似，不同的是，引用的解引用访问是受限的，它只能解引用到它引用数据的类型，不能用作它用。比如，指向 42u8 这个值的一个引用，它解引用的时候只能使用 u8 数据类型。\n所以，指针的使用限制更少，但也会带来更多的危害。如果没有用正确的类型解引用一个指针，那么会引发各种各样的内存问题，造成系统崩溃或者潜在的安全漏洞。\n刚刚讲过，指针和引用是原生类型，它们可以分配在栈上。\n根据指向数据的不同，某些引用除了需要一个指针指向内存地址之外，还需要内存地址的长度和其它信息。\n如上一讲提到的指向 “hello world” 字符串的指针，还包含字符串长度和字符串的容量，一共使用了 3 个 word，在 64 位 CPU 下占用 24 个字节，这样比正常指针携带更多信息的指针，我们称之为胖指针（fat pointer）。很多数据结构的引用，内部都是由胖指针实现的。\n代码 数据是程序操作的对象，而代码是程序运行的主体，也是我们开发者把物理世界中的需求转换成数字世界中逻辑的载体。我们会讨论函数和闭包、接口和虚表。\n函数、方法和闭包 函数是编程语言的基本要素，它是对完成某个功能的一组相关语句和表达式的封装。函数也是对代码中重复行为的抽象。在现代编程语言中，函数往往是一等公民，这意味着函数可以作为参数传递，或者作为返回值返回，也可以作为复合类型中的一个组成部分。\n在面向对象的编程语言中，在类或者对象中定义的函数，被称为方法（method）。方法往往和对象的指针发生关系，比如 Python 对象的 self 引用，或者 Java 对象的 this 引用。\n而闭包是将函数或者说代码和其环境一起存储的一种数据结构。闭包引用的上下文中的自由变量，会被捕获到闭包的结构中，成为闭包类型的一部分。\n接口和虚表 接口是一个软件系统开发的核心部分，它反映了系统的设计者对系统的抽象理解。作为一个抽象层，接口将使用方和实现方隔离开来，使两者不直接有依赖关系，大大提高了复用性和扩展性。\n很多编程语言都有接口的概念，允许开发者面向接口设计，比如 Java 的 interface 和 Rust 的 trait 等。\n我们可以看一下如下场景：在 HTTP 中，Request/Response 的服务处理模型其实就是一个典型的接口，只需要按照服务接口定义出不同输入下，从 Request 到 Response 具体该如何映射，通过这个接口，系统就可以在合适的场景下，把符合要求的 Request 分派给对应的服务。\n面向接口的设计是软件开发中的重要能力，而 Rust 尤其重视接口的能力。当我们在运行期使用接口来引用具体类型的时候，代码就具备了运行时多态的能力。但是，在运行时，一旦使用了关于接口的引用，变量原本的类型被抹去，就无法单纯从一个指针分析出这个引用具备什么样的能力。\n因此，在生成这个引用的时候，我们需要构建胖指针，除了指向数据本身外，还需要指向一张覆盖了这个接口所支持方法的列表。这个列表，也就是所谓的虚表（virtual table）。\n由于虚表记录了数据能够执行的接口，所以在运行期，我们想对一个接口有不同实现，可以根据上下文动态分派。\n比如我想为一个编辑器的 Formatter 接口实现不同语言的格式化工具。我们可以在编辑器加载时，把所有支持的语言和其格式化工具放入一个哈希表中，哈希表的 key 为语言类型，value 为每种格式化工具 Formatter 接口的引用。这样，当用户在编辑器打开某个文件的时候，我们可以根据文件类型，找到对应 Formatter 的引用，来进行格式化操作。\n运行方式 程序在加载后，代码以何种方式运行，往往决定着程序的执行效率。所以我们接下来讨论并发、并行、同步、异步以及异步中的几个重要概念 Promise/async/await。\n并发（concurrency）和并行（parallel） 并发和并行是软件开发中经常遇到的概念。\n并发是同时与多件事情打交道的能力，比如系统可以在任务 A 做到一定程度后，保存该任务的上下文，挂起并切换到任务 B，然后过段时间再切换回任务 A。\n并行是同时处理多件事情的方式，也就是说，任务 A 和任务 B 可以在同一个时间下工作，无需上下文切换。\n并发是一种能力，而并行是一种手段。当系统拥有了并发的能力后，代码如果跑在多个 CPU core 上，就可以并行运行。所以我们平时都谈论高并发处理，而不会说高并行处理。\n同步和异步 同步是指一个任务开始执行后，后续的操作会阻塞，直到这个任务结束。在软件中，我们大部分的代码都是同步操作，比如 CPU，只有流水线中的前一条指令执行完成，才会执行下一条指令。一个函数 A 先后调用函数 B 和 C，也会执行完 B 之后才执行 C。同步执行保证了代码的因果关系（causality），是程序正确性的保证。然而在遭遇 I/O 处理时，高效 CPU 指令和低效 I/O 之间的巨大鸿沟，成为了软件的性能杀手。下图对比了 CPU、内存、I/O 设备、和网络的延迟：\n我们可以看到和内存访问相比，I/O 操作的访问速度低了两个数量级，一旦遇到 I/O 操作，CPU 就只能闲置来等待 I/O 设备运行完毕。因此，操作系统为应用程序提供了异步 I/O，让应用可以在当前 I/O 处理完毕之前，将 CPU 时间用作其它任务的处理。\n所以，异步是指一个任务开始执行后，与它没有因果关系的其它任务可以正常执行，不必等待前一个任务结束。\n在异步操作里，异步处理完成后的结果，一般用 Promise 来保存，它是一个对象，用来描述在未来的某个时刻才能获得的结果的值，一般存在三个状态：\n 初始状态，Promise 还未运行； 等待（pending）状态，Promise 已运行，但还未结束； 结束状态， Promise 成功解析出一个值，或者执行失败。  如果你对 Promise 这个词不太熟悉，在很多支持异步的语言中，Promise 也叫 Future / Delay / Deferred 等。除了这个词以外，我们也经常看到 async/await 这对关键字。\n一般来说，async 定义了一个可以并发执行的任务，而 await 则触发了这个任务并发执行。大多数编程语言中，async/await 是一个语法糖（syntactic sugar），它使用状态机将 Promise 包装起来，让异步调用的使用感觉和同步调用非常类似，也让代码更容易阅读。\n编程范式 为了在不断迭代时，更好地维护代码，我们还会引入各种各样的编程范式，来提升代码的质量。所以最后来谈谈泛型编程。\n如果你来自于弱类型语言，如 C / Python / JavaScript，那泛型编程是你需要重点掌握的概念和技能。泛型编程包含两个层面，数据结构的泛型和使用泛型结构代码的泛型化。\n（强类型和弱类型的定义一直不太明确，wikipedia 上也没有一个标准的说法。。按照习惯一般是看类型在调用时是否会发生隐式转换，所以说 python 是弱类型。不过 wikipedia 在介绍 python 时确实说它是 strongly typed。但如果按照类型是否会隐式转换，Rust 是强类型，Python 和 C 是弱类型）\n数据结构的泛型 首先是数据结构的泛型，它也往往被称为参数类型或者参数多态，比如下面这个数据结构：\n1 2 3 4  struct Connection\u003cS\u003e{io: S.state: State,}  它有一个参数 S，其内部的域 io 的类型是 S，S 具体的类型只有在使用 Connection 的上下文中才得到绑定。\n可以把参数化数据结构理解成一个产生类型的函数，在“调用”时，它接受若干个使用了具体类型的参数，返回携带这些类型的类型。比如我们为 S 提供 TcpStream 这个类型，那么就产生 Connection这个类型，其中 io 的类型是 TcpStream。\n读到这里可能会产生疑惑，如果 S 可以是任意类型，那我们怎么知道 S 有什么行为？如果我们要调用 io.send() 发送数据，编译器怎么知道 S 包含这个方法？\n这是个好问题，我们需要用接口对 S 进行约束。所以我们经常看到，支持泛型编程的语言，会提供强大的接口编程能力，后续有时间可以聊聊 Rust 的 trait，再详细探讨这个问题。\n数据结构的泛型是一种高级抽象，就像我们人类用数字抽象具体事物的数量，又发明了代数来进一步抽象具体的数字一样。它带来的好处是我们可以延迟绑定，让数据结构的通用性更强，适用场合更广阔；也大大减少了代码的重复，提高了可维护性。\n代码的规范化 泛型编程的另一个层面是使用泛型结构后代码的泛型化。当我们使用泛型结构编写代码时，相关的代码也需要额外的抽象。\n这里用我们熟悉的二分查找的例子解释会比较清楚：\n左边用 C 撰写的二分查找，标记的几处操作隐含着和 int[] 有关，所以如果对不同的数据类型做二分查找，实现也要跟着改变。右边 C++ 的实现，对这些地方做了抽象，让我们可以用同一套代码二分查找迭代器（iterator）的数据类型。\n同样的，这样的代码可以在更广阔的场合使用，更简洁容易维护。\n小结 本节内容讨论了四类基本概念：数据、代码、运行方式和编程范式。\n值无法离开类型单独讨论，类型一般分为原生类型和组合类型。指针和引用都指向值的内存地址，只不过二者在解引用时的行为不一样。引用只能解引用到原来的数据类型，而指针没有这个限制，然而，不受约束的指针解引用，会带来内存安全方面的问题。\n函数是代码中重复行为的抽象，方法是对象内部定义的函数，而闭包是一种特殊的函数，它会捕获函数体内使用到的上下文中的自由变量，作为闭包成员的一部分。\n而接口将调用者和实现者隔离开，大大促进了代码的复用和扩展。面向接口编程可以让系统变得灵活，当使用接口去引用具体的类型时，就需要虚表来辅助运行时代码的执行。有了虚表，我们可以很方便地进行动态分派，它是运行时多态的基础。\n在代码的运行方式中，并发是并行的基础，是同时与多个任务打交道的能力；并行是并发的体现，是同时处理多个任务的手段。同步阻塞后续操作，异步允许后续操作。被广泛用于异步操作的 Promise 代表未来某个时刻会得到的结果，async/await 是 Promise 的封装，一般用状态机来实现。\n泛型编程通过参数化让数据结构像函数一样延迟绑定，提升其通用性，类型的参数可以用接口约束，使类型满足一定的行为，同时，在使用泛型结构时，我们的代码也需要更高的抽象度。\n","description":"","tags":null,"title":"Rust02——程序员的基本素养，编程必会的基础知识","uri":"/tech/rust/prepare/02_basic/"},{"categories":null,"content":"（电子）装备清单 本篇内容仅仅是从我个人的使用习惯以及日常的装备出发，来梳理一下各个装备分别起到什么作用。\n先简单过一遍有哪些电子设备：\n iPad Air3 + Apple Pencil（ 入坑的产品） iPhone11（感觉还可以做几年钉子户） 联想小新 Pro13（Windows 主力本） MacBook Pro（M1 Pro 10+14 core，32 + 1T） Sony WF-1000XM4（降噪体验最好的耳机） Nintendo Switch OLED（能够捧在手里玩塞尔达还要啥自行车） 客制化键盘（哪个程序员还没折腾过键盘？？）   平板 从我的角度来说，iPad 可以说是果子最成功的电子产品。虽然最近几年国产的平板确实还不错，但总归来说还是有差距的。所以可以简单把平板归类为：iPad 和其他。\n谈谈当时为何选择 Air3。当时 19 年首发的时候，刚好大一下，凭借着自己的能力有一点点经济基础，作为计算机学生自然而然对电子设备比较感兴趣。那一年上半年，果子推出了 mini5 和 Air3 两款。一开始我比较想入的是 mini5，大小尺寸捧在手里刚刚好，可以当作 Kindle 来使用，而且看视频的话比手机屏幕大，理论上会更舒服。可一想到了 iPad 可以当生产力工具，如果再加上 pencil 平时上课出门就能够摆脱厚重的书本，岂不快哉。所以最好选择了 Air3。\n“买前生产力，买后爱奇艺“真的是这样吗？？其实不然。当时秉持着生产力的理念，不下任何一款游戏、任何一个娱乐视频播放器（B 站除外。。hh😅），比较好的一点就是这个习惯一直持续至今，包括手机也是。那么没有娱乐软件，都拿 iPad 做了些什么呢？\n19 年是自媒体行业相对而言比较火爆的一年，就想着能否使用 iPad 来尝试做图剪视频呢？当时 iPadOS 生态还不健全，Adobe 全家桶几乎就是不可用的状态，于是寻找平替产品，做图方面用的是 Affinity Photo 和 Affinity Design，虽然比不过 PhotoShop，但好在方便，基本的操作都能实现；视频的话就 LumaFusion，我愿称之为当时 iPad 上最强的视频剪辑软件。还有一些好用的软件例如 procreate 这类的，由于我天生手残，从小就讨厌上美术课，也画不出来什么东西，虽然软件很好用，但我太菜咯。。就没怎么用过。\n比较好的看书软件话，微信阅读倒是不错。19—20 年这两年，几乎都是以电子书为主的，很方便。其实一开始我不太想用这软件的，看这几年鹅厂作妖，无论是游戏还是产品做的都是什么垃圾，比较抵触的。后来使用下来的感觉就是“真香”！首先几乎白嫖就能有书读，这个对于中国的用户来说真的太友好了，谁愿意多花钱呢。。没啥广告，阅读页面比较整洁，可以结合自己的阅读习惯做一些相应的调整。而且还能画线标注重点。emmm，微信阅读也就成了我安利比较多的软件了 哈哈哈哈。\n上面提到了 B 站，是唯一一个视频软件，众所周知小破站是个学习软件 hhhh。平时看看纪录片、一些技术视频或者关注的 up 主都是不错的选择。B 站可以说是大学生获取信息的平台之一，很多第三方技能的学习都可以借此来完成。\n上面的这些内容，大部分操作没有 pencil 都可以完成，那多花六七百买的笔是不是智商税呢？？当然不是！！！Notablility 和 GoodNote5 就可以很好发挥 pencil 的作用。一开始重度使用的是 Notability，书写体验要好一点（个人主观感受）。可以选择直接新建一个文件，或者把课本导入再写写画画都是很方便的，还可以配合墨墨背单词来分屏使用。可它不做人，从买断制变成了按月付费，就无语。然后就果断弃坑转头入了 GoodNote5，后来习惯了，用起来区别也不是很大。\niPad 可以说是我最最喜欢的产品，可以说是大学时候的主力设备，也陪伴了我的成长，但当不再是学生的身份，iPad 变得似乎有些尴尬，所有码字的内容能放在电脑上，就不会放在 iPad 上，iPad 的输入体验是真的糟糕，在不外接键盘的情况下。pencil 能用到的地方也越来越少了。。现如今只能说变成了看论文，看视频的工具。这类内容放在手机上看太小，电脑又不够便携。iPad 也就成了“第三块屏幕”，看似没用，如果没有的话，会感觉少了点什么，仅仅是屏幕大小的不同，也就决定了产品定位。\n有想过换 iPad Pro，毕竟屏幕素质更好，而且还支持 ProMotion，但如果不再重度使用的话，Air3 就足够咯，那就这样吧。。\n 手机 先如今，如果说最重要的电子设备肯定是手机，它是将用户和服务端连接起来的重要枢纽之一。\n之前我一直是重度安卓机用户，因为可以 root，能够随便倒腾。也可能是年纪大了，慢慢就折腾不动了，体验了 iPad 的优点之后，在下半年果子发新机的时候，就入了 iPhone11，其实如果再让我选的话，会直接入手 11Pro。11 拿在手里还是有点大了，后面出的 mini 机型续航跟不上，而且也只支持单卡，就不在考虑范围之内了。高刷也是挤牙膏到 13Pro 才有。所以手机对于我而言就是个工具，能用就行。\n换了 iPhone 之后最大的感觉就是不再在意各种参数了，因为够用。对，够用就行。很多时候是供应商强推一堆不必要的升级然后都去跟风生产，作为一名普通用户来说，并没有啥实质性的作用吧。所以如果现在这款机子电池续航能撑得住的话，会继续当钉子户。\n从我的使用来说，手机最大的作用无外乎以下几点：\n通信，这也是手机最原始的功能。但一般电脑在身边，方便的话像微信这类的就转到电脑上，解放了手机。（键盘打字更舒服，节约了手机拿起放下的时间成本）；\n购物，这一点手机还是比较方便的，涉及到安全性考虑，Web 端每次重新登录都要扫码重新验证，这一点就不如手机来的方便，而且包括物流查询等；\n支付手段，不知何时起开始习惯了移动端付款，又一次见了新版的人民币，下意识的认为这是不是假钱 哈哈哈，在国内还是很方便的，大环境在这摆着嘛，这也导致了花钱没感觉，就是个数字。。。包括出门坐地铁、公交之类的；\n听歌，出门的时候戴耳机，一般都是直接连接手机，因为方便嘛。\n拍照，emmm 不怎么拍照，但貌似所有的设备只有手机的拍照功能好一点，随手咔嚓一张咯，剩余靠自己做后期呗；\n碎片时间：大学的时候喜欢刷知乎，心里感觉要高级一点，后来发现与短视频都一样。现在的话，可能会看看公众号、掘金之类的吧，知乎、小红书需要查东西的会随手看一下啦。至于短视频、游戏这些，手机上是不会下这类软件的。\n所以说平时主要用到的这些功能，没必要换新机，再等等吧。只能说。。\nBTW，去年 14Pro 的“灵动岛”一开始使用挺惊艳，后来太突兀了，从产品来说就是用软件交互层面来掩盖硬件上的短板。等什么时候没有岛了再说吧。。。\n 电脑 这毕竟是吃饭的家伙。\nWindows 本的话是联想的小新 Pro13，一般来说都是工模机，硬件方面动手能力强的话可以直接换，13 寸主打的就是便携。16G 运行内存，大部分开发都能做，甚至能跑三个小的虚拟机集群，知足吧。。\nmacOS 是 14 寸的 M1 Pro，32 + 1T，配置拉高一点，多撑几年吧，事实也的确如此，后续出的新机固然很牛掰，对于我这种非专业用户来说几乎没啥提升。无非就是用户体验上会好一丢丢？？\n为何搞两台？？emmmm...... 如果说 Windows 开发真的舒服的话，也不会折腾 macOS 了，还是类 unix 系统好用，之前一度想过把 Windows 本重新装个好看一点的 Linux，后来看了下各个软件的兼容性还是放弃了。。\n其实二者装的工具都差不太多，开发的话 IDEA、VSCode 都是必装的，其余的结合各个系统的特点来了。macOS 比较好的就是，高素质的屏幕支持高刷、出色的音效，最重要的是可以直接使用 cli，这对我来说是最方便的，需要一个可视化界面来使用 Chrome、微信以及音视频软件等，其余的操作例如服务的启动，文件管理这部分工作就可以使用 iTemr2 来完成。所以读到这的你如果有好看的壁纸请一定要推荐给我，用的还是默认的。。。有关 macOS 从开发的角度倒腾了哪些好玩的，等有时间单独分享一篇。至于 Windows 的话，就那回事，似乎没啥好说的。。\n之前上大学的时候，特别羡慕那些在星巴克喝着咖啡，用着 mac 的人，现如今看就是纯纯的社畜。。Windows 搞个主机用来打 3A 大作才是王道！\n 耳机 耳机的话，还是推荐降噪，毕竟用过就回不去了。当时第一款降噪耳机是 AirPods Pro，不知是不是第一次戴降噪耳机，戴上之后整个世界都安静了！！！那种感觉是真的惊艳，无可替代！！！可惜的是，AirPods Pro 丢了。。。还是在图书馆丢的，给我难受了半个月。原以为图书馆里最起码都是有素质的人，看来并不是。。\n后来暑期首发入了 sony wf1000 xm4，价格有点小贵，谁知半年之后疯狂背刺，一点都不保值。。。但如果从综合的使用体验 xm4 绝对是最顶的，无论是降噪还是音质，大法毕竟是大法。有利就有弊，牺牲的用户的佩戴体验，耳塞戴上会胀满耳朵里，耳机的腔体偏大，长时间佩戴会有点不舒服，这一点不如苹果。\n后来入了 AirPods Pro2，但没有第一次佩戴 Pro 时候的感觉了。。\n 游戏机 如果非要说在 PS5 和 Nintendo Switch OLED 选一个的话，我还是会选择 Switch，能够捧在手里玩游戏其他的还能说什么？工作或者学习一天，本来想打游戏解压一下，结果还需要正襟危坐是不是很难受！！所以嘛，虽然 ns 的性能不怎么好，但是能玩到一些高质量的游戏就可以呗。\n高中的时候喜欢打手游，高考结束之后突然顿悟感觉一点意思都没有，妥妥国内资本圈钱的手段罢了。后来上了大学四年，不能说一点游戏没玩过吧，加在一起不到一百个小时。由于 20 年初，疫情爆发，一款叫动森的游戏进入大众的视野，也就在那时突然觉得 switch 还挺有意思的，再加上想弥补小时候没有 PSP 的遗憾，就入了。\n在 ns 玩的第一款游戏是《怪物猎人：崛起》，第一次玩动作游戏，玩了几百个小时才明白这游戏是怎么玩的，太菜了😭。后面又入了野炊，可惜的是当时玩了五六个小时觉得无聊，就放下了。下一款投入时间玩的游戏应该就是《异度神剑 3》，Mio！！！也让我入了 JRPG 的坑。后面还有《P5R》（玩到现在还没通关，后期真的越玩越累，但又不想烂尾。。）今年春季赶上塞尔达季票打折，就入了大师模式，接触大师模式才感觉到乐趣。有限的资源，变强的怪物，还能回血，直接变成魂类游戏可还行 哈哈哈。《王国之泪》当然也首发入啦～～还有很多优秀的游戏，比如马里奥系列、宝可梦系列、《十三机兵》都是值得入的。\n玩 NS 的时候，然后感觉又回到了小时候，可以去做自己想做的事情，都说成年人的世界很累很糟糕，但如果有 switch 的陪伴呢？\n 键盘 程序员的键盘一定要与众不同才叫帅！！但实际上没啥必要，平时码码字写写代码，搞个差不多的键盘就行，也可能是老了折腾不动了吧。小键的话 Box 白轴用起来还是挺舒服的，大键的话 看个人使用情况，键帽看见喜欢的或者打油了就换呗。。\n 其实主力的电子设备就是电脑、手机、平板，决定它们实际用途除了系统不一样之后，更重要的是屏幕可交互的尺寸，今年 WWDC 看见有 Vision Pro 还是挺震撼的，期待“下一种”交互方式早点应用到生活之中。\n","description":"","tags":null,"title":"二夕的装备清单","uri":"/life/about_devices/"},{"categories":null,"content":"RUST--01 ｜ 内存：值，放在栈上还是堆上？？ 牢骚话 学习 Java、Python 或者 Scala 的时候，通常都会从最基本的语法讲起，为何谈起 Rust 却偏偏要从这些较为抽象的基础知识谈起呢？其实不然，从我自己的经历来说，吃过基础知识没学透，后期回来补课的痛苦。。。\n比如，以最基础的内存为例，很多人其实并没有搞懂什么时候数据应该放在栈上，什么时候应该在堆上，直到工作中实际出现问题了，才意识到数据的存放方式居然会严重影响并发安全，无奈回头重新补基础，时间精力的耗费都很大。\n作为一名开发者，会遇见很多工具、框架和语言，但这类东西无论怎么变，底层的逻辑都是通用的，正所谓“万变不离其宗”。\n在学习一门新的语言中，最基本的概念就是代码中的变量和值，而存放它们的地方是内存，那么你真的有了解过内存吗？？\n内存 从写代码开始，我们就无时无刻不和内存在打交道。比如下面这行代码：\n1  lets=\"hello world\".to_string();  首先，“hello world” 作为一个字符串常量（string literal），在编译时被存入可执行文件的 .RODATA 段（GCC）或者 .RDATA 段（VC++），然后在程序加载时，获得一个固定的内存地址。当执行 “hello world”.to_string() 时，在堆上，一块新的内存被分配出来，并把 “hello world” 逐个字节拷贝过去。\n当我们把堆上的数据赋值给 s 时，s 作为分配在栈上的一个变量，它需要知道堆上内存的地址，另外由于堆上的数据大小不确定且可以增长，我们还需要知道它的长度以及它现在有多大。\n最终，为了表述这个字符串，我们使用了三个 word：\n 第一个表示指针; 第二个表示字符串的当前长度（11）; 第三个表示这片内存的总容量（11）;  在 64 位系统下，三个 word 是 24 个字节。也可以看下图，更直观一些：\n刚才例子中的字符串的内容在堆上，而指向字符串的指针等信息在栈上，那么有个问题就是：数据什么时候可以放在栈上，什么时候需要放在堆上呢？\n这个问题也是比较考验程序员的基本功是否扎实的，很多使用自动内存管理语言比如 Java/Python 的开发者，可能有一些模糊的印象或者规则：\n 基本类型（primitive type）存储在栈上，对象存储在堆上； 少量数据存储在栈上，大量的数据存储在堆上。  这么回答，虽然对，但并没有抓到实质。如果在工作中只背规则套公式，一遇到特殊情况就容易懵，但是如果明白公式背后的推导逻辑，即使忘了，也很快能通过简单思考找到答案，所以接下来我们深挖堆和栈的设计原理，看看它们到底是如何工作的。（btw 如果连公式都不会背的话 emmmm。。。。。dddd😁）\n栈 栈是程序运行的基础。每当一个函数被调用时，一块连续的内存就会在栈顶被分配出来，这块内存被称为帧（frame）。\n栈是自顶向下增长的，一个程序的调用栈最底部，除去入口帧（entry frame），就是 main() 函数对应的帧，而随着 main() 函数一层层调用，栈会一层层扩展；调用结束，栈又会一层层回溯，把内存释放回去。\n在调用的过程中，一个新的帧会分配足够的空间存储寄存器的上下文。在函数里使用到的通用寄存器会在栈保存一个副本，当这个函数调用结束，通过副本，可以恢复出原本的寄存器的上下文，就像什么都没有经历一样。此外，函数所需要使用到的局部变量，也都会在帧分配的时候被预留出来。\n整个过程可以再看看这张图辅助理解：\n那一个函数运行时，怎么确定究竟需要多大的帧呢？这要归功于编译器。在编译并优化代码的时候，一个函数就是一个最小的编译单元。\n在这个函数里，编译器得知道要用到哪些寄存器、栈上要放哪些局部变量，而这些都要在编译时确定。所以编译器就需要明确每个局部变量的大小，以便于预留空间。\n于是乎我们可以这么理解：在编译时，一切无法确定大小或者大小可以改变的数据，都无法安全地放在栈上，最好放在堆上。比如一个函数，参数是字符串：\n1 2 3 4 5  fn say_name(name: String){}// 调用 say_name(\"Lindsey\".to_string());say_name(\"Rosie\".to_string());  字符串的数据结构，在编译时大小不确定，运行时执行到具体的代码才知道大小。比如上面的代码，“Lindsey” 和 “Rosie” 的长度不一样，say_name() 函数只有在运行的时候，才知道参数的具体的长度。所以，我们无法把字符串本身放在栈上，只能先将其放在堆上，然后在栈上分配对应的指针，引用堆上的内存。\n放在栈上的问题 从刚才的图中也可以直观看到，栈上的内存分配是非常高效的。只需要改动栈指针（stack pointer），就可以预留相应的空间；把栈指针改动回来，预留的空间又会被释放掉。预留和释放只是动动寄存器，不涉及额外计算、不涉及系统调用，因而效率很高。\n所以理论上说，只要可能，我们应该把变量分配到栈上，这样可以达到更好的运行速度。那为什么在实际工作中，我们又要避免把大量的数据分配在栈上呢？这主要是考虑到调用栈的大小，避免栈溢出（stack overflow）。\n一旦当前程序的调用栈超出了系统允许的最大栈空间，无法创建新的帧，来运行下一个要执行的函数，就会发生栈溢出，这时程序会被系统终止，产生崩溃信息。过大的栈内存分配是导致栈溢出的原因之一，更广为人知的原因是递归函数没有妥善终止。一个递归函数会不断调用自己，每次调用都会形成一个新的帧，如果递归函数无法终止，最终就会导致栈溢出。\n堆 栈虽然使用起来很高效，但它的局限也显而易见。当需要动态大小的内存时，只能使用堆，比如可变长度的数组、列表、哈希表、字典，它们都分配在堆上。\n堆上分配内存时，一般都会预留一些空间，这是最佳实践。比如你创建一个列表，并往里添加两个值：\n1 2 3  letmutarr=Vec::new();arr.push(1);arr.push(2);  这个列表实际预留的大小是 4，并不等于其长度 2。这是因为堆上内存分配会使用 libc 提供的 malloc() 函数，其内部会请求操作系统的系统调用，来分配内存。系统调用的代价是昂贵的，所以要避免频繁地 malloc()。\n对上面的代码来说，如果说需要多少就分配多少，那列表每次新增值，都要新分配一大块的内存，先拷贝已有数据，再把新的值添加进去，最后释放旧的内存，这样效率很低。所以在堆内存分配时，预留的空间大小 4 会大于需要的实际大小 2 。\n除了动态大小的内存需要被分配到堆上外，动态生命周期的内存也需要分配到堆上。\n上文中我们讲到，栈上的内存在函数调用结束之后，所使用的帧被回收，相关变量对应的内存也都被回收待用。所以栈上内存的生命周期是不受开发者控制的，并且局限在当前调用栈。而堆上分配出来的每一块内存需要显式地释放，这就使堆上内存有更加灵活的生命周期，可以在不同的调用栈之间共享数据。\n放在堆上的问题 然而，堆内存的这种灵活性也给内存管理带来很多挑战。\n如果手工管理堆内存的话，堆上内存分配后忘记释放，就会造成内存泄漏。一旦有内存泄漏，程序运行得越久，就越吃内存，最终会因为占满内存而被操作系统终止运行。\n如果堆上内存被多个线程的调用栈引用，该内存的改动要特别小心，需要加锁以独占访问，来避免潜在的问题。比如说，一个线程在遍历列表，而另一个线程在释放列表中的某一项，就可能访问野指针，导致堆越界（heap out of bounds）。而堆越界是第一大内存安全问题。\n如果堆上内存被释放，但栈上指向堆上内存的相应指针没有被清空，就有可能发生使用已释放内存（use after free）的情况，程序轻则崩溃，重则隐含安全隐患。根据微软安全反应中心（MSRC）的研究，这是第二大内存安全问题。\n小结 对于存入栈上的值，它的大小在编译期就需要确定。栈上存储的变量生命周期在当前调用栈的作用域内，无法跨调用栈引用。\n堆可以存入大小未知或者动态伸缩的数据类型。堆上存储的变量，其生命周期从分配后开始，一直到释放时才结束，因此堆上的变量允许在多个调用栈之间引用。但也导致堆变量的管理非常复杂，手工管理会引发很多内存安全性问题，而自动管理，无论是 GC 还是 ARC，都有性能损耗和其它问题。\n一句话对比总结就是：栈上存放的数据是静态的，固定大小，固定生命周期；堆上存放的数据是动态的，不固定大小，不固定生命周期。\n","description":"","tags":null,"title":"Rust01——内存：栈与堆？？","uri":"/tech/rust/prepare/01_memory/"},{"categories":null,"content":"给姐姐，写在你出嫁之后 总想写些什么，但又不知该如何下笔，作为弟弟，本应该为你出嫁感到快乐、开心，结果却往往事与愿违。我也不知为何会这样，或许是不舍，或许是焦虑，更多的也许是说不清楚。\n不舍的是，这么多年，从我出生到现在，在家里就有你的陪伴，出嫁之后，家里只剩我和父母，总感觉少了一份温暖。你是否还记得，在我快要高考的时候，有一段时间各方面都很低落，不知该如何是好，面对父母的不理解，自己的迷茫不知所措，还好有你。当时我就说，咱爸妈做的最正确的事情，就是把你生在了我前面。。但有时候就会设想，如果咱俩换一下呢？？或许，关系可能会更糟糕吧。我可能会处处管着你，让你好好学习看书，还可能会强制给你灌输我的价值观，让你变得不像你自己。。但好在，这一切也都只是假如。对于姐姐这个身份，从我的角度来说看你是满分的，我时常和爸妈说，有个贴心的姐姐确实舒服，自己不用操心各种生活的琐事，无论什么事情都有你为我考虑在前。咱爸妈经常说，我俩上学属于比较省心的，那是因为你比我大，小时候每天上学放学能够和你在一起，因为你的不哭不闹，然后意识到作为一名学生这是最基本的也是应该的，一切都是在你影响下的模仿罢了。也正因为你比我早读了几年书，每当小学周末老师布置了大把的作业，因为贪玩而写不完的时候，总会缠着你帮我写 哈哈哈。可，随着时间的推移，我俩慢慢长大了，从中学到大学，渐行渐远，由于你理科不好，再也没人能够帮我偷懒了，慢慢的，我也只能靠自己。\n很多人都说咱爸妈这二十多年混得不太行，也没啥大出息，emmm 怎么说呢，从某一方面来说确实是的。那是因为除了我俩，他们也没啥好骄傲的了。由于出生在农村，周围很多家庭的父母，对于教育都不太注重，很多亲戚邻居家的孩子，都早早辍学打工，甚至有些思想比较极端的人认为，女孩子读那么多书干什么，最后不还是要嫁给人家。不能说这种人不对，在他们的眼光中，他们也只能活在这种环境中。也许是因为受到舅舅家各位哥哥姐姐的原因，小时候每次去姥姥家那边，都会给我俩进行一顿思想灌输，说谁谁谁怎么怎么样考上大学，由此来教育，让我们好好学习。说实话，当时的内心想的也就那回事，在我看来，那只不过是到了一定年龄段，做了该做的事情。后来实际会发现，学习如逆水行舟，不进则退。值得庆幸的是，你成为了家里第一个全日制的本科生。16 年，你高考，送你去考场，看着你走进考场，我的内心比我后来高考都紧张，因为不确定性太大了。怕你考不上大学，下一步该怎么走？？可能也正是因为你的“忽忽悠悠“，从出成绩，到填志愿，最后录取，都比我要顺利的多。这也许求而不得，往往不求而得吧。有时候我都羡慕甚至嫉妒你，我花了几倍的功夫做到的事情，你往往漫不经心的就完成了。\n当你上了大学，也算是第一步远离了生活长大的城市。当时我上高中，特别羡慕上大学的你。就会想自己啥时候才能熬到啊。高中的时候，可能由于是叛逆期吧，经常你回家就和你闹矛盾，不知道你还记不记得。其实，初中的时候也有好几次，现在回头想想还真是黑历史。。hhhh 但也许是出于对你的依赖，也知道你会无限的包容我才会这样。到后来，我上大学之后，慢慢体会到一个人在陌生环境的不容易，也读了很多书。那个阶段，脑子也逐渐开窍，开始慢慢承担起自己的责任，我俩之间也由你照顾我，变成我谦让着你。也好像是从那时候开始，在爸妈眼中，我似乎变得比你要懂事，更独立。如果可以的话，我不想这样。。一点都不想 真的。。近几年这样过度的由着你你任性，也造就了你的脾气比较大。但不在家人身边，又有谁会真心让着你呢\n焦虑的是，当你真正变成妻子的身份，在他们家过得到底是不是自己所期望的那样。大学毕业之后，赶上疫情，比较好的是，你当时找到了工作，不用像大部分应届生那样忙得焦头烂耳。有时候，我就觉得父母喜欢瞎操心，刚刚大学毕业就着急你以后的未来，很没必要。我之前对你说过，如果你不想结婚，过年回老家怕被所谓的亲戚说三道四，我直接给你钱出去旅游，别受这气。比较可惜的是，我这钱没花出去 hhhh。\n当时你说李双双也是写代码的，顿时我的好感度就上来了，最起码来说，写代码的人都比较单纯简单，除了追求技术，对于其余的事情都不大感兴趣，也就不会搞那些花里胡哨的。他追你时候的表现确实值得表扬，刚开始我还担心他和我一样是个钢铁直男，不会讨你欢心，纯粹是我多虑了。相处了快到一年的时候，你们订婚了，从我的角度来看，速度或许有些太快了，因为紧接着的就是结婚。如果不是因为疫情，去年你就是他的妻子。去年疫情刚解封你去了他那边，还是比较好的，因为谁也不知道之后上海还会搞成什么样子。可能是距离产生美吧，当你们异地的时候，不会感觉到他的不好，但两个人同居，都有了自己的工作，那么生活中的小事到底谁负责呢？他是个典型的大男子主义，家务活不知道做，不会烧饭，而且还比较懒。这么一弄，家务活自然而然就落到你头上了。但我看来是不应该的，最起码从我的角度来说，作为一个男人就应该多承担点，如果真心喜欢一个女生，是需要细心呵护，爱情是靠两个人共同经营，而不是单方面付出的。就这样对他的印象分，也就逐渐下降。甚至我和你说过好几次，如果两个人真的磨合不来，他还是那屌样子，就算了吧，没必要受他一辈子气。这个时候的他和当时追你完全是两个样子。每次和你联系，都觉得你在那边过得好累，没有那个时候在家自由。但也许这就是生活吧，总归是要和现实和解的。\n当然，也不能站在我的角度来片面地看待他，他也不是全都缺点，毕竟他自己都夸自己优秀嘛。让我感到比较欣慰的是，去年年底，由于疫情的全面放开，谁到抵挡不住会感染。你成为家里第一个阳的，而且还不在身边，对你的担忧也就多了。我愿意按他惜命的性格，有可能连家都不会回，事实证明他还是不错的，得知你阳了，放下手边的工作，急匆匆地赶了回家照顾你。从这一点可以看出，他还是很在乎你的，也值得把你托付给他。如果在生活中，他能够考虑的更周到一点，更能为你着想一点，能够自觉地承担起自己的责任和义务，那就更好了。希望婚后，他可以做到。他是有自己的想法，但却不能付诸实践，现如今的生活形形色色的诱惑太多，一不小心就会迷失自我，作为年轻人，要学会静下自己的心，去好好思考，去努力，去寻找自身的价值所在。也可能我本身就是做技术的，关于互联网的诱惑都会刻意屏蔽，所以对我来说也就是个工具，不会浪费太多时间在上面。现如今的社会，是一个即将崩坏的形态，虚拟和现实相碰撞，有的人追求华丽的形式，有的人为了名利迷失了自我，更多的人都是随波逐流，无法思考。希望你俩以后也多投入时间在现实生活中，尽量过得简单一点，多读书！\n为何会说不清楚呢？？我想谈谈现如今的你。作为弟弟，我一直都认为对你很熟悉，但当你在那边过了快一年，恍惚变了一个人似的，我不知为何你会变成这样，身上的戾气有点重。。。\n生活，平平淡淡是常态，有不顺心的时候，也总有好的时候。不要因为暂时的不如意而感到烦恼，也不要想着为了未来怎么样怎么样而陷入精神内耗，要学会和自己和解，和周围的一切和解，但看待生活的心态变了，生活也会随之而改变。至少目前来看，我是一个挺”佛“的人，不为世事所动，也没啥太大的兴趣，自然就少了很多烦恼，但也不会有开心的感觉，所以也好也不好。你可别学我。我还是想让你开心一点的。在那边，嫁給他，就是他家人了。话语权方面，我也希望你能够做到独当一面，要沉得住气，不要因为一点小事而哭鼻子。最好是，也不要计较那么多，为了一群傻缺把自己气到不值得。当你把自己的认知提升到一定的高度，看他们做的很多事都很无聊，所以真的没必要。人总是复杂的，不能说某一个时间段对你好，他就是好人，反之他就不好。如果能处得来就更好不过，处不来也别强求自己委屈求全。我还是希望你在那边能开开心心、快快乐乐的。\n最后，如果说最近的开心事的话，那就是你说我快要当舅舅了。看到这个消息，我先是一愣，没反应过来，脑子差点宕机，总觉得有些突然。如果说对他/她 有什么期待的话，最好是能够像他/她舅舅，也就是我。哈哈哈哈~~也希望我能够以身作则，起到一个好的榜样的作用。希望他/她出生之后， 你们别给太大的压力，能够养成自己的思想，有独立的人格，不要把父母的期望和遗憾过度的强加给孩子。至于功名利禄放一边吧。这一点，我相信你能够做到的，而且做的比我好。\n 罗里吧嗦，写了一堆废话，简单来说，我希望你俩有时间的话，多回家看看，仅此而已。\n","description":"","tags":null,"title":"给姐姐，写在你出嫁之后","uri":"/life/to_my_sister/"},{"categories":null,"content":"上班第一天 this is a test\nhello world～～\nHello LQ～～\nadd some words for test\n","description":"","tags":null,"title":"Hello LQ","uri":"/life/work001/"},{"categories":null,"content":"遇见问题？？ 这两天在折腾一个数仓测试环境的迁移，MySQL 自然是必不可少缺少的咯，因为是测试环境，配置都是按最方便的来做，配置过程可参考：MySQL 安装\n前一天使用都是正常的，结果第二天不知什么原因，在使用 Maxwell 进行增量同步业务数据到 HDFS 过程中，爆出以下错误：java.sql.SQLException: Access denied for user 'root'@'aliyun001' (using password: YES) 这是一个常见的错误，遇到好几次，所以记录以下。\n解决？？？ 遇到该问题，立刻就尝试使用mysql -u root -p来登录数据库看看，结果仍然报错，同上。这时意识到数据库是进不去了。。。\n于是乎，可以先设置跳过密码：\n1 2  vim /etc/my.cnf skip-grant-tables #在[mysqld]下面添加这一行，忽略权限表   重启 MySQL：sudo systemctl restart mysqld.service\n进入之后选择 use mysql，然后 select user, host from user; 出现的结果令人惊讶！！！没有 root 用户了？？？没有就自己造一个！！！\n养成好习惯先刷新一下：flush privileges;\n创建create user 'root'@'localhost' identified by '123456';，然后报错：ERROR 1396 (HY000): Operation CREATE USER failed for 'root'@'localhost'，估计应该是没删干净？？再删一下：drop user root@'localhost';，刷新一下；这个时候再创建就 ok 了~~\n有了 root 用户之后，再给权限：mysql\u003e GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION; #赋予所有库所有表操作权限；刷新一下~~\n再回到 /etc/my.cnf 删除 skip-grant-tables。重启数据库，这个时候就可以正常使用了~~\n如果为了方便还可以再设置一下 host 为 %：update user set host=\"%\" where user=\"root\";\n","description":"","tags":null,"title":"MySQL——Access denied for user 'root'@'localhost' (using password: YES) 问题解决","uri":"/tech/mysql_access_problem/"},{"categories":null,"content":"Windows 配置 Scala 开发环境 零、前言 谈起现如今的大数据开发框架，那么 Spark 想必是众所周知的。而 Spark 就是使用 Scala 语言编写的。所以问题来了，该如何配置一套 Scala 的环境呢？\n其实，有了 Java 的底子之后，配置一套 Scala 开发环境并不是很难，因为 Scala 一门以 JVM 为运行环境并将面向对象和函数式编程的最佳特性结合在一起的 静态类型编程语言，支持面向对象和函数式编程。\n一、Scala 环境搭建 前文提到，Scala 是运行在 JVM 上的，所以首先先保证开发环境已经配置了 JDK，这里不做过多赘述。（我使用的 JDK1.8）\n1.下载所需要的 Scala 版本，download；\n2.将下载好的 zip 文件压解至无中文的目录下，最好也不要有空格；\n3.打开 Windows 的系统属性中的环境变量，配置 Scala 的环境变量：SCALA_HOME 以及所属目录：D:\\DevelopmentTool\\scala-2.12.11\n配置 path 路径，将 bin 目录添加至系统环境 %SCALA_HOME%\\bin\n4.测试\n打开 terminal 终端，输入 scala 出现如下图所示表示配置好环境~~\n二、在 IDEA 中配置 Scala 开发环境 IDEA 懂的都懂 好用就完事了！！！下面将演示如何在 IDEA 集成 Scala 开发环境。\n1.在 Setting 的 plugins 中搜素 Scala -\u003e点击 Install-\u003e点击 ok-\u003e点击 apply，重启 IDEA；\n2.创建一个 projet，默认是不支持 Scala 的开发。需要手动引入 Scala 框架，在项目上，点击右键-\u003e Add Framework Support... -\u003e选择 Scala-\u003e点击 OK。\n注意：如果是第一次引入框架，Use libary 看不到，需要选择你的 Scala 安装目录，然后工具就会自动识别，就会显示 user libary。\n3.测试\n以上我们已经完成了 Scala 的开发环境，可以完成一些基础的相关。\n三、配置 Spark 开发环境 1.创建 Spark 项目，添加相关依赖：\n\u003cdependency\u003e \u003cgroupId\u003eorg.apache.spark\u003c/groupId\u003e \u003cartifactId\u003espark-core_2.12\u003c/artifactId\u003e \u003cversion\u003e3.0.0\u003c/version\u003e \u003c/dependency\u003e 添加依赖之后，就可以使用 Spark 相关的 API，但是在运行过程中，控制台可以会出现一些神奇的错误，如下所示：\nERROR Shell: Failed to locate the winutils binary in the hadoop binary path java.io.IOException: Could not locate executable null\\bin\\winutils.exe in the Hadoop binaries. at org.apache.hadoop.util.Shell.getQualifiedBinPath(Shell.java:382) at org.apache.hadoop.util.Shell.getWinUtilsPath(Shell.java:397) at org.apache.hadoop.util.Shell.\u003cclinit\u003e(Shell.java:390) at org.apache.hadoop.util.StringUtils.\u003cclinit\u003e(StringUtils.java:80) at org.apache.hadoop.security.SecurityUtil.getAuthenticationMethod(SecurityUtil.java:611) at org.apache.hadoop.security.UserGroupInformation.initialize(UserGroupInformation.java:274) at org.apache.hadoop.security.UserGroupInformation.ensureInitialized(UserGroupInformation.java:262) at org.apache.hadoop.security.UserGroupInformation.loginUserFromSubject(UserGroupInformation.java:807) at org.apache.hadoop.security.UserGroupInformation.getLoginUser(UserGroupInformation.java:777) at org.apache.hadoop.security.UserGroupInformation.getCurrentUser(UserGroupInformation.java:650) at org.apache.spark.util.Utils$.$anonfun$getCurrentUserName$1(Utils.scala:2412) at scala.Option.getOrElse(Option.scala:189) at org.apache.spark.util.Utils$.getCurrentUserName(Utils.scala:2412) at org.apache.spark.SparkContext.\u003cinit\u003e(SparkContext.scala:303) at org.erxi.spark.core.rdd.operator.transform.AdClickCount$.main(AdClickCount.scala:8) at org.erxi.spark.core.rdd.operator.transform.AdClickCount.main(AdClickCount.scala) 这是因为在程序中使用了 Hadoop 相关的内容，比如写入文件到 HDFS。出现这个问题并不是程序的错误，而是windows 系统用到了 hadoop 相关的服务，解决办法是通过配置关联到 windows 的系统依赖就可以了。\n2.解决异常 安装 Spark：到官网 https://spark.apache.org/downloads.html 选择合适的版本下载，注意 Spark 与Hadoop 版本选择要相对应，建议下载预编译（Pre-built）好的版本，省得麻烦。解压文件，然后与配置 Scala 环境类似配置对应的 SPARK_HOME 与 path 变量 %SPARK_HOME%\\bin;\n安装 Hadoop：到官网 https://hadoop.apache.org/releases.html 下载与上边的 Spark 对应的版本。后与配置 Scala 环境类似配置对应的 HADOOP_HOME 与 path 变量 %HADOOP_HOME%\\bin。\n除此之外，还需要到这里 https://github.com/cdarlint/winutils 下载对应版本的 bin 目录中的 hadoop.dll 和 winutils.exe，复制到 hadoop 目录的 bin 目录下。\n完成上述操作之后，已经在 Windows 环境下搭建了可用于测试的 Spark 环境和 Hadoop 环境。最后还需要再 IDEA 中导入一下 HADOOP_HOME，这样运行程序就不会报错啦~~\n在 IDEA 中配置 Run Configuration，添加 HADOOP_HOME 变量：\n","description":"","tags":null,"title":"Windows 配置 Scala 开发环境","uri":"/tech/bigdata/scala/"},{"categories":null,"content":"标题写在变“羊”之前 占个坑 按照目前国内的这个趋势 躲得过初一 能躲得过十五嘛？？？？？？？？？\n","description":"","tags":null,"title":"我与开源的那些事儿","uri":"/life/covid-19/"},{"categories":null,"content":"单例模式 为什么使用单例模式？ 单例设计模式：一个类只允许创建一个对象（或者实例），那么这个类就是一个单例类，这种设计模式就叫做单例设计模式，简称单例模式。\n单例模式的概念并不是很难，一看就能明白。接下来我们思考一下，为什么需要单例这种设计模式？它能解决哪些问题？\n实战案例：处理资源访问冲突 咱们先来看第一个例子。该例子中，我们自定义实现了一个往文件中打印日志的 Logger 类。具体的实现代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  public class Logger { private FileWriter writer; public Logger() { File file = new File(\"/Users/zhangsan/log.txt\"); writer = new FileWriter(file, true); // true表示追加写入  } public void log(String message) { writer.write(message); } } // Logger类的应用示例： public class UserController { private Logger logger = new Logger(); public void login(String username, String password) { // ...省略业务逻辑代码...  logger.log(username + \" logined!\"); } } public class OrderController { private Logger logger = new Logger(); public void create(OrderVo order) { // ...省略业务逻辑代码...  logger.log(\"Created an order: \" + order.toString()); } }   上述代码的功能并不是很复杂，但请停下来思考一下，这段代码存在什么问题。\n细心的同学可能已经注意到了，所有的日子都写入到同一个文件 /Users/zhangsan/log.txt 中。在 UserController 和 OrderController 中，分别创建了两个 Logger 对象。在 Web 容器的 Servlet 多线程环境下，如果两个 Servlet 线程同时分别执行 login() 和 create() 两个函数，并且同时写日子到 log.txt 文件中，那么就有可能存在日子信息相互覆盖的情况。\n为什么会出现相互覆盖呢？可以这样类比着理解。在多线程环境下，如果两个线程同时给同一个共享变量加 1，因为共享变量是竞争资源，所以，共享变量最后的结果有可能并不是加 2，而是只加了 1。同理，这里的 log.txt 文件也是竞争资源，两个线程同时往里面写数据，就有可能会存在相互覆盖的情况。\n那么该如何来解决和这个问题呢？通常的思路应该是加锁：给 log() 函数加互斥锁（Java 中可以通过 synchronized 的关键字），同一时刻只允许一个线程调用 log() 函数。具体的代码实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class Logger { private FileWriter writer; public Logger() { File file = new File(\"/Users/zhangsan/log.txt\"); writer = new FileWriter(file, true); // true表示追加写入  } public void log(String message) { synchronized(this) { writer.write(mesasge); } } }   不过，仔细思考一下，这真的能解决多线程写入日志时相互覆盖的问题吗？答案是否定的！这是因为这种锁是一个对象级别的锁，一个对象在不同的线程下同时调用 log() 函数，会被强制要求顺序执行。但是，不同的对象之间并不能共享同一把锁。在不同的线程下，通过不同的对象调用执行 log() 函数，锁并不会起作用，任然有可能存在写入日志相互覆盖的问题。\n这里稍微补充一下，在刚刚的讲解和给出代码的中，故意“隐藏”了一个事实：我们给 log() 函数加不加对象级别的锁，其实都没有关系。因为 FileWriter 本身就是现场安全的，它的内部实现中本身就假了对象级别的锁，因此，在外层调用 write() 函数的时候，再加对象级别的锁实际上是多此一举。因为不同的 Logger 对象不共享 FileWriter 对象，所以 FileWriter 对象级别的锁也解决不了数据写入相互覆盖的问题。\n那么问题来了，该如何解决呢？实际上，要解决这个问题并不是很难。我们只需要吧对象级别的锁换成类级别的锁就可以了。让所有的对象都共享同一把锁。这样就避免了不同对象之间同时调用 log() 函数，而导致的日志覆盖的问题。具体的代码实现如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class Logger { private FileWriter writer; public Logger() { File file = new File(\"/Users/zhangsan/log.txt\"); writer = new FileWriter(file, true); // true表示追加写入  } public void log(String message) { synchronized(Logger.class) { // 类级别的锁  writer.write(mesasge); } } }   除了使用类级别锁之外，实际上，解决资源竞争问题的办法还有很多，分布式锁是最常听到的一种解决方案。不过，实现一个安全可靠、无 bug、高性能的分布式锁，并不是件容易的事情。除此之外，并发队列（比如 Java 中的 BlockingQueue）也可以解决这个问题：多个线程同时往并发队列里写日志，一个单独的线程负责将并发队列中的数据，写入到日志文件。这种方式实现起来也稍微有点复杂。\n相对于这两种解决方案，单例模式的解决思路就简单一些了。单例模式相对于之前类级别锁的好处是，不用创建那么多 Logger 对象，一方面节省内存空间，另一方面节省系统文件句柄（对于操作系统来说，文件句柄也是一种资源，不能随便浪费）。\n我们将 Logger 设计成一个单例类，程序中只允许创建一个 Logger 对象，所有的线程共享使用的这一个 Logger 对象，共享一个 FileWriter 对象，而 FileWriter 本身是对象级别线程安全的，也就避免了多线程情况下写日志会互相覆盖的问题。\n按照这个设计思路，我们实现了 Logger 单例类。具体代码如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  public class Logger { private FileWriter writer; private static final Logger instance = new Logger(); private Logger() { File file = new File(\"/Users/shangsan/log.txt\"); writer = new FileWriter(file, true); // true表示追加写入  } public static Logger getInstance() { return instance; } public void log(String message) { writer.write(mesasge); } } // Logger类的应用示例： public class UserController { public void login(String username, String password) { // ...省略业务逻辑代码...  Logger.getInstance().log(username + \" logined!\"); } } public class OrderController { public void create(OrderVo order) { // ...省略业务逻辑代码...  Logger.getInstance().log(\"Created a order: \" + order.toString()); } }   实战案例二：表示全局唯一类 从业务概念上，如果有些数据在系统中只应保持一份，那就适合设计为单例类。\n比如，配置信息类。在系统中，我们只有一个配置文件，当配置文件被加载到内存后，以对象的形式存在，也理所应当只有一份。\n再比如，唯一递增 ID 号码生成器，如果程序中有两个对象，就会存在生成重复 ID 的情况，所以我们应该将 ID 生成器类设计为单例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  import java.util.concurrent.atomic.AtomicLong; public class IdGenerator { // AtomicLong 是一个 Java 并发库中提供的一个原子变量类型,  // 它将一些线程不安全需要加锁的复合操作封装为了线程安全的原子操作，  // 比如下面会用到的 incrementAndGet().  private AtomicLong id = new AtomicLong(0); private static final IdGenerator instance = new IdGenerator(); private IdGenerator() {} public static IdGenerator getInstance() { return instance; } public long getId() { return id.incrementAndGet(); } } // IdGenerator 使用举例 long id = IdGenerator.getInstance().getId();   如何实现一个单例？ 概括起来，要实现一个单例，我们需要关注的无外乎下面几个：\n 构造函数需要是 private 访问权限的，这样才能避免外部通过 new 创建实例； 考虑对象创建时的线程安全问题； 考虑是否支持延迟加载； 考虑 getInstance() 是否加锁（性能是否高）。  1. 饿汉式 饿汉式的实现方式比较简单。在类加载的时候，instance 静态实例就已经创建并初始化好了，所以 instance 实例的创建过程是线程安全的。不过，这样的实现方式不支持延迟加载（在真正用到 IdGenerator 的时候，再创建实例），从名字中我们也可以看出这一点。具体的代码实现如下所示：\n1 2 3 4 5 6 7 8 9 10 11  public class IdGenerator { private AtomicLong id = new AtomicLong(0); private static final IdGenerator instance = new IdGenerator(); private IdGenerator() {} public static IdGenerator getInstance() { return instance; } public long getId() { return id.incrementAndGet(); } }   有人觉得这种实现方式不好，因为不支持延迟加载，如果实例占用资源多（比如占用内存多）或初始化耗时长（比如需要加载各种配置文件），提前初始化实例是一种浪费资源的行为。最好的方法应该在用到的时候再去初始化。不过，从我的角度来说，并不是很认同这种观点。\n如果初始化耗时长，那我们最好不要等到真正要用它的时候，才去执行这个耗时长的初始化过程，这会影响到系统的性能（比如，在响应客户端接口请求的时候，做这个初始化操作，会导致此请求的响应时间变长，甚至超时）。采用饿汉式实现方式，将耗时的初始化操作，提前到程序启动的时候完成，这样就能避免在程序运行的时候，再去初始化导致的性能问题。\n如果实例占用资源多，按照 fail-fast 的设计原则（有问题及早暴露），那我们也希望在程序启动时就将这个实例初始化好。如果资源不够，就会在程序启动的时候触发报错（比如 Java 中的 PermGen Space OOM），我们可以立即去修复。这样也能避免在程序运行一段时间后，突然因为初始化这个实例占用资源过多，导致系统崩溃，影响系统的可用性。\n2. 懒汉式 有饿汉式，对应的，就有懒汉式。懒汉式相对于饿汉式的优势是支持延迟加载。具体的代码实现如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class IdGenerator { private AtomicLong id = new AtomicLong(0); private static IdGenerator instance; private IdGenerator() {} public static synchronized IdGenerator getInstance() { if (instance == null) { instance = new IdGenerator(); } return instance; } public long getId() { return id.incrementAndGet(); } }   不过懒汉式的缺点也很明显，我们给 getInstance() 这个方法加了一把大锁（synchronzed），导致这个函数的并发度很低。量化一下的话，并发度是 1，也就相当于串行操作了。而这个函数是在单例使用期间，一直会被调用。如果这个单例类偶尔会被用到，那这种实现方式还可以接受。但是，如果频繁地用到，那频繁加锁、释放锁及并发度低等问题，会导致性能瓶颈，这种实现方式就不可取了。\n3. 双重检测 饿汉式不支持延迟加载，懒汉式有性能问题，不支持高并发。那我们再来看一种既支持延迟加载、又支持高并发的单例实现方式，也就是双重检测实现方式。\n在这种实现方式中，只要 instance 被创建之后，即便再调用 getInstance() 函数也不会再进入到加锁逻辑中了。所以，这种实现方式解决了懒汉式并发度低的问题。具体的代码实现如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class IdGenerator { private AtomicLong id = new AtomicLong(0); private static IdGenerator instance; private IdGenerator() {} public static IdGenerator getInstance() { if (instance == null) { synchronized(IdGenerator.class) { // 此处为类级别的锁  if (instance == null) { instance = new IdGenerator(); } } } return instance; } public long getId() { return id.incrementAndGet(); } }   网上有人说，这种实现方式有些问题。因为指令重排序，可能会导致 IdGenerator 对象被 new 出来，并且赋值给 instance 之后，还没来得及初始化（执行构造函数中的代码逻辑），就被另一个线程使用了。\n要解决这个问题，我们需要给 instance 成员变量加上 volatile 关键字，禁止指令重排序才行。实际上，只有很低版本的 Java 才会有这个问题。我们现在用的高版本的 Java 已经在 JDK 内部实现中解决了这个问题（解决的方法很简单，只要把对象 new 操作和初始化操作设计为原子操作，就自然能禁止重排序）。关于这点的详细解释，跟特定语言有关，我就不展开讲了，感兴趣的同学可以自行研究一下。\n4. 静态内部类 我们再来看一种比双重检测更加简单的实现方法，那就是利用 Java 的静态内部类。它有点类似饿汉式，但又能做到了延迟加载。具体是怎么做到的呢？我们先来看它的代码实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  public class IdGenerator { private AtomicLong id = new AtomicLong(0); private IdGenerator() {} private static class SingletonHolder{ private static final IdGenerator instance = new IdGenerator(); } public static IdGenerator getInstance() { return SingletonHolder.instance; } public long getId() { return id.incrementAndGet(); } }   SingletonHolder 是一个静态内部类，当外部类 IdGenerator 被加载的时候，并不会创建 SingletonHolder 实例对象。只有当调用 getInstance() 方法时，SingletonHolder 才会被加载，这个时候才会创建 instance。instance 的唯一性、创建过程的线程安全性，都由 JVM 来保证。所以，这种实现方法既保证了线程安全，又能做到延迟加载。\n5. 枚举 最后，我们介绍一种最简单的实现方式，基于枚举类型的单例实现。这种实现方式通过 Java 枚举类型本身的特性，保证了实例创建的线程安全性和实例的唯一性。具体的代码如下所示：\n1 2 3 4 5 6 7 8  public enum IdGenerator { INSTANCE; private AtomicLong id = new AtomicLong(0); public long getId() { return id.incrementAndGet(); } }   重点回顾 1. 单例的定义 单例设计模式（Singleton Design Pattern）理解起来非常简单。一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。\n2. 单例的用处 从业务概念上，有些数据在系统中只应该保存一份，就比较适合设计为单例类。比如，系统的配置信息类。除此之外，我们还可以使用单例解决资源访问冲突的问题。\n3. 单例的实现 单例有下面几种经典的实现方式。\n 饿汉式  饿汉式的实现方式，在类加载的期间，就已经将 instance 静态实例初始化好了，所以，instance 实例的创建是线程安全的。不过，这样的实现方式不支持延迟加载实例。\n 懒汉式  懒汉式相对于饿汉式的优势是支持延迟加载。这种实现方式会导致频繁加锁、释放锁，以及并发度低等问题，频繁的调用会产生性能瓶颈。\n 双重检测  双重检测实现方式既支持延迟加载、又支持高并发的单例实现方式。只要 instance 被创建之后，再调用 getInstance() 函数都不会进入到加锁逻辑中。所以，这种实现方式解决了懒汉式并发度低的问题。\n 静态内部类  利用 Java 的静态内部类来实现单例。这种实现方式，既支持延迟加载，也支持高并发，实现起来也比双重检测简单。\n 枚举  最简单的实现方式，基于枚举类型的单例实现。这种实现方式通过 Java 枚举类型本身的特性，保证了实例创建的线程安全性和实例的唯一性。\n","description":"","tags":null,"title":"设计模式（一）-- 单例模式 001","uri":"/tech/designpattern/001_signle%E4%B8%80/"},{"categories":null,"content":"Blog010 —— 考研系列完结篇，但是还有生活 零、写在前面 说实在的，我不想去回忆关于考研的任何内容，备考过程也好，考试当天的过程也罢，都不愿意去提起，真的太折磨了。所有 APP 中推荐的关于考研的内容，都刻意的去点了 X，但有可能就是应为刻意而为之，反而越想去逃避，不想去面对这一切。似乎就好像不去主动面对，这一切就还没结束，结果也就不会到来。但时间是一直往前走，不会止步的。除了麻痹、自我安慰、欺骗自己，真的不知道该做些什么。考研结束的这几天，过得也特别颓废。什么都不想做，吃了睡，睡了吃，报复性的“糟蹋”自己，来“补偿”这一年的付出。。。\n每到深夜，闭上眼，脑中回想的都是这一年的点点滴滴，又回头看看备考期间所写下的博客。就像是开篇中所写下的写在之后所提到，我想用文字记录下这一切。当看到这段话的时候，说明我坚持下来了，我也做到去突破自己的壁垒，勇敢的去面对自己这一年的汗水与泪水。既然之前的都写了，为何不写完这最后一篇呢？\n一、回到起点 是的，就像这篇的标题一样，考研终于结束了。这一年来的备考过程也总算是画上了个句号。这一年回想起来，过得也还是挺快的。一步一步也就这样走向了终点。但，真正的生活也才刚刚开始而已。\n这一路走来的点点滴滴，宛如就在昨夜，仍然历历在目，甚至还以为现在真的是结束了吗？？或许，再给我点时间，我还能坚持坚持，还能再努力努力，还能做的更好一点呢。。\n但当专业课交完试卷，走出考场的那一刻起，都已成为过往。很感谢这一年每月的记录，才有现在的最终篇。\n走出考场，整个人都好像失去了目标、失去方向、失去走下去的动力。我好像回到了一年前的自己，又好像看见了三年前的自己。\n一年前的自己，刚刚开始准备考研，还在吃着上一届学长学姐考研的瓜，跟风吐槽着数学出的简单、英语有多难、政治肖大爷有多神。但作为这届刚刚结束这一切的考研人，我不愿去讨论，甚至不想与这个世界存在任何联系，我怕一点点的风吹草动会影响接下来的心情。去年这个时候面对的是不知该如何复习的迷茫感，现在是不知该做些什么的困惑，甚至不知道该向什么方向去努力。那时的自己，你不了解你所处的位置，也无法判断自己真正的能力与实力。但是，却有着极大的野心和孤独一掷的决心与勇气。你说，你要考个牛掰的学校，想体验一下去大城市读书的感觉。同时，你对自己的学习方法也有时摸不着头脑，有时又蜜汁自信。最后，你说不管结果如何，你会坦然去面对这一切的后果，因为你相信，只要坚持到底总不会太差，如果不是，那就是还没到最后。那么值得吗？？？我觉得值！！！这是一段极为难得的专注时光，得以有机会深入地去探求最真实的自我，也是一场与自己的比赛，与自己对话的机会。\n是啊，你现在走完了这一路，为什么不敢去面对当时的自己了呢？？没达到自己预期的样子。。。对，确实没达到。原以为的自己能够在考场上意气风发、洋洋洒洒地写完试卷，走出考场时，还不忘给自己一个微笑。考前，我曾一遍一遍地想象自己在考场上的自己，想着这一年的付出终于能发挥出来，所有的付出都能看得到回报，这一路的坚持也是值得的。但事与愿违，四场下来，一场比一场难受，但我不能表现出来，我怕会影响下一场考试，怕自己会崩溃，怕自己没有踏进下一场考试的勇气。可能，这也就是现实了吧。\n三年前的自己，那时的你带着高考的不甘，极其不情愿的来到现在的学校，都还不知考研对你意味着是什么，就把考研定为自己的目标，大一的时候还不怎么逃课，上课也很积极坐在最前排，对大学里的一切即充满新鲜感，同时也很迷茫。迷茫的是大学和高中完全是两个样子，没有统一的标准，不知道到底怎么做是对的，哪样是错的。那时的你，眼界还仅仅局限于校园内，似乎就感觉世界好大，但与我无关，老老实实的做个普普通通的学生就好了，不是吗？你也更不会想到现如今的自己，不会真正参与到这个更大的世界。但现在，我又好想逃离这个错综复杂的世界。。。\n二、倒计时的煎熬 进入十二月 进入十二月，代表着不足一个月，就得走进考场，那时候政治啥都没背，只把肖八的选择题给做完，其他的老师的模拟题也不愿意去做，对政治这门课，就有点摆烂。英语开始最后一遍过真题，虽然记住大部分的答案，能要求自己的就是读懂文章，并分析答案的选项，正确选项是如何选出来的，错误选项是如何设置干扰的。每天保持一篇作文的量。数学也结束了真题，可能太过于急于求成，做完之后，没有进行详细的、系统的复盘，就去模拟题中挣扎了。现在看来是极其不明智的做法，数学说到底，还是应该以真题为主，模拟题是在全部掌握真题的情况下来开拓眼界、拓展思路，见见新的题型和技巧用的。看周围的同学都在做模拟题，自己也就忍不住去跟风，不免有点本末倒置。\n突然就觉得时间不够用了，每天都对自己说，起的早一点、学得晚一点、多坚持一点。硬生生的压迫自己去学习，效率也就不会太高。但是我不敢对自己有丝毫懈怠，因为真的快到头了，留给自己的时间也不多了。加油，踏踏实实的走下去。\n倒计时两周 这个时候，突然人就崩溃了。感觉好像啥都会，但再仔细想想又觉得自己哪里都不太会。肖四已经到手，根本背不动，学校这边还有一堆恶心的人和事来搞人状态，就想着我只是考个研究生，为什么觉得全世界都和我为敌，到底做错了什么？？英语也被 21 年的真题给打击到。。数学更是被各种模拟题做的我怀疑人生。专业课由于只有参考数目，并不知道实际上复习的咋样，一直都是玄学状态。\n我不止一次想过，要不就这样了吧。实在是坚持不动了。考研，真的是太痛苦了，比我原本的预期要难受的多的多的多。但回过头来再想想，再苦再累也就还剩两周，走完吧，别给自己留有遗憾。考场都没踏上，咋就自己知道自己就一定做不到呢？\n倒计时五天 距离考试还剩一周，真的是过一天少一天。现在也不做新题了，每天翻翻看自己做过的试卷，从错题找原因，再回归到讲义，查缺补漏。也就是在这个时候，回归真题，才意识到真题和模拟题的作用是不等价的。肖四也把当时可能考到的点都背了背，反正每天都在坚持嘛，虽然是不可能背完的了，奇迹也创造不出来。英语单词逐渐开始慢慢减少记忆量，腾出更多的时间来给作文。专业课就根据考纲和之前的真题回忆，每天睡前不断回忆专业课的内容。\n到了这个时间点，反而没有前两周那么慌张，更从容，更平静了。开始慢慢调整自己的状态，虽然不能回到巅峰，但最起码别太差就好。到了临考前两天，晚上从图书馆回宿舍的时候，开始收拾资料，逐渐往宿舍搬，收到一半的时候，突然好舍不得，不禁就呆住去回忆这一年的点点滴滴，眼泪止不住的在眼角里打转，强忍不让其落下来。回宿舍的路上，望着天上的星星，我就在想，所坚持的这一切真的值得吗？？为了考研所放弃的太多太多，真的不会后悔吗？？\n还记得，在十月份的博客中写到：我还在等一场雪，来见证这场考试。周五看好去考场的路线回到酒店，晚上真的飘起了小雪。从唯心主义来说，真的就有很大信心去踏上明天的战场。\n三、但是还有生活 是的，现在距离考研结束已经快过去一周了。这一年就好像做了一场梦，考试结束，梦也就醒了。\n还记得高考结束之后，留下的最多的是疲惫感，现在也是。还有一种无力感，颓废感。从踏进大学校门的那一刻起，就把考研当做自己的最终目标，完成之后，不知道自己下一步该怎么走，该走向哪？？一时间，又好似觉得自己的努力有些可笑，有些一文不值，开始不断的否定自己。\n现在考研都在默认奇数年简单、偶数年简单，虽然事实的确如此，但难与不难，往往更取决于个人的主观感受，而不是你我说了算，我们要做的就是坦然去面对这一切，在考场上做到发挥出最好的自己。回答前面的问题，值得！！！如果再给我一次机会，我还会选择考研，因为只有历经了真正意义上身心的折磨，才能算得上是成长，遇见困难，要硬着头皮冲，而不只想着做逃兵，一直在退缩。有的时候，不逼自己一把，都不知道自己是什么样的。最重要的是，这场考试，虽然发挥的不是太好（巅峰状态的百分之七十），但没有留下太大的遗憾，我尽我所能，做到了最好的自己。\n除了这一切，但是还有生活。\n想想之前所规划的，考试结束之后，想做的事情，好像也没啥了。脱离开源社区半年，突然回去，既熟悉又陌生。熟悉的是那种来自开源人带来的感觉是不会变的，陌生的是又有了许多新的小伙伴、新的代码，还需自己花时间去了解一下。这半年来，没有时间去积累新的技术栈，现在也有时间去探索新的领域，做新的尝试。这半年来，由于备考而落下的书籍，也有时间去阅读了。btw 可以的话，我还想把大学期间读过对我影响比较大的书买纸质版的再来一遍。还有就是，当时想着去健身，现在也有了大把的时间去锻炼自己，让自己朝着更好的方向去发展。\n若干年后，你会怎样回想这一年？人生海海，这一年，我们记得肆虐的洪水，反反复复的疫情，更记得那些逆行的无畏身影，爱与善汇成浩荡星河，在奉献，在永不言弃的精神。这一年，我们记得巨星，灿烂而不朽的陨落，记得他们走过一地荒芜，留下生生不息。记得那些顽强和汗水写下的闪耀时刻。每一个巨浪都成就于微澜，每一个普通的灵魂里都有江河。这一年，我们记得，勇立潮头的你，披荆斩棘前行的你，每一天都努力让自己和周边世界好一点点的你，记得一路千山万壑，希望就是我们自己，都在路上！\n 附：考研歌单\n 《平凡之路》-- 朴树 《一群无知少年的梦想》-- 杨赛 《稻香》-- 周杰伦 《拼个世界给自己》 -- 姜云升 《没有理想的人不伤心》-- 新裤子 《Iridescent》-- Linkin Park 《Beautiful》-- Eminem 《猛犸》-- 后海大鲨鱼 《幸存者》-- 林俊杰 《孤勇者》-- 陈奕迅  最后，有的人说，奇数年的坚持，都是为了在偶数年迎来好运，希望下一年会好一点~~\n还有就是，去 TM 的 2021，终于结束了。。。。。\n","description":"","tags":null,"title":"大政的考研 Blog010 —— 但是还有生活","uri":"/life/kaoyan010/"},{"categories":null,"content":"Blog009 —— 幸存者，十一月复盘 一、再坚持一下 1.1 彻底崩溃 是的，就像标题所说的那样，随着距离考研时间的越来越近，心里也就越来越着急，紧张感、压迫感都在无形的逼近。总想着，还有好多好多没有复习，到底该怎么办啊！就这样想着想着，心态崩了，严格意义上来说，是考研这将近一年的时间中第一次崩溃。\n进入考研倒计时 100 天的时候，我在想，还不着急，还有三个多月呢，时间在一定程度上还是很充裕的，就想着是不是背诵记忆类的内容可以往后放一放，况且专业课复习的不咋滴，数学才是重点。慢慢的到了快倒计时 60 天 的时候，突然的有一种压迫感袭来。马上就剩下两个月了，两个月需要背那么多，你能做到么？？但问题是，其实数学和专业课复习的也不是很好啊。。要知道，我高三的时候都没这样过，有的时候还经常逃课，上课睡觉，考研给我整成什么样子了。我也想去外面玩，好好的睡个懒觉，这学期更是进山窝里到目前为止三个月的时间没有出去过！就算是高考在我眼前，五一假期的时候，我还是该浪浪该玩玩。也许，这就应了那句话：出来混，迟早是要还的。。。\n就这样，到了倒计时 50 天的时候，彻底崩溃，下一步不知该如何是好，整个人都充满了无力感。总想着剩下的时间，英语作文、新题型、翻译、完型都没开始；高数的一些边边角角小的知识点、几何应用、物理应用都不会；线性代数掌握的也不是好牢固，知识点都串不起来，做题的时候都是磕磕巴巴，甚至还做不出来；专业课，笼统的感觉好像全部都掌握的还行，每个点都能说出个一二三出来，但是到具体的题目，又不太行；至于政治，更别提了只听了马原部分，经济学部分掌握的还不好，史纲也知道个点点，其余的压根没看。下一步到底该怎么走。考四门，结果没有一门是能让我安心的。\n下一步该怎么办？是放弃吗？还是做无谓的坚持？？\n很多的崩溃可能往往就是那么一瞬间。（但是学过马哲之后，就要说这句话是错的了，这不明显忽略了量变对于质变的影响嘛）。\n1.2 还剩 50 天 对啊，你还剩 50 天，又不是下周就要考研了，干嘛这么着急呢？焦虑有用吗？也许只会有反作用吧。就像之前暑假时候的状态，想玩但是又不敢玩，只能硬着头皮学，反而没有怎么玩，学的也不咋滴。你现在的问题不是不想学，而是不知道该如何去学，既然是有学习的心，剩余的就是学什么的问题了。\n这一路走来，很多时候我们都习惯于放大自己的缺点，和强调自己的特殊性，认为好像只有自己会遇见这种问题，甚至会觉得，我只是想考个研，怎么全世界都在和我作对！其实不然，我们也只是百万考生中的一员，其实往大了说，大家的问题也都差不多。不排除肯定有复习的特别好的大佬，也肯定有氛围组的炮灰，但是我想说的是绝大多数人都一样。都会感觉到焦虑。在没出成绩之前，谁敢说自己就一定能考上呢？坚持到这个时间段，我们当下需要做的就是走好自己的每一步，过好自己的每一天。但是如果太刻意去强调每天都要学的扎扎实实的，在很大程度上也会有副作用。人是特别容易受主观因素影响的动物，没有人能够保证自己学的特别棒，真的没有，偶尔出现情绪波动都是再正常不过的事情了，我们要学会接受自己的不足，欣赏自己的不完美，只有这样才能把自己的心态给端平，也能够给自己一个喘一口气的机会。\n1.3 30 天倒计时 就这样，不算太顺，但也不能说是太差，进入了三十天倒计时。有的时候，我就会想，为什么通常把三十天左右当做一个结点呢？仅仅是因为一个月的时间在这个范围左右嘛。也许吧。但也有可能是接下来的每一天离自己即会更近一步，又会渐行渐远。。每每这个时候，我就会想起高三对自己说的话：我不去想是否能够成功，既然选择了远方，便只能风雨兼程。其实吧，事情远没有自己想的那么严重。如果不考研的话，我就是一个不起眼的二本院校普普通通的毕业生，再说直白点，本身就没啥好失去的。考研，考上了等于赚了，考不上就问问自己这一年的坚持对自己而言值得吗？？有收获吗？？现在的自己是当时自己所想的样子嘛？？\n和之前的博客里面所写的一样，从选择考研的那一刻起，我就在问自己，为什么要考研，或者说读研对于我来说意味着什么。我能够感觉到，就算是我读研毕业之后，工作能力也许并不会比现在的自己高出多少。这个答案，直到今天，我还在寻找。。。\n 二、十一月复盘 ① 数学 数学分值 150，自然而然是重中之重。但是数学的学习真的很枯燥无味，到现在这个阶段才感觉到在复习前期对数学真的是低估了。从而导致数学的整体进度到中后期开始慢慢落了下了来。从辩证法的角度来看，这一点也不是一点好处没有的，就把高数和线代的强化部分又抽重点给过了一遍，也是因为之前暑假的时候为了赶进度而导致的原因吧。由此可见，学习是真的要学的扎扎实实，不能囫囵吞枣！\n这个月主要就是把武神的 17 堂课给看的差不多，但是后面的几个专题因为时间的原因只是结合课程把里面的一些掌握不太好的题型给做了，并没有全部完成，而且整个课程还剩物理应用没有复习。进入十二月的第一天给它啃了吧。不得不说，武神终究是武神， 17 堂课听得很痛苦，因为全是重难点，几乎没有太多的垃圾题目，刷起来难度就真的大很多。但是对于解决问题的角度，都提供了很好的解法，尤其是微分中值定理的证明，之前看见这种题目从心理上来说是比较畏惧的，无法充分利用题目的已知条件，不会正确的构造函数，但这些经过系统地训练之后，会发现都是有迹可循的。所以考研给我的感觉，后期的付出比天赋重要的多。再有就是二重积分的求解问题，这段时间真题刷下来，二重积分几乎是必考的，往往还会更倾向于大题目的考察，解决此类问题的时候，首先看区间是否是对称区间，以及是否能够通过平移利用函数的奇偶性来适当的简化计算量，以及对于直角坐标和极坐标之间的转化适用于什么样的题目，还有就是像星形线、摆线之类的比较特殊的曲线图像，心里要有个大概的了解，这样的话遇见题目才不会出现无从下手的情况。课程的质量还是可以保证的，干货满满，就是听起来很费精力！！！\n其次，就是从这个月下半旬开始，真题的套卷终于开始刷了，虽然半个月的时间只消化了八张真题试卷。以下是对从 11——18 年真题的简单小结：\n 11 年：难度一般，由于是第一次以套卷的形式开始做数学，出现很多知识点串不起来，像填空题中出现的弧长公式、以及对于微分方程的综合应用掌握的一般，整张试卷下来计算上的细节容易出现丢分情况，物理应用是丢分点之一，二重积分的出题方式比较特殊，但是结合一元的情况还是应该要解出来的； 12 年：难度一般，曲率没有掌握，还有就是对于行列式的计算要学会灵活处理，旋转体的体积的处理、二重积分考察的是心形线，整个试卷我感觉最难的题目是数列极限的题目：用零点定理证明至少有一个零点，再用单调有界准则证明最多有一个零点，在第二问求极限的时候，还要充分利用第一问给的信息；线代大题要注意同解方程的应用； 13 年：难度一般：反常积分的敛散性掌握不熟；以及变上限积分的连续性判定这些小的知识点都不能忽视，实对称矩阵等价=具有相同的特征多项式，伴随矩阵与其代数余子式之间的关系，大题目则比较中规中矩，除了一个考察形心，这是个什么鬼？？还有最后的线代大题，利用技巧来处理问题要引起注意，傻乎乎的展开几乎不太可能实现； 14 年：难度有所上升，函数的性态（单调性、凹凸性等）与导数之间的关系，质心坐标？？微分方程解的形式，以及特征根需要注意。证明题其中数列极限，是个好题。还有多元微分学以及积分的应用来求体积都是要引起关注的点。证明矩阵相似，通常要用一个中间的矩阵作为过渡； 15 年：难度一般，高阶导数的求法，二重积分的计算要想到对称区间——奇偶性，微分方程的物理应用，题目不是很难，要耐下心来读题，以及后面的证明题，比较综合，也是不错的题目； 16 年：难，计算量大！选择填空都还行，主要是计算量真的大！题目思路都比较常规，几乎都能想到，就是算不完。在求定积分的时候遇见绝对值要分区间讨论，以及对于可导性的判断也不能少！微分方程的求解，关于常数 C 如何确定的问题，旋转体的侧面积计算（积分区间的上下限要注意），以及最后线代的大题，求高次幂要想到利用对角矩阵，但是计算量也是令人匪夷所思； 17 年：比较简单，求解极限的时候，分母是含有 x 的变上限积分，不能直接使用洛必达，要想到换元，后面的题目没啥可说的点。。。； 18 年，难，但是计算量我感觉并没有 16 年大，反而选填题的难度有所上升，大题中考到了求不定积分，这玩意的难度是个无底洞，需要注意冲刺时候的训练；还有求拉格朗日最值，计算量比较大；二重积分考的是摆线，画出图形，利用对称区间可以简化计算量。  从 15 年开始，偶数年的题目是真的难，计算量还大，我了个天，谁知道今年会怎么样呢。。\n在当前状态下，模拟卷没有时间就不做，务必要把真题吃透，做好！\n② 英语 英语这个月，算是复习的比较理想的一科了。先是过完了翻译的课程，随后新题型和完型填空又紧随其上。目前还在准备作文阶段，小作文已经初步形成，大作文希望在一周之内可以完成，毕竟留给的时间真的真的不多了。\n这个月则把真题又过了一遍，因为属于多刷了已经，里面的大部分答案都能记住，所以要做的就是通读阅读文章，扫清生词和长难句，以及弄清楚题目与选项之间的关系。要养成良好的做题思维。接下来的日子，真题再过最后一遍，我也希望是我人生中最后一遍过考研英语的历年真题！！\n③ 专业课 专业课怎么说呢。。笼统的看好像全部都掌握的差不多了，但是放到具体的问题来看，还是掌握的不太牢固，就比如排序的算法，对于考纲中给出的内容都能手动模拟出来，但是要是说全部手写代码的话，还是存在一定的困难的，（根据前两年的回忆版真题，只出现了个快速排序的代码要求，而且还有文字提示），对于 BST、AVL 和 B 之类的插入和删除都算是掌握了吧，画图过程都会，但是容易忘，所以在接下的时间要反复巩固。但对于链表、栈和队列只知道这些数据结构的增加结点和删除结点的方式，并没有往下深究，看着之前的回忆版真题，感觉这部分考的不是很深。还有就是时间和空间复杂度的计算要掌握，图比较侧重于迪杰斯特拉，前两年都考到了。还有各种数据结构的存储方式。\n数据库方面的话，难点还是在第三范式和 BCNF 的分解，无损连接和保持函数依赖性掌握的还行，求闭包之类的也可以，求最小依赖集比较生疏，还有就是求候选码容易漏。。写 SQL 的话，经过了一定量的练习，应该不会丢太多分，考得太难了也就无了呗。至于关系代数，回头还需要看看，至于元组演算的话，战略性选择放弃吧。还有重点就是事务和故障恢复，这部分既需要理解，又需要一定量的背诵。难度的话倒不是很难，剩余的我感觉更多的都是偏向于记忆类的知识点，后期需要回归教材，多看看书，把书变薄再变厚。\n加油！\n④ 政治 政治这个是我最不想提起的，因为真的很无聊。马原和史纲部分还能接受，到了毛中特的部分，那就是开始无脑吹。唉。\n里面的 keywords 看着都很熟悉，就是记不清，而且还没有花时间开始背诵。还剩三周多几天的时间，能够背的完么？选择方面，肖八快全部刷完了，前面两套做的是真的惨不忍睹，错的稀里哗啦。。。但好处是之前马原和史纲过了一遍，这块的错误率是比较低的，因为毛中特和思修对于我来说等于啥都不知，只能结合错题回归背诵手册来勾画知识点，反复记忆。到了第四套开始慢慢有了起色，最起码不是做的太难看了。\n说真的，政治我不想花太多时间，毕竟拉不开多大的分，我想的就是在最短的时间内，冲到 60 分以上，最起码证明自己的政治觉悟没有问题是吧，虽然上海还是旱区。。。\n 三、幸存者 天，快亮了！是啊，终于快了，我等了好久，内心是期待的，是渴望这一天早点到来，这样身上的担子就能卸下来了，就能做点自己想做的事情。每当看不下去书的时候，我就在想考研结束的生活，我想看自己喜欢的书籍，睡个懒觉，继续为开源项目做贡献，阅读源码，增加查克拉，再玩玩悠悠球。还有二十几天，就能过上了，一定一定要调整好自己的状态，最起码在面临考试的时候不是恐惧的心理。\n但在期待着她到来的同时，又不愿早点到。因为没有复习好，还是会觉得如果再给我多一个月的时间，我肯定能把哪里哪里给补回来，把什么什么给学的好好的，但是时间对于每个人都是公平的，过去了就是过去了，在剩下的日子里要做的就是在现有的基础上，不断巩固加强，查缺补漏。还有就是，我不知道下一次这么为了自己的目标去奋斗，坚持是什么时候，在选定考研目标的时候，这是我读书以来第一次有机会自主选择自己的院校，所以从根本上来说，我是很喜欢这个为之努力，为之付出的过程的，因为我知道，随着时间的推移，我在慢慢的、一点一点的靠近她。但是我还怕就差一点点，原以为只是踮起脚尖够月亮，没想到回过头来已经是万丈深渊。这段煎熬的时光纵然不舍，但我还是想说享受这一次就好，今年一定要冲上岸！！\n其实在和对大多数的考研人比，我算是比较幸运的，在别人还在焦虑选择院校的时候，我的目标已定；因为是自主命题，所以很感谢导师和实验室的师哥师姐给予的帮助。如果没有你们的帮助，我的心态早就崩了。也正是由于你们的帮助，我敢于去搏一把，去挑战自己心里的那个最高点，去勇于做别人想做但又不敢做的。还有就是离不开家人的支持，家永远是最后的防线。所以从这些角度来说，我是考研大军中，为数不多的幸存者！\n 背负伤的幸存者 争夺着有限名额\n想要闪烁就对自己更严格\n 加油！冲！\n","description":"","tags":null,"title":"大政的考研 Blog009 —— 幸存者","uri":"/life/kaoyan009/"},{"categories":null,"content":"Blog008 —— 莫问终点，十月复盘 一、煎熬 ? 终点 : 放弃 1、10.24 十月份，10.24 程序员节~~ 打心底来说，我还是很喜欢这个职业的，至少从目前为止，也许以后毕业了从事“劳动密集型工作”面对资本家的压榨，会产生厌恶的心情呢，but who cares？以后的事情以后再说咯。\n软件工程，这个专业名字确实听起来确实很高大上，但是临近毕业大四的自己，有掌握软件工程的思想吗？？似乎差的很远吧。但是我喜欢编程所给我带来的东西。在现在这样一个信息化的时代，几乎人人都离不开互联网带来的便利。所以我们将来所从事的职业是一个可以改变世界的，这一点也是挺值得自豪的。还有就是在掌握一些技术栈之后，会慢慢发现这个在互联网影响下，现实和虚拟相互交织的世界到底是如何运转的，我们每天使用电子设备所产生的的数据是如何存储的，又以何种方式被利用等等，这些在我看来都是很有意思，也是值得思考和探索的。所以我很感谢当初的自己选择了这个专业，能给现在的自己一个机会，以程序员的视角去感受这个世界。\n回想去年的 10.24 可谓是真的极限运动，周四晚上连夜做着绿皮小火车，轰隆轰隆吵得头皮发麻，周五到达上海，上午睡一觉，晚上赶往年会会场--微软 Reactor，到晚上回家的时候地铁停运，只能打车，洗漱完成已经是两点多，第二天还得早起，接连两天，然后周天晚上再次连夜赶回合肥。有的同学问我，这么赶时间折腾自己，就是去做志愿者，有必要吗？我想或许不是很有必要，但是有意义，信仰充值。在去年的开源年会，是我第一次得到被肯定的感觉。让我发现世界上有很多和我一样的人，普通却并不平凡为开源输出自己的力量，也更让我找到了考研的目标。（具体的详细感受看 我与开源的那些事儿）其实最好的体验是在于回来之后，写了这篇博客，得到认可的“满足感”和“虚荣心”是无可替代的！\n2、越来越近了… 是的，十月份的结束，代表着距离考研也越来越近了。这个阶段的自己心情是十分矛盾的，一方面想着完了还有好多东西没看没复习还来得及嚒？？另一方面却想赶快结束这一切吧，真的是熬不动了。我想无忧无虑的熬一次夜，更想无所顾虑的睡一次懒觉。但是对于目前这个阶段来说，这无疑是一种奢侈。\n就带着这矛盾的心情，一面是厌学，不想看书；另一面又是逼着自己学习，因为我太渴望考研上岸。就总觉得是这是证明我自己的一次机会，证明自己大学这几年混得还不差，证明自己还是有能力的，证明我能做得到。更想让那些之前看不起我的人，对我刮目相看。似乎从中考失利，就被贴上差等生的标签，从高中到大学，所以当再一次站在选择的路口，我不想再窝窝囊囊只是为了有学上来逃避自己啥都不会的现实，这一次我想选个牛 X 的，更何况机会就摆在我面前，我真的舍不得放弃。嗯，是的。\n但是选择了好的学校，就代表着你需要承受踏上终点的一切负重。其中压力部分是最大的，竞争力也要强上很多，在往年三百七左右的平均分作为参考，以及近年来报考人数的持续增长，很多次很多次很多次有不断地想过问自己，要不要换一个学校，或者说要不就这样了吧？？\n但是我熬了这么久，不是想证明自己临场退缩，我所期待的的是“拟录取”这三个字，是明年的录取通知书。是明年可以骄傲地说：我从做得到，到现在已经做到了！！！\n说实话，这一段不知为何，写得戾气有点重。但我实在是不知道该怎么给自己调整心态，我不相信什么“心灵鸡汤”、“励志成功学”等等之类的，那都是强者拿来安慰或者忽悠弱者的。我想说的是：我能做的就是逼自己认清现实，意识到现在自己的处境。时间是不等人的，今天过去，是不会再回来的。只能尽自己最大的能力，调整好自己的心态，哪怕这心态已经“畸形”了。。。\n 二、十月复盘 ① 数学 数学可谓是整个考研过程中最耗费精力和时间的科目，现在回想起来从去年大约这个时候开始过高数的课本教材到现在已经一年了，但是距离自己最初所期待或者说是所要求的目标还离的有不小的一段距离，离考研也越来越快了，到底怎么样，心里似乎也不是很有底。\n我从来没没有想过数学的强化阶段会持续这么长！！原以为暑假的时候听完强化课，做好讲义上的例题就算是强化结束了。但工作量远比我想的要大得多。满打满算高数部分到上周末才算是强化结束。线代预计还要三天以后。十月份数学的重心大部分都是强化收尾工作。把之前漏看的、掌握不牢固的以及某个知识点题目做得比较少，都拿出来重新过了一遍。\n先具体说一下高数吧，要是论对考点的熟悉程度的话，掌握最好的应该是求极限，函数求极限只要不是太偏太怪太难理论上是没问题的了，数列求极限有待加强（原因很简单，求极限放在第一章，每一次重新过的时候，前半部分的时间花的最多，就好比是英语单词书最熟悉的是第一页的词汇一样）；其次就像是求导求积分之类的题目，不能说是掌握的太好，但是在做此类题目的时候，进入状态的时间有点长；而且求积分这块，尤其是不定积分就像是个无底洞，它有些常见的套路和题型，但却没有那么容易想到，这块的还有个难点是微分中值定理的证明题，从我现在的水平来说，是有希望啃下的，毕竟在暑期的时候就特地有投入时间在这部分，（昨晚在听 17 堂课中该专题的时候，看见题目能自然而然的想到如何构造辅助函数）但我怕的是，由于这部分确实比较难，出题比较灵活，万一出现课下模拟都会做，但是一到考试看见真题的时候傻眼了，这是及其恶心、难受的一件事，不花时间吧，我似乎又不太放心。。\n在不定积分和定积分还有两个盲点：第一个是变上限积分的比阶之类的，第二就是定积分的应用，包括几何应用和物理应用。比较明显的特点就是不是很难，但缺乏训练导致掌握的比较差，之前想的就是跟着武神的 17 堂课，再集合真题和模拟题巩固练习，但有的时候看见此类题目，容易产生抵触的心理。\n高数的下半部分也就是上面的特点，不是很难，但是掌握程度却不太理想。。在这次重新强化的过程中，加强了对于微分方程、多元函数微分学、二重积分的练习，当时想的就是这啥玩意哈，之前都学了个啥！！！由此可见之前学的有多差，现在回头来看要的多了，但是在做题之前还是需要先看一下知识点。。加强练习啊！！！发现问题之后，要学会解决它，不能放任不管。微分方程的话，技巧性不是很强，计算量略微有点点大，套模板记公式。多元函数微分，难度有一点点，特别是定义那块，给我感觉是整个高数部分考定义最难的点了。。。计算的话，需要细心，特别容易绕晕。二重积分，计算量有！根据定义域画出函数图像，这一块要仔细点，我觉得是难点所在，最后剩下的就是计算问题，如果在部分再考难一点，直接放弃吗？？\n线代的话，整体就是比较玄学，说不会吧，多少会一点，但是看见题目的时候，很多时候都无从下手，知识点全部都搅合在一起，能做的也只能是多花时间、多思考、多练习。所以我又把线代的强化课听了一遍，听李老讲题的时候，哎确实是这个道理，只要注意力集中也都听得懂，但是到自己做题目，就是另一回事了，关键原因还是无法利用题目所给的已知条件，甚至有的时候看完答案还得想好久，离考研不到六十天，有的时候，我就在想线代要不给放弃了？？但是放弃的话就代表着数学最多最多考到一百算是不错的了，李老还出了个综合提醒课，下个月抽时间看看吧。加油！\n② 英语 英语的话，阅读能感觉到已经没有问题了，但是问题是除了阅读其他的好像都有问题，准确来说是都还没开始，作文等进入十一月份，就可以准备起来了，新题型的话，我想的是等到十一月中旬再开始，翻译的话，有时间就开始吧。至于完型填空，我的预期目标是最少要及格，不拉后腿就好，可以适当的战略性放弃点。\n但是在做完英语二之后的阅读，再看英一的阅读，对比下来，英一要难好多，也许是自己阅读根本就没掌握好呢。。做英一阅读的时候，题目与文章的定位点大部分都能准确找到，但是英一的文章对于词汇和长难句要求真的是高很多，解题技巧会了，还是基础不牢，地动山摇？？这个阶段给我来这一出，我是真的怕啊！！！\n③ 专业课 专业课这部分我真的很感谢给我提供过帮助的学长学姐，要不然我真的是一脸懵逼。\n数据库：拉了许多的数据库终于补救回来了，呃，应该是抢救。。整个考纲里面所要求的知识点都有所掌握，常见的题目也都掌握的还行，盲点还在于关系代数和 SQL，这部分要抽时间集中练习，然后坚持到考前，至于关系演算，实在是看不懂，是不是可以放弃。。对了，还剩一章数据库设计没有看。。\n数据结构：这部分总体来说是比较熟悉的。但是具体到考点是比较迷茫的，因为数据结构的出题形式真的太多了，可以是只考理论也是可以写代码，甚至是画图。这就很恶心。十月份的重点都花在对于数据结构的查缺补漏上面，下个月计划再花半个月时间在二叉树、图、排序和查找，这部分知识点牵涉比较多，也是难点所在。一定要克服！！\n④ 政治 政治的话，我感觉是不是有点晚了，到现在才把马原看完，题目还没看完。政治这个科目，我已经开始迷了，完全不知道下一步该怎么走，该学什么。不对，是要学的太多，不知该怎么学。。。\n初步打算，跟完腿姐的技巧课。《肖 1000》的马原和史纲部分正确率要提到百分之九十，至于毛中特和思修的话，跟着模拟卷走吧，政治不求多，但是要及格啊。最起码证明自己的思想觉悟没问题，更何况自己还是党的一份子呢。。。。\n 三、莫问终点  是鹰就不留恋地平线，云层上见～\n 对了，我还在等。等一场大雪，来迎接这个冬季的到来，来从容地踏上考场，来记录我这一年的坚持与付出。\n至于终点是哪儿？其实，已经不是太重要了，这大半年的备考，让我自己的心又静下来许多。有的时候看不下去书，就会胡思乱想，其实我本身是一个比较喜欢发呆式思考的。在这断断续续的思想火花中，我也渐渐地更明白自己是一个怎样的人，想成为什么样的人。之前就听很多人说，考研的结果固然重要，但是真正值得回味的是这其中的过程，是一次次勇于挑战自己，敢于知难而上，不满足于目前的现状。\n之前，我总想着，等考上研究生就怎么怎么样，可以给自己放个假。但也许，考研只是这些年给自己的一个奋斗目标，督促自己要努力前进；也许自己并不喜欢读书专研，从而可能导致自己读研的时候会放纵自己；也许自己就是个差生，不是读书的那块料呢？？\n是的，也许吧。但是不坚持怎么会知道结果呢。不去尝试，又怎么能体会到这其中的酸甜苦辣呢。不逼自己一把，又怎么会确认自己就做不到呢？\n距离考研的日子越来越近了，就像前面所说的我已经在尽我最大的努力调整自己的心态，最后的冲刺阶段任务只会越来越重，心态上的煎熬也会加倍。当之前自己付出，到冲刺的白热化阶段慢慢感受到回报的时候，这一切都是值得的。\n考研，只是一场考试，是我所选择踏上的一条路，没必要把自己折磨的那么累，陷入极度的内卷，但这并不意味着是放纵自己的理由。还是要努力的啊！加油吧！\n感谢这个世界还有音乐~~\n","description":"","tags":null,"title":"大政的考研 Blog008 —— 莫问终点","uri":"/life/kaoyan008/"},{"categories":null,"content":"Blog007 —— 再出发，九月复盘 一、开始倒数 1.1 大四开学 时间过得真快，一眨眼，开学就是大四的老学长了。。这三年过来的一点一滴，就宛如刚发生一样，历历在目。现在回头想想，这几年经历了好多，但在学校中又似乎没有太大的收获。\n还记得三年前，这个时候还嚷嚷着想复读，现在看来其实都一样。也许复读顺利考得要稍微好一点，也可能不太幸运，甚至还不如现在呢。但当现在再一次为了一场考试而努力的时候，那种感觉又回来了。很多人都拿考研和高三比较，我感觉吧，相对而言考研要容易一点。因为考研能考个好学校的可能性要大一点，但是反过来看，高考的报录比是要好一点的，但是想读好的学校门槛是不一样的。于是也就有了，选择大于努力这一说话，考研真的是一场信息战！如果让我再选择一次的话，也许我仍然回想复习，但是现在也挺好的。遇见了很多意想不到的事情，遇见了很多有意思的灵魂。\n仔细算一下，正儿八经当时高中所憧憬的大学生活，也只能到大二上。 其余的时间，虽说还在学校，但是学习的内容和处理的事情都逐渐和学校的事情脱节，甚至在一定程度上反感学校许许多多杂七杂八的事情。大一，上课坐前排，参加社团活动，还想着找个对象吧啦吧啦的。。对待各种事情都特别认真。（大一的时候给自己定的目标就是拿到奖学金，认为奖学金就是最高的荣誉，现在看看，呃 不能说一点用都没有吧，反正就是没有之前想的那么重要，也就那么一回事罢了）对于大学的上课方式，社交方面还是很新鲜的，但是慢慢发现，和实际想的还差的很远，特别是遇见很多恶心的事情之后，就感觉天呐，一个学校怎么能是这个样子的，就离谱！！按照当时的脾气还会想着吐槽，但当看得多了，经历的多了，也就认了、不对是佛了。。当时大一特别想创建悠悠球社团，果不其然大二的时候，最折磨我的就是这个社团，每天想的都是怎么推广悠悠球，怎么把悠悠球传播出去，怎么教社员，怎么…… 就这样，心思也不放在学习了。就很难受，说句我不太喜欢的话，“不忘初心”，那么问题来了，初心是啥呢？？我怎么做的意义又在哪呢？？社团是我自己要创的，甩不掉的。。。（现在看看，如果说大学期间最值得纪念的事情，也只剩下这个社团了）再就是大二寒假，发生疫情，也就是在这个时间段发生的事情足以影响到我的大学生活，甚至是整个人生。由于疫情，线上开发协作，从而接触到了开源，也就有了现在的我，一个完全脱离于大学眼界的我。。感谢相遇~~（*这也是我为什么说我的校园生活只到大二上的原因，之后的生活等有时间可以细说*）。\n还记得去年这个时候，我还在犹豫，我到底要不要考研，或者说为什么决定去考研。我回来了??\n1.2 返校生活 是的，回学校之后，我的状态慢慢在恢复。这一点是我自己都感觉到比较惊喜和意外的，连我自己都没想到回到学校之后，状态真的在好转。七八两月暑假，说实话，离自己所要的复习预期，差的太多太多，都出现厌学心理，已经是在弃考的边缘徘徊的人了。。\n也许是因为暑假在自习室没有参照物来对比，整个网上的言论都是“我很努力”的这种，就很搞人心态。回到学校之后，发现大家都差不多嘛，（也许是我的学习太差 bushi）哈哈哈哈\n想通问题，恢复状态我想还是放在最后来说。\n但是最让我无语的事情是大四的课竟然还如此之多，那就逃呗，只要不挂科，就啥都好说，是吧。\n还有一点就是，自己还不够自律，要懂得拒绝，不能受别人影响、\n 二、九月复盘 ① 数学 回到学校的时候，高数和线代已经全部听完强化课了，就想着是不是已经无敌了，结果就是被题目恶狠狠的给教训了一顿，我还是依旧的菜鸡。。。\n起初，刷《考研数学真题大全解·上册》的时候，因为是之前较早的题目，难度不是很大，所以一口气能刷五六十道，还是很嘚瑟的，而且正确率也有一定的保证。但是刷着刷着就变味了，做着前面的章节忘着后面的，于是在刷题之前，还是得巩固一下知识点，《高数辅导讲义》算是三刷了吧，知识点必须要看，边看边在草稿纸上写写画画，好记性不如烂笔头，况且我还没有好记性，再把之前做标记的题目再给做一遍，但是我发现问题的是，之前会做的题目，现在反而不太会做了，之前不会的还是不会，害。。。对了，《严选题》的质量也是很高的，虽然做的比较慢，十月份结束之前一定要二刷，一定！！加油~~\n但这也是比较好的事情，最起码知道自己的不足，是吧（也只能这么想了）\n线代的话，就是一遍一遍的过讲义，把知识点給串起来。效果也就一遍比一遍要好，有意识的去逼自己思考某个知识点可能会关联的东西。然后再做《李林880》的线代部分，习题线代题目给我的感觉还是比较中规中矩的，不像高数的证明题那么让我感觉无奈，有时候给的感觉就是恰到好处想到那一步。就很爽！\n其实在看线代的时候，心里还是比较没底的，因为分值不是很大，所以投入的时间不是很多，就导致过了一段时间就会有部分知识点遗忘，再加上暑假的时候，看线代的强化课有点太追求进度，听得就有点囫囵吞枣，效果自然也就不咋地，特别是二次型那部分，基于以上原因，就决定重新听一边线代的强化课，带着脑子学习，而不是一味的接受知识。类似的情况还出现在高数的后半部分，多元函数微分学以及二重积分都是理解的不太透彻，所以决定重听一下，这些得在国庆假期完成，又回到了没有课的日子，一定要把握住啊！！\n② 英语 英语，怎么说呢，阅读做起来有点感觉了，但我怕的是因为之前刷过的试卷，所以二刷起来效果还行，就导致一种盲目自信的状态。因为是二刷，阅读在做起来，就在一定程度扫清了生词和长难句，所以读起来没有太磕磕巴巴，做题目也能找到定位点，或者是排除干扰选项，较好的还能分清错误选项是怎么设计出来的。\n但是效果太好，反而有点让我不太适应，我怕这一切都是因为是二刷，是因为我下意识的知道这篇文章是关于什么的，讨论的问题是啥。。。\n至于作文和新题型也还没开始，也不知道该何时开始，也不知该准备哪些资料，头大\n单词肯定是每天必不可少的一个环节，有的时候，不想做阅读，就想着今天我背单词了，所以等于我看英语了，来安慰自己。。。\n③ 专业课 这个月专业课算是正式开始了，目标院校的大纲也更新了，与往年相比变化不是很大，考得范围有的还缩小了，所以在复习层面来说，更具体了。但是具体到某些知识点该考哪些题型的时候，还是比较懵的，不知所云。\n这个怎么说呢，有利有弊，因为从我自己来说并不属于刷题类的学生，也不喜欢刷题，没有历年真题的透漏，等于在一定程度上弥补了这一劣势。但是坏处是，我自己也不知该如何复习。能做的就是一遍一遍的根据考纲过知识点，争取做到没有太大的漏洞。\n数据结构：开始算是二刷了吧，第一边只是侧重于知识点的学习，并没有做太多的题目，这一次看一章，死磕一章的课后习题，选择题做到全部拿下，算法大题目前只做历年 408 真题，有的较怪较难的算法题会考虑直接放弃，进度到二叉树。另外听说学院喜欢考对于知识点的理解，而不是代码本身，所以尽可能要做到掌握理解，用图形来表达其中的逻辑关系。\n数据库：这个算是比较头疼的，首先 SQL 写得就不多，而且还比较烂，看课后习题也只是能看懂答案，让我自己徒手写的话，有很大难度，所以之后的两个月要加强对于 SQL 的练习，这一部分可不能丢分啊！查询优化看的比较懵，就是稀里糊涂的。。。依赖与范式那章就直接差点”要了我的命“，国庆集中处理。至于数据库事务和恢复反而比预期学的要好。\n后期需要根据当前的盲点，不断“扫盲”。\n④ 政治 可算是开始政治了，但是也是九月中下旬才开始的，而且花的时间也不是很多，整体进度是比较拉的。说不着急是假的，但是不能慌。要稳住阵脚，一步一个脚印地往前走。\n因为之前对于哲学比较感兴趣，所以读了一些相关的书籍。学马原的时候，虽然是偏重于理解，反而是比较容易找到共鸣的，能在现实生活中找到投影。刷《肖 1000》正确率也还行。\nBtw，蹲坑的时候，政治刷题小程序效果还是不错的。哈哈哈哈。\n进度得加快，投入时间得多加点，加油！\n 三、再出发 为什么说是“再出发”呢？？倒数 100 天，算是比较有仪式感的日子，也预示着距离考研的日子从三位数变成两位数了，时间留给自己的时间不是很多了，得有点紧张感，所以说接下来的每一天如果状态不是很好，都是对这一天的浪费。\n如果把考研分阶段的话，今年三月之前的日子算作“0”，“0”代表着有想考研的想法，也做了一些努力，搜集了一些信息，但是距离真正开始行动，还是有一定的转变的；三月开始到暑假之前属于“1“，在这期间，慢慢开始投入时间和精力准备考研，会觉得考研还早呢，我还有一定的自由时间，复习状态也就还没拉满，整体上是比较放松的，有时候还会啥都抓，导致啥都学了点，但没完全学的尴尬情况；再往后就是暑假”2“，大家都说暑假是至关重要的两个月，因为这段时间完全是自己掌握的，这一点是真的，但没想到的是，在家复习没有学校的学习氛围，每天更要面对许许多多的日常琐事，眼看着自己的进度达不到所想的预期，心烦；九月开学——”3“，状态恢复，更想通了许多问题，所以是在解决了上面”012”的迷茫与不解之后的再出发！\n在预报名成功的那一刻，我不由的说了一句，我等这一刻，等了三年。对，为了考研，我鞭策自己三年。眼看着就要到终点了，不更应该是期待的嘛。而不是焦虑不安，原因是感觉复习的不好，但是还没走进考场，就代表着全部都是未知的，去努力啊！！别停下来！！\n所以说，把心态从焦虑调整到期待之后，每天都会有收获。有的时候还会看一下鸡汤，虽然很俗，但是有用，这段阶段的自己神经是比较敏感脆弱的，需要的是鼓励。\n希望会有好的结果，一定一定一定！！！\n","description":"","tags":null,"title":"大政的考研 Blog007 —— 再出发","uri":"/life/kaoyan007/"},{"categories":null,"content":"Blog006 —— Iridescent，八月复盘  Il n'ya qu'un héroïsme au monde : c'est de voir le monde tel qu'il est et de l'aimer.\n 一、暑期生活 1.1 一次又一次被自己打败 过得好快啊，感觉什么都没做，暑假就过去了。。。\n每次在放假之前都会高估自己的能力，常常给自己布置一堆任务，而往往完成的也就两三件，甚至一件都做不好。。。是的，这种状态从中学时期就开始出现，但到现在还依然没有改掉。为什么会给自己选择充电呢，从根本来说，我不想成为一个碌碌无为的人，还是有一颗上进的心的，要不然为什么会选择考研呢。。但事实是，完不成任务还是因为自己太懒，自己不够聪明，一个知识点别人学一遍就能记住掌握，自己却只能听个大概，为了不愿承认自己的能力不够，还硬着头皮往下走，结果到头来发现，欺骗的也只有自己。说白了，就是虚荣心作祟。。\n最要命的是，意识到自己的错误，却改不了！！\n之前上半年在学校临近放假的时候，就一直在想，到了暑假就好了，每天的时间都是自己的了，就能有大把时间用于考研复习，从而可以达到一个由量变到质变的过程。可也就停留在了“想”，与实际付出行动来说还是有很大的差距。\n最主要的体现就是心静不下来，明明知道这是一个难熬的过程，却想着可以早点结束，想着这块内容是不是不太可能会考，我是不是就没必要花太多时间在这儿，总想着投机取巧。不肯脚踏实地，一步一个脚印地慢慢走。也许是高估了自己的行动能力，整个暑假给数学的时间最长，以为自己数学学的还行，到了强化阶段，越复习面对一堆难题无从下手，更是一种逃避的态度，久而久之，对数学是越来越讨厌；其实不止数学，英语和专业课不也是的嘛，英语除了背单词，阅读题更是不想做，硬着头皮啃下一篇之后，就匆匆忙忙去对答案，很多题目都不找原因，为什么错，不去弄明白其逻辑关系；专业课更是三天打鱼两天晒网，不知道该看些什么，看着考纲，无能为力；至于政治，更是可笑至极，说着为了空出时间给其余科目，连碰都没碰，连考些啥内容都不知道……\n所以说整个暑假是什么都没做吗？？也不是吧，虽然状态不是很好，每天的学习时间也不是很长，没有达到自己所预期的目标，但完成了其中的一小半吧，具体的复习情况放在复盘内容。\n很多人说，最大的对手是自己本身。克服自己的懒惰，浇灭自己的虚荣心，改掉不良的习惯，加油啊！！要学会独自去面对风风雨雨，独自在知识的苦海中摸索。\n1.2 我在努力 虽然有很多坏习惯，但是我一直在努力改变自己，不求能够有多好，但保证不会越来越差。\n自习室八点半开门，知道晚起毁一上午，但明白早起毁一天，所以一般来说选择七点多起床。尝试过五六点起来背单词，困得不行；也有过睡到八点多再起来，但是到自习室都将近九点半，从而导致一上午背完单词，再做几题高数就中午了，效率太差。慢慢调整选择一个比较适合自己的时间。一开始刚放假，可能是在学校“憋”了太久，看书回来家就比较晚。吃完饭，洗好澡，十点多，就导致家里人的作息都被我打乱。考研是我自己所决定的，虽然说爸爸妈妈都很支持我，但是不能影响他们第二天工作，（主要还是爸妈比较心疼我，）所以就适当的回家早一点，这样一家人可以一起吃一口热乎的饭。\n看书看不下去，想着想哪，一会刷一下朋友圈，一会又看一下小破站。只能硬逼着自己改变，手机屏幕使用时间限时，朋友圈关闭，B 站换成青少年模式，取关不太有意义的博主。不想做题，就看着题目想思路，想不出就看答案，再自己在稿纸上演算一遍，还能怎么办呢？又不能真的不做，做不到主动，只能改变自己从被动的层面吸取知识。英语阅读啃不下来，先翻译，扫清生词和长难句，最起码做到能读懂再说，再根据阅读方法论慢慢梳理题目以及段落之间的逻辑关系，最后再看看讲解视频。没办法，学不下去啊，只能这样了，我也真的无能为力了，我甚至开始怀疑自己并不适合学习，才到这个点就耐不住性子了，开始急了。我也不知到底怎么做是对的，只能敷衍着走，最起码不愿意承认自己停下！\n1.3 折磨？调整？ 说起自己状态开始变差还得从六月底 AirPods Pro 丢了开始说起。说不心疼吧，是假的。至今我还能记起第一次带上降噪耳机的感觉，整个世界都安静了。原来自己每天生活的环境噪声这么大，这么小的机身是如何做到这么强的功能的…… 特别新奇和不可思议是当时的感觉。但随着慢慢习惯降噪之后，那种一开始的新鲜感也早已见，也许是耳机麦克风堵住了，降噪就变菜了。。作为苹果生态的一环，在手机和 iPad 切换也早已习惯。在丢了的那几天，就好像是少了好多东西，哪哪都不舒服，就这样开始不想学习。起初也想过买个华强北的。但是吧，买山寨不是我的习惯，再买个全新的？？感觉不值。暑期教育优惠，换个 MacBook 或者换个 iPad Pro 送耳机？？但是更期待 M2 芯片，自己的 iPad Air3 用起来也不差，就很烦。对这种状态一直环绕着初期。到七月底。每天被这些事情闹心。。。\n后来，慢慢想开了，其实自己或许也不依赖一副耳机，也或许并不一定要用苹果生态下的产品？？为了整个生态，舍弃了自己客制化的习惯，开始对于处理器、芯片、刷新率等不再讲究，音质也不再挑剔，似乎就感觉苹果的生态是最屌的，舍弃点有啥关系呢。就这样变成了韭菜。也就这样，我看上了 Sony WF 1000 XM4，体积不大，续航强，佩戴舒适度属于能接受的范围，没有生态。。。。但这又有啥呢，一再犹豫之后，在 AirPods Pro 丢了两个月之后，还是入手了 XM4。降噪的天花板，也让相信了蓝牙耳机也可以有音质。时隔两个月重新又有了降噪，虽然各方面能力都比 AirPods Pro 好得多，但第一次带上降噪的感觉再也回不来了。\n但我的状态回来了……\n在快对自己失去信心的时候，找回了之前的状态，虽然还没满血复习，但是足够了！！\n对了，顺便提一下，暑假期间我又迷上了变形金刚。这个算是我从小喜欢到大的 IP 了吧。虽然每天看柱子哥模型的评测浪费了不少时间，害……等上岸奖励自己一个，一定。（当时纠结要不要买柱子哥，买了 XM4 之后，就说等等吧，该有的都会有）\n最后再补上，还有奥运会。马龙太帅了，今年好像是在 08 年之后，再一次这么关注奥运会了，看见五星红旗在东京升起，国歌奏响的那一刻，民族自豪感油然而生。我们生活在一个这么好的时代，国家提供了安稳的环境，作为新时代的我们也应该奋发努力，想想再过十年左右社会的中流砥柱就是咱们这代人了！\n 二、八月复盘 很遗憾，暑假的计划并没有完成。。\n① 数学 分别听完了高数和线代的强化课程，但也仅仅是听完了而已。距离消化里面的知识还有一段路需要走。看讲义，做例题，还需要克服自己好高骛远的尿性，不能不懂装懂，还要勤动手，答案是算出来的，而不是看出来的。\n原以为八月能够把高数讲义重新过一遍，但是很遗憾，一遍看讲义然后做严选题和 08 年以前的考研真题，效率是真跟不上，才到第二章结束。但好处是前两章的知识点很牢固，从基本的定义题目（这类题目我感觉是很恶心的）到计算，再往后是压轴的证明题，都可以应付的来，也并不是像自己所想的那样啥思路都没有。坏处是后面的又给忘了，特别是常微分方程和多元微分学，一看就会，会了就忘。还得努力啊！！\n起初，做严选题太难，就转去做宇哥的真题大全解上册，给自己找点求生欲吧。后来一想，考研不会考简单的，要学会迎难而上。啃严选题的时候，给我最大的感受就是，这题我应该会做，但不是那么好做，最后往往会停留在应该上。。给题目做好标记分类。一遍一遍来，反复磨，总会完成的。\n线代的话，因为之前看完基础课的时候，就顺带把讲义过了一遍，这次的复习感觉比听基础课要好得多。但到了后面的章节之后，越来越综合，知识点稍有不牢，就不知这个为什么是这样，这一步是哪来的。课程内容不是很多 5 天，但我花了将近 15 天才全部看完。中间真的不能耽搁，一落下，很难追上。再刷讲义，也比之前有了更多思考，也想的更多，牵涉到的知识点，也算是一种巩固的过程。\n今晚听了武神的直播答疑，说强化阶段是到 10 月底，这无疑是一针强心针，可以告诉自己不要慌，进度并没有落太远。慢慢来，比较快，加油！\n② 英语 英语就有点玄学，除了背单词能记住（其实也不一定记住了）。阅读还是很难有底。做完了之后，站在上帝视角来分析，会觉得确实是那么一回事，但自己做题的时候为什么就想不到呢。知行合一？？只是知道方法论，做不对题目的知道，算是知道吗？\n在月底的时候梳理这两个月做过的阅读，还是挺有成就感的。看着原来白纸黑字的被一片片红笔的注释不成样子（错的不成样子）也确实有点难受的。不能说没有掌握阅读方法论，但就是还缺点什么，不像做数学题目那样，只要是我自己做出的就不会出错。\n小三门之类的也快要提上日程了，英语的时间要要延长点了。\n③ 专业课 七月说专业课每天 1.5 小时起步，还是没做到。\n数据结构结合考纲把知识点提出来了，但问题是不知道考试题目会考到哪种程度，是只考一些定义性质，还是会考代码呢，考这些又会怎么考呢？？\n数据结构就是感觉零碎的知识点好多，做题之前过一遍的话，题目都是会做的但是时间一长就容易忘记。。而且对于数据数据结构考纲比较迷，像栈牵涉到的中缀表达式、图涉及到的求关键路径之类的，王道的书上有，但是考纲上写得比较迷糊的不知道该不该看，以及题目的形式都好迷。。\n数据库，很碎很杂很多，有点像文科但它又不是。。其中像关系代数、元组演算之类的自我感觉不会考（蜜汁自信），因为掌握的不太好。。但是像 SQL 感觉理论上属于必考的，数据库不写 SQL 说不过去吧，至于考得有多难，掌握到什么程度又不知该如何。\n④ 政治 看不下书的时候，看政治打发时间必备~~\n九月份马原\n 三、Iridescent 世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它。\n我知道考研难熬，但我没想到是如此煎熬。暑假的复习状态几乎一直处于复习的低谷。好几次出现了弃考的想法，总想着也许自己就这样了吧，不是块学习的料，不适合学习。起初想考研更多是对高考遗憾的一种弥补，也是怕自己到时候啥都不会找不到工作。\n但现在看来这两样似乎也就那么一回事，那么我考研的意义又在哪里呢？研究生的生活又会想是自己所期望的那样吗？或者说，自己真的有想过读研的生活是哪样的嘛？也许我就是单纯的不知自己该干嘛所做出的一种逃避呢？？\n忽然想起自己以前的博客说过，我也想成为一个闪闪发光的人。\n考研与其说是孤独朝圣，倒不如说是与自己的对话。学习如逆水行舟，学海无涯。面对知识的敬畏，自己的内心到底会怎么做。走下去，卷入无尽深渊，退出，接受自己的平庸无能？？有时候还会想读书有什么用？人活着的目的又在哪？人该追求些什么呢？当今社会的价值观如此畸形，自己的价值观又该如何评判呢？\n好吧，我承认，考研真的很容易胡思乱想。人均哲学家。。。。\n说到底，我想成为一个有能力的人。进一步的话，成为一个有能力影响他人的人。\n Do you feel cold and lost in desperation\nYou build up hope but failure's all you've known\nRemember all the sadness and frustration\nAnd let it go\nLet it go\n ","description":"","tags":null,"title":"大政的考研 Blog006 —— Iridescent","uri":"/life/kaoyan006/"},{"categories":null,"content":"Hadoop 极简入门 零、前言 在 2021 年初的时候，Apache 退休了一些 Hadoop 生态圈的子项目。再加上其 MapReduce 思想最为人诟病，因为不太友好的编写代码方式，需要高昂的维护成本以及较低的运行效率，唱衰 Hadoop 的声音（甚至对于整个大数据生态的质疑声）日益高涨。。\n然而，MapReduce 作为一种编程范式，恐怕并没有那么容易被淘汰。纵使很多人说：你看 Spark 速度又快又稳定，这不是可以淘汰掉 Hadoop 的 MapReduce 吗？但是真的是这样吗？？\n所谓的快和慢都是相对而言的。某些互联网公司每天的离线调度任务动辄数十万起，这么庞大的基于 MapReduce 的离线计算如果要是用 Spark 来替代，与之相对应的是高昂的服务器成本。\n因此，我们可以说原来用 Hadoop MapReduce 能做的事情被更好更快的其他计算引擎来替代了，而不是 MapReduce 被淘汰了。而且后来的计算引擎也大都有借鉴 Map、Reduce 这类的概念！\n 一、长话短说 1.1 Hadoop 是什么？？ Hadoop 是 Apache Software Foundation 开源的，根据 Google 开源的三篇大数据论文设计的，一个能够允许大量数据在计算机集群中，通过使用简单的编程模型进行分布式处理的框架。其设计的规模可从单一的服务器到数千台服务器，每一个均可提供局部运算和存储功能。Hadoop 并不依赖昂贵的硬件以支持高可用性。Hadoop 可以检测并处理应用层上的错误，并可以把错误转移到其他服务器上(让它错误，我在用别的服务器顶上就可以了)，所以 Hadoop 提供一个基于计算机集群的、高效性的服务。\n1.2 主要优势 主要拥有以下优势：\n 高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据丢失； 高扩展性：在集群间分配任务数据，可方便地扩展数以千计的结点； 高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理的速度； 高容错性：能够自动将失败任务重新分配。  1.3 发展 经过多年的发展，Hadoop 这个单词的意思也随之发生改变，由之前一个具体项目的名称，到现在提到 Hadoop 大多是指大数据的生态圈，包括许多现在火的一腿的项目，例如 Spark、Hive、HBase 等等。\n如同 Spring 框架有着最基础的几个模块 Context、Bean 和 Core。其余的模块和项目都是基于这些模块构建的。Hadoop 与之大体一样，也有最基础的几个模块：\n Common：支持其它模块的公用工具包； HDFS：一个可高吞吐访问应用数据的分布式文件系统； Yarn：一个管理集群服务资源和任务调度的框架； MapReduce：基于 Yarn 对于大数据集群进行并行计算的系统。  其他的，像 Hbase、Hive 等等都是在这几个模块基础上的高级抽象。Common 模块是 Hadoop 最为基础的模块，负责为其余模块提供了像 I/O、操作文件系统、序列化和远程方法调用等最为基础的实现。（如果想深入了解 Hadoop 具体实现的小朋友，可以挑战自己阅读一下 Common 的源码~~）\n 二、HDFS 基础概念 HDFS 是 “Hadoop Distributed File System”的首字母缩写，是一个分布式文件系统，说简单点就是为了存储文件。但是和其他的文件系统的不同之处是 HDFS 设计为运行在低成本的硬件上（因此在学习 Hadoop 入门的时候，可以使用 Linux 虚拟机搭建一套集群出来玩玩），且提供高可靠性的服务器。HDFS 设计满足大数据量，高吞吐的应用情况。\n为了更好地理解分布式文件系统，咱们先看看下面的这些概念：\n2.1 文件 咦？谈起文件，想必大家都很熟悉，在不同的行业中，文件也有着不同的意思。在计算机科学领域，文件是在存储设备中是 N 个字节序列。而从计算机使用者的角度而言，文件是对所有 I/O 设备的抽象。每个 I/O 设备都可以视为文件，包括磁盘、键盘和网络等等。文件这个简单而精致的概念其内涵是十分丰富的，它向应用程序提供了一个统一的视角，来看待系统中可能含有的各式各样的 I/O 设备。\n2.2 文件系统 那么一台计算机上肯定不止一个文件，成千上万的文件怎么管理呢？因此需要我们需要一种对文件进行管理的东西，即文件系统。文件系统是一种在计算机上存储和组织数据的方法，它使得对其访问和查找变得容易，文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光盘等物理设备使用数据块的概念，用户使用文件系统来保存数据而不必关心数据实际保存在硬盘的地址为多少的数据块上，只需要记住这个文件的所属目录和文件名。在写入新数据之前，用户不必关心硬盘上的那个块地址没有被使用，硬盘上的存储空间管理(分配和释放)功能由文件系统自动完成，用户只需要记住数据被写入到了哪个文件中即可。\n2.3 分布式文件系统 相对于单机的文件系统而言，分布式文件系统（Distributed file system）。是一种允许文件通过网络在多台主机上分享的文件系统，可让多计算机上的多用户分享文件和存储空间。\n在这样的文件系统中，客户端并非直接访问底层的数据存储区块和磁盘。而是通过网络，基于单机文件系统并借由特定的通信协议的帮助，来实现对于文件系统的读写。\n分布式文件系统需要拥有的最基本的能力是通过畅通网络 I/O 来实现数据的复制与容错。也就是说，一方面一个文件是分为多个数据块分布在多个设备中。另一方面，数据块有多个副本分布在不同的设备上。即使有一小部分的设备出现离线和宕机等情况，整体来说文件系统仍然可以持续运作而不会有数据损失。\n注意：分布式文件系统和分布式数据存储的界线是模糊的，但一般来说，分布式文件系统是被设计用在局域网，比较强调的是传统文件系统概念的延伸，并通过软件方法来达成容错的目的。而分布式数据存储，则是泛指应用分布式运算技术的文件和数据库等提供数据存储服务的系统。\n2.4 HDFS HDFS 正是 Hadoop 中负责分布式文件系统的。HDFS 采用master/slave 架构。一个 HDFS 集群是由一个Namenode（可以理解为资本家老板） 和一定数目的 Datanodes（打工人） 组成。Namenode 是一个中心服务器，负责管理文件系统的命名空间以及文件的访问控制。集群中的 Datanode 一般是一个设备上部署一个，负责管理它所在节点上的存储。HDFS 暴露了文件系统的命名空间，用户能够以文件的形式在上面存储数据。\n实际上，一个文件会被分成一个或多个数据块，这些块存储在一组 Datanode 上。Namenode 执行文件系统的命名空间操作，比如打开、关闭、重命名文件或目录。它也负责确定数据块到具体 Datanode 设备的映射。Datanode 负责处理文件系统客户端的读写请求。在 Namenode 的统一调度下进行数据块的创建、删除和复制。为了保证文件系统的高可靠，往往需要另一个 Standby 的 Namenode 在 Actived Namenode 出现问题后，立刻接管文件系统。\nHDFS 架构概述  NameNode（nn）：存储文件的 元数据，如文件名、文件目录结构、文件属性（生成时间、副本数、文件权限），以及每个文件的 块列表 和 块所在的 DataNode 等等； DataNode（dn）：在本地文件系统 存储文件块数据。以及 块数据的校验和； SecondaryNameNode（2nn）：每隔一段时间对 NameNode 元数据备份（把 NameNode 当做老板的话，SecondaryNameNode 就相当于小秘，但小秘毕竟是小秘备份的数据肯定没有老板完全，所以在掌握 Zookeeper 之后可以配置 HA，也就是说两个 NameNode 互相备份）。   三、MapReduce 基础概念 MapReduce 是一个使用简单的软件框架，基于它写出来的应用程序能够运行在由上千个商用机器组成的大型集群上，并以一种可靠容错的方式并行处理上 T 级别的数据集。\n一个 MapReduce 作业(job)通常会把输入的数据集切分为若干独立的数据块，由 map 任务(task)以完全并行的方式处理它们。框架会对 map 的输出先进行排序， 然后把结果输入给 reduce 任务。通常作业的输入和输出都会被存储在文件系统中。 整个框架负责任务的调度和监控，以及重新执行已经失败的任务。\n通常，MapReduce 框架和 HDFS 是运行在一相同的设备集群上的，也就是说，计算设备和存储设备通常在一起。这种配置允许框架在那些已经存好数据的设备上高效地调度任务，这可以使整个集群的网络带宽被非常高效地利用。\nMapReduce 框架由一个单独的 master JobTracker 和每个集群设备一个 slave TaskTracker 共同组成。master 负责调度构成一个作业的所有任务，这些任务分布在不同的 slave 上，master 监控它们的执行，重新执行已经失败的任务。而 slave 仅负责执行由 master 指派的任务。\n用户编写的 MapReduce 应用程序应该指明输入/输出的文件位置(路径)，并通过实现合适的接口或抽象类提供 map 和 reduce 函数。再加上其他作业的参数，就构成了作业配置(job configuration)。然后，job client 提交作业(jar 包/可执行程序等)和配置信息给 JobTracker，后者负责分发这些软件和配置信息给 slave、调度任务并监控它们的执行，同时提供状态和诊断信息给 job-client。\n简单来说，MapReduce 将计算过程分为两个阶段：Map 和 Reduce；\n Map 阶段并行处理数据； Reduce 阶段对 Map 结果进行汇总。  一个 Map 函数就是对一些独立元素组成的概念上的列表的每一个元素进行指定的操作。事实上，每个元素都是被独立操作的，而原始列表没有被更改，因为这里创建了一个新的列表来保存操作结果。这就是说，Map操作是可以高度并行的。而 Reduce 函数指的是对 Map 函数的结果（中间经过洗牌的过程，会把 map 的结果进行分组）分组后多个列表的元素进行适当的归并。\n 四、Yarn 基础概念 YARN(Yet Another Resource Negotiator)是 Hadoop 的设备资源管理器，它是一个通用资源管理系统，MapReduce 和其他上层应用提供统一的资源管理和调度，它为集群在利用率、资源统一管理和数据共享等方面提供了巨大的帮助。\nYarn由ResourceManager、NodeManager、ApplicationMaster 和 Containe 四个概念构成。\n ResourceManager（RM）：整个集群资源（内存、CPU 等）的老大； NodeManager（NM）：单个结点服务器资源老大； ApplicationMaster（AM）：单个任务运行的老大； Container：容器，相当于一台独立的服务器，里面封装了任务运行任务所需要的资源，如内存、CPU、磁盘、网络等。  了解了上面的大致概念之后，再细细分析一下：\n4.1 ResourceManager ResourceManager 是一个全局的资源管理器，负责整个系统的资源管理和分配。它主要由两个组件构成：调度器(Scheduler)和应用程序管理器(Applications Manager)。\n调度器根据容量、队列等限制条件，将系统中的资源分配给各个正在运行的 MapReduce 程序。应用程序管理器负责管理整个系统中所有 MapReduce程序，包括提交、与调度器协商资源以启动 ApplicationMaster、监控 ApplicationMaster 运行状态并在失败时重新启动它等。\n4.2 NodeManager NodeManager 是每个设备上的资源和任务管理器，一方面，它会定时地向 ResourceManager 汇报本设备上的资源使用情况和各个Container 的运行状态；另一方面，它接收并处理来自ApplicationMaster 的 Container 启动/停止等各种请求。\n4.3 ApplicationMaster 用户提交的每个 MapReduce 程序均包含一个 ApplicationMaster，主要功能包括：与 ResourceManager 调度器协商以获取资源(用 Container 表示)；将得到的任务进一步分配给内部的任务(资源的二次分配)；与 NodeManager 通信以启动/停止任务；监控所有任务运行状态，并在任务运行失败时重新为任务申请资源以重启任务。\n4.4 Container Container 是 YARN 中的资源抽象，它封装了某个设备上的多维度资源，如内存、CPU、磁盘、网络等，当 AM 向 RM 申请资源时，RM 为AM 返回的资源便是用 Container 表示。\n 五、结束语 本文走马观花的介绍了 Hadoop 相关内容。主要目的是给大家一个对大数据的分布式解决方案的感官印象，为后面的大数据相关文章提供一个基础的理解。\n最后要强调的是，思考大数据方向的问题是一定要记住分布式的概念，因为你的数据并不在一个设备中甚至不再一个集群中，而且计算也是分布的。所以在设计大数据应用程序时，要花时间思考程序和算法在单机应用和分布式应用所产生的不同(e.g. 加权平均值)。\n","description":"","tags":null,"title":"Hadoop001——入门篇","uri":"/tech/bigdata/bigdata_hadoop001/"},{"categories":null,"content":"Blog005 —— 事上炼，七月复盘 一、恍惚 1.1 怂了？？  这才到哪了呢，就怂了！！明明每天给自己布置的任务量不是很大，却还是一次又一次高估自己的执行能力，整个七月份下来，没有几天实际上完成目标的。但是，平均下来给自己每天的任务量确实不是很大啊，但为什么就完成不了呢？？一身的小毛病却不能克服自己，总给自己找各种各样的理由，来推脱学习。王福政啊，你现在的思想和态度都很危险知不知道！！！当你的行动能力和效率无法满足自身的野心的时候，除了抱怨，怨天尤人还能做些什么呢？？\n 以上，大概是这段时间，反反复复对自己说的话。虽然想放弃是真的，但认怂是不可能认怂的！！！\n考研过程中的备考压力远远超出我心里的预期，比我想的要难受的多。这也是为什么想要放弃的原因，似乎放弃了，就退出备考的赛道，可以好好的缓一口气，也就不会面对煎熬，不会面对失败，但也意味着辜负了父母的期望，前期的准备都是为了见证这一刻的放弃，承认自己的软弱。如果放弃，每次遇到点啥磕磕绊绊的象征性的坚持一两下，就会怀疑自己做不到，想逃避，下意识的想退缩。也就这样成为一个懦夫……\n所以说，认怂是不可能认怂的。当时做出准备考研的决定，并不是头脑一热，更多的是因为有自己想做的事情，寻找自己的闪光点，努力成为一个能够影响别人的！！！如果这时候选择了低头，这不就成了别人口中的反面教材了嘛。。多丢人啊，是不！！想放弃也许是多个坚持不下来的瞬间累计导致的，但选择站起来勇敢的直面这些瞬间，是自己能到做出的回应。认怂的话，自己心里说说就好，可别真的怂了哈~~ 坚持下去，一步一个脚印。\n1.2 长跑心态 7 月份，过得是真的快。当时想着放暑假了，没有学校那么多杂七杂八且无意义的事情，总算可以“闭关修炼”了。事实却是，整体上和学校的学习效率差不太多，又一次没达到预期，高估了自己。这也是为啥想放弃的原因，开始质疑自己，甚至有时候感慨自己真的不是学习的料。中高考考得都不咋地，还想考着考研翻身，这是有点痴心妄想嘛，别坚持五六年的努力，你一年就能跟得上？？但是，就这样认输，会有点不甘心。\n现在的世界好处是信息多而广，且好获得。但坏处是干扰信息太多。往往也是这些干扰信息最搞人心态！！！无论是知乎，还是 B 站、公众号之类的平台，凡是可以传播信息的地方都会出现标题党。最让我恶心的就是“考研人一天学习 XX 小时”、“如何保证一天有效学习 XX 小时”之类的文章或视频。给你一种感觉就是：反正我学能学到这么长时间，早上 6 点就能背单词，晚上 11 点还在复盘。如果你达不到这种程度，你自己看着办吧。WDNMD，您可真能学习啊！！！我自己是一个极其懒的人，能早上八点起来绝不起点起来看书的那种，而且注意力也很难集中。每当做一件事的时候，总会控制不住自己想另外一件事情。仔细想想，每天花在考研上的有效时间不超过四个小时每天。但就是在这种情况下，进度还能跟得上。所以我特别想知道那些每天做到学习八小时以上的是学到了什么程度。这也是我之前所提到的 考研在没有上考场的情况下，所有的参照物都是无用的。\n上面扯了那么多，不是想说我摸鱼都能学到这种程度，也不是想吐槽那些“卷王”，只是想说，我天天那么混都觉得好累！！！更何况现在才到备考中期强化阶段，距离考研还有五个月左右的时间该怎么熬啊！！考研不是短距离冲刺，不是说这段时间坚持坚持突击搞一下就行。更像是一场马拉松，虽然知道终点线，但一路上的磕磕绊绊，遇到哪些荆棘都是未知的。一路上没人能够帮你走下去，只有你自己。这也就有了“孤独朝圣”这一说话。更像是一场与自己的修行。但与马拉松不同的是，你还不知道你的对手如何。\n之前总是听考研的过来人说，别开始那么早，战线别拉太长。当时自己想的是，我能坚持，我要变强。也许按照当时的心态是可以坚持的，但随着距离考研越来越近，焦虑感、压迫感就会慢慢左右心态。所以能做到的只能是，调整好自己，给自己足够的弹性空间，在不那么长的学习时间内，保持自己最高的效率来学习。说白了，没有人说学多长时间就一定能够上岸的。干嘛那么折腾自己呢。。。\n1.3 当 代 毕 业 生 生 存 现 状 一个普通青年毕业后的生存故事。虽然距离毕业还有一年，但从小金身上或多或少看到了点自己的影子：从怀着赤子之心，想着要成为一个对社会有用的人，到慢慢遇到很多不情愿的事情，渐渐地磨平自己的棱角，但好在我还是我。正如罗曼·罗兰所说：世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它 。当看到这个视频中小金将视频通话转成语音的时候，破防了。。。似乎，这半年来的心酸、难受都在那一刻哭了出来。就想到自己，这半年来有好几次我妈给我开视频，都被我给转成语音，也不知道是什么原因，至少不想让家里人看到我丧的那一面。成长，也许就是从小时候有什么委屈哇的一声在母亲的怀抱里就能哭出来，到习惯了报喜不报忧，让爸妈少为自己操点心，告诉他们自己过得还不错，我没有止步，还在努力。\n 我不要在孤独失败中死去\n我不要一直活在地下里\n物质的骗局\n匆匆的蚂蚁\n没有文化的人不伤心\n  二、七月复盘 这个月的复盘要严格批评自己，学习效率太差！！！\n① 数学 7.23 完成高数强化阶段的全部课程。本预计还空出一周时间留出来查缺补漏，但事与愿违，可能是真的学倦了，然后台风暴雨刚好给自己一个偷懒的理由，最后一周没有认真学习。八月加油吧！！\n总体上武神的强化课干货上是没得说的，但不幸的是听起来太痛苦，有的章节要是死磕的话需要听好几遍才有点效果。没有听宇哥的课有那么多快乐。强化阶段确实是比较过瘾的，没有基础阶段的苦恼，不用扣定义，更倾向于做题，属于学会即用，所见即所得的感觉，说直白点就是过瘾，当看见讲义上一道道被自己画 pass 的题号越来越多，成就感也是满满。但有时候题目做不出来的挫败感也是十分闹心的……\n高数整个强化下来，对于考试的侧重点有了个了解，题型以及考点之类的啊，不像之前那样啥都抓，往往是哪都不熟悉。高数的盲点少了点吧，难点无非还是证明不太会，盲点的话是定义类的选择题。不熟悉的地方就是定积分的物理应用吧，也不能说是不会只是不熟悉，需要点题目来积累信心。对于基本知识的应用理论来说没什么问题，具体的掌握的好与不好，还得靠之后的题目来检测。\n《严选题》还没开工，之前看有些同学说这本习题册的难度是有的，看来又是一段煎熬时光。\n预计八月十号之后开始线性代数的强化。十五天之内务必完成。这样一来，八月就完成了所有的强化课程。接下来就是刷题。千题百炼，加油吧！！！\n② 英语 英语这个月进度有点拉。除了每天坚持背 45 分钟单词，阅读有点三天打鱼两天晒网，八月需要调整过来，至少两天一篇。\n课程上，重新听了一遍唐叔的阅读方法论和长难句，阅读方面确实有提升，但是长难句越听越混，总体来说阅读能力有所提升。错误率控制在每篇一到两个，能够分别出不同的题目怎么解题，解题不到位的情况大部分还是文章读不太懂，少许是解题方法的错误，易错点：猜测题，无法联系上下文逻辑。比较擅长例证题、作者态度、中心思想之类的题目。实践出真知，好事多磨。\n③ 专业课 专业课则是放慢了脚步，结合考纲（害 终于想起来我们是有考纲的，而不是 408 的 DS）把数据结构的知识点做了个梳理，这一轮下来，对于专业课上，心更静了。不会有种飘飘然的感觉。花了一个月时间都是数据结构，数据库方面还是前三章。对于后面的内容就交给八月份吧。\n底线：每天 1.5 个小时起步，再不花时间，等后期只会干着急，等着哭吧！！！\n④ 政治 这玩意怎么说呢，我书都没带。但是说不着急，心里还是慌的。所以把徐涛的强化课当下饭视频看着玩，给到点心里安慰吧~~\n 三、可以的！ 写到这的时候，我又回头看了看之前的博客，似乎给人的感觉是怨气有点重，就好比是深处深渊，却不甘于此，于是一步一步地前进。用努力去创造属于自己的那一份荣耀。更多是挣扎之后的倔强。虽然好像连续的这几个月都说着好难啊，好累啊的话，但如果我自己都不给自己点鼓励，那么谁还会相信我可以呢？？\n事上炼，谈何容易？？考研与其说是一段备考的经历，更像是一次寻找自己的过程，每当遇到困难的时候，每一次迷茫绝望都是和自己对话的过程。唯有练就强大的内心，才能坚定的向上走，迈向更高的台阶。\n光阴里的每一步都是修行，不知之间早已 自渡''。\n","description":"","tags":null,"title":"大政的考研 Blog005 —— 事上炼","uri":"/life/kaoyan005/"},{"categories":null,"content":"Maven 常见问题处理方法 一、'npm install node-sass --unsafe-perm' failed 报错信息：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 02:01 min [INFO] Finished at: 2021-07-10 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.github.eirslett:frontend-maven-plugin:1.6:npm (npm install node-sass --unsafe-perm) on project dolphinscheduler-ui: Failed to run task: 'npm install node-sass --unsafe-perm' failed. java.io.IOException: Cannot run program \"dolphinscheduler-dev\\dolphinscheduler-ui\\node\\node.exe\" (in directory \"dolphinscheduler-dev\\dolphinscheduler-ui\"): CreateProcess error=193, %1 不是有效的 Win32 应用程序。 -\u003e [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException [ERROR] [ERROR] After correcting the problems, you can resume the build with the command [ERROR] mvn \u003cargs\u003e -rf :dolphinscheduler-ui   错误分析：\n当执行 mvn -U install package -Prelease -Dmaven.test.skip=true 的时候，由于前端 Module 的 pom.xml 对于 NodeJs 没有配置对应的镜像，并且有某堵墙的存在，懂的都懂不多说哈，从而导致无法能够成功的拉去对应的资源，因此需要在对应的 pom.xml 文件中添加相关配置即可。\n解决方法：\n1 2 3 4 5 6 7 8 9 10 11 12  \u003cexecution\u003e \u003cid\u003einstall node and npm\u003c/id\u003e \u003cgoals\u003e \u003cgoal\u003einstall-node-and-npm\u003c/goal\u003e \u003c/goals\u003e \u003cconfiguration\u003e \u003cnodeVersion\u003e${node.version}\u003c/nodeVersion\u003e \u003cnpmVersion\u003e${npm.version}\u003c/npmVersion\u003e \u003cnodeDownloadRoot\u003ehttps://npm.taobao.org/mirrors/node/\u003c/nodeDownloadRoot\u003e \u003cnpmDownloadRoot\u003ehttps://registry.npm.taobao.org/npm/-/\u003c/npmDownloadRoot\u003e \u003c/configuration\u003e \u003c/execution\u003e   注： 其中 nodeDownloadRoot 和 npmDownloadRoot 为添加的淘宝镜像，如果添加该配置还无法解决问题，可以尝试把 node 和 npm 的 version 置换成本机所安装的版本即可。\n 二、Could not transfer artifact org.springframework.boot:spring-boot-starter-parent:pom:2.1.18.RELEASE from/to central 报错信息：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  Caused by: org.apache.maven.project.ProjectBuildingException: Some problems were encountered while processing the POMs: [ERROR] Non-resolvable import POM: Could not transfer artifact org.springframework.boot:spring-boot-starter-parent:pom:2.1.18.RELEASE from/to central (http://repo.maven.apache.org/maven2): Failed to transfer http://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.1.18.RELEASE/spring-boot-starter-parent-2.1.18.RELEASE.pom. Error code 501, HTTPS Required @ org.apache.dolphinscheduler:dolphinscheduler:1.3.6-SNAPSHOT, D:\\ideaProjects\\dolphinscheduler-dev\\pom.xml, line 165, column 25 at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:176) at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:102) at io.airlift.resolver.ArtifactResolver.getMavenProject(ArtifactResolver.java:177) ... 44 more Caused by: org.apache.maven.model.building.ModelBuildingException: 1 problem was encountered while building the effective model for org.apache.dolphinscheduler:dolphinscheduler-registry-zookeeper:1.3.6-SNAPSHOT [ERROR] Non-resolvable import POM: Could not transfer artifact org.springframework.boot:spring-boot-starter-parent:pom:2.1.18.RELEASE from/to central (http://repo.maven.apache.org/maven2): Failed to transfer http://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.1.18.RELEASE/spring-boot-starter-parent-2.1.18.RELEASE.pom. Error code 501, HTTPS Required @ org.apache.dolphinscheduler:dolphinscheduler:1.3.6-SNAPSHOT, D:\\ideaProjects\\dolphinscheduler-dev\\pom.xml, line 165, column 25 at org.apache.maven.model.building.DefaultModelProblemCollector.newModelBuildingException(DefaultModelProblemCollector.java:195) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:419) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:371) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:362) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:232) at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:142) ... 46 more Process finished with exit code 1   错误分析：\n在网上拷贝的所有阿里云镜像比如：\n1 2 3 4 5 6  \u003cmirror\u003e \u003cid\u003enexus-aliyun\u003c/id\u003e \u003cmirrorOf\u003ecentral\u003c/mirrorOf\u003e \u003cname\u003eNexus aliyun\u003c/name\u003e \u003curl\u003ehttp://maven.aliyun.com/nexus/content/groups/public\u003c/url\u003e \u003c/mirror\u003e   查看官网之后发现：阿里不再支持http下载，只支持https。\n因此，先将maven镜像配置如下：\n1 2 3 4 5 6  \u003cmirror\u003e \u003cid\u003ealiyunmaven\u003c/id\u003e \u003cmirrorOf\u003e*\u003c/mirrorOf\u003e \u003cname\u003e阿里云公共仓库\u003c/name\u003e \u003curl\u003ehttps://maven.aliyun.com/repository/public\u003c/url\u003e \u003c/mirror\u003e   然后还出现了一个问题，由于使用了HTTPS，存在着 SSL 证书验证的问题，因此需要在 IDEA 中添加了一行配置 Maven —\u003e Importing —\u003e VM options for importer:\n-Dmaven.wagon.http.ssl.allowall=true\n一般到这里问题理论上是可以正常解决了，但是由于 Windows 的环境会出现许多神奇的问题，如果项目还依然报错，可以尝试删除本地包，重新构建。\n","description":"","tags":null,"title":"Maven 配置问题汇总","uri":"/tech/datastructes/question001/"},{"categories":null,"content":"Blog004 —— 拼个世界给自己，六月复盘 一、瓶颈期 1、一条路走到黑 考研就像是在黑屋子里洗衣服，看不见洗到什么程度，也不知道自己和别人差在哪里，自己低头拼命的洗，只有打开灯的时候，拿出自己的衣服，才能知道结果如何，但在这一过程中难免也会有感觉洗不动的时候。\n不知不觉半年过去了，这半年宛如一个人走一条只知道目的地，但是却不知该怎么走的黑路，很多时候感到迷茫，感到困惑，明知道某个点该歇一歇，但就是不敢停下脚步，生怕自己一旦停下，被别人超越，就再也追不回了。考研和高考相比，不清楚自己的竞争对手，也就没有有效的对比，不知道该做到什么程度才算是好，才能达到了某个时间点该有的样子。毫无头绪。\n其实这半年来，每个月总有几天学不下去的时候，还记得当时三月底，怀着急功近利的目的，开始肝《十天搞定考研词汇》，每天一睁眼一闭眼都是单词，甚至有一种看见字母有头晕的感觉。但还好我坚持了下来，说一句鸡汤的话，付出总有回报，啃完单词，再开始刷真题的时候，大部分单词都认识，至少心理上不会太排斥。四月份五月份的时候，专业课还没有正儿八经的开始，就隐隐约约总有一种紧张感，怕时间来不及，怕学不会。现在回头来看，虽然专业课没有认真的看，但把教材和课后习题，在无聊的时候过了一遍，对照考纲，大部分的知识点还是比较熟悉的。再到六月，这个月真的是各种倒霉，倒霉，倒霉！！！这个月估算了一下，只看了二十二天的书，先是知道暑假学校不给留校，然后 AirPods Pro 在图书馆无故丢了，再到期末考试，最后学院还给安排个校内实习？？有意义嘛，唉。所以到现在开始复盘的时候，心里还是五味杂陈，这个世界怎么了嘛，呃，简单来说，阻碍你考研的只有你的学校！！！\n再往后，因为学校不给留校，把之前所有的规划都给打乱，好几天都在愁，暑假，都说是考研过程中，最关键的一个阶段，到底该怎么办？？怕暑假两个月之后，达不到自己所预期的效果，怕因为没有学习环境而学不下去，怕两个月之后，我还在继续怀疑我自己，怀疑自己或许根本不适合读书。在提出这些问题，自己心里也许是有答案的，至于答案具体是什么，得靠自己去探索。别人的回答，在某种程度上也只是想要得到内心的肯定罢了。\n既然知道自己想要的未来是光明的，一路走到黑，又何妨？？\n2、音乐复盘 音乐真的世界上最好的治愈。当无处发泄的时候，音乐便是最好的良药。\n《平凡之路》，是属于三月份的。大学三年下来，熬过了很多黑夜，经历了许多风风雨雨，自己的能力慢慢得到肯定之后，在工作和提升自己之间，经过内心的挣扎之后，还是选择了考研。似乎就好像，冥冥中这是我唯一要走的路。也就这样踏上了一条平凡的勇者之路。\n《一群无知少年的梦想》，四月份有幸在 2050 遇见了许多有梦想有朝气的年青人。带着自己的理想，有梦就去追。梦想在哪里呀？\n《稻香》，五月份的那一天会觉得吃的米也是不容易的。周杰伦的歌可谓是从小听到大的，每当听起这首歌的时候总有一种回到小时候的感觉。但是童年的纸飞机，再也不回来了，农村的稻草人也越来越少了。小时候的梦，早就记不清是什么了。回家吧，回到最初的美好。\n《拼个世界给自己》，六月份的新歌。大一的时候，听见僵尸的《网易云》，似乎找到了共鸣，慢慢他越来越火了，但他的歌还是依旧。黑夜中，看星空，飘着一个个的梦。在最无助的时候，能遇到一首走进内心的歌，是一次不可多得的机会。我都懂，我都懂，我都懂……\n 二、半学期复盘 ①数学 因为数二考得内容比较少，对于数学整体的把握要好得多，学习的知识点也要少一点，从而学习量也就好一点。因为高数开始的比较早，在三月份结束的时候，就差不多结束了，四五月份查缺补漏以及刷题，基础上几乎没有大的盲点。五月份的同时把线代也过了一遍。\n五月中下旬开始高数部分的强化，不得不说，武神是真的强。本以为自己对于高数的知识点已经掌握的炉火陈青，但是听过武神的强化之后，对于考试的整体更通透了。到六月结束，本预计能强化到定积分结束，可是事与愿违，定积分只是开了个头，（如果最后十天能够稳下心来，好好学，估计是能达到预期的）。\n由于基础部分开始的早，结束的早，问题也就来了，像多元函数微分学、二重积分之类的就有些遗忘。本来还打算六月份抽时间再过一遍的，结果也耽误了。愁呀！！\n线代，在五月份整体过完一遍之后，六月份对照着笔记把《线性代数辅导讲义》的内容过了一遍。满分是 10 分的话，刷《线代讲义》的时候给自己打 7 分吧，确实有很多地方缺点思路。而且有些知识点掌握的不牢固。\n暑期目标：\n 跟完强化课程 认真对待《讲义》以及《严选题》 完成以上两点，继续把《880》给整完  ②英语 英语基础部分的长难句和单词，怎么说呢，就属于边看题边巩固的过程，二者之间相互反馈。\n在过完 05 —— 15 年的真题之后，没有着急往下做。先是复盘了一遍，然后闲着无聊把唐迟的《阅读的逻辑》书和课程过了一遍。听课听起来挺舒服的，感觉做英语真题好像也就是那么一回事。但当自己实践的过程中，和方法论存在着不小的差距。\n最后一段时间，因为闲着无聊，把唐叔的《美国历史文化》给看了，下饭必备！！\n暑期目标：\n 回顾阅读方法论以及长难句分析 重做考研真题 背单词是每天必备的  ③专业课 如果说数学和英语有点迷惑，但好歹知道迷惑的点，至于专业课，有点找不着北的感觉，没有真题，考纲也只是罗列出一些简单的标题，虽然问了学长学姐，但心里还是有点不太踏实。\n而且之前看书的时候，大部分都只是在书上勾勾画画，没有做太多笔记，（还是因为找不到重点）。数据结构王道的课后习题过了百分之八十，总体难度是可以接手的。数据库，就很迷，感觉比数据结构要更细一点，从而就导致边边角角都要复习到位。\n暑期目标：\n 再过一遍专业课课本（做思维导图） 对于掌握不透的知识点单独拎出来 刷题？？  ④政治 呃，犹豫了很久，本来打算八月份开始的，但是由于学校不给留校，而我又懒得带那么多书，在纠结之后，九月份开始吧，希望还来得及。\n 三、关于感谢 这半年来，首先感谢我自己选择了这条路。人这一辈子，总要努力一次到两次，那一次是什么时候，我不知道，但是考研肯定算一次。不管能不能上岸，路途中的额外收获都是自己不可多得的一次经历。每当晚上从图书馆回寝室的路上，看着天上的星星，就会想自己也再一次成为了披星戴月的人。有时候反复问自己，我会不会坚持，我会不会坚持，我会不会坚持。会！！！\n这个月来，我慢慢（暂时）退出了开源社，也很感谢伙伴们的理解，因为我自己是个完美主义，每件事必须全部到位，这样就会很多事挂在心上，没办法全身心的投入学习。想了很久，最终还是决定暂时退出一段时间。很感谢居居，当时找到她的时候，对她说了，直接回复 OK，来接我这个烂摊子，说起来确实有点惭愧。各位小朋友，等我回来。\n再有就是，给予我帮助的各位学长学姐们，可能一次又一次的打扰到你们，问一些确实很无聊的问题，真的很感谢你们能抽出时间为我解答疑惑，也就不至于让我无从下手。也是你们，看见你们上岸之后，或者读研的经历，让我有了走下去的动力，我也想一年之后和你们一样！\n还有就是我的爸爸妈妈。像我爸妈虽然学历不太高，但却一直鼓励姐姐和我能够多学点知识，多读点书，以后不至于因为自己的知识面匮乏而感到不足。像我们老家周围的同龄人，几乎早早的都辍学打工，很多家里人都认为挣钱比学习重要，在这么个氛围中，也很感谢老王和老袁支持我继续读书。在学习方面，他俩就没说过一次“不”字，哈哈哈哈。。对了，还有大园，也在一直鼓励着我。\n最后，对坚持下来的自己说一声不容易。感谢去年怀着一腔热血想抗击疫情，为社会做点事的自己；感谢那个遇见开源，并勇于探索的自己；感谢那个因为疫情耽误，在家自己啃 JDK 源码的自己，感谢一直坚持下来的我。\n有时候，很多情况下，不经意做出的决定往往会带来意想不到的结果。也许这就是生活吧。加油啊，冲吧大政！\n怀感恩之心，行正义之事\n","description":"","tags":null,"title":"大政的考研 Blog004 —— 拼个世界给自己","uri":"/life/kaoyan004/"},{"categories":null,"content":"Blog003 —— 五月天，五月复盘 一、逆水行舟 1.1 疲倦期 好快啊！三个月过去了。五月份，没有三月时的不知所措，四月时的激情也慢慢消散，剩下的更多的是不知为啥的坚持。。。\n起初一直感觉自己的进度都是有条不紊的走在前面，整个复习进度也就比较佛系，在闲暇时间还去学学玩玩新的技术，因为比起正儿八经的学习，我更喜欢“瞎倒腾”着玩儿。但是慢慢一个月又一个月的时间过去了，紧迫感也就随之而来。如果说之前的一段时间是兴奋期的话，现在应该可以定义为疲倦期。整个人就有点学不下的感觉，但也不是学不下，而是不知道下一步该学些什么。\n把所有的课（包含专业课，除去政治）基础知识都过了一遍之后，忽然感觉就不想看书了，这种感觉很难受，忽然间就失去了目标。。。到现在写这篇博客的时候，整个人都是佛的。这样一折腾，和之前相比，每天的任务量也减轻了很多。停止是不可能停止的，现在每天能做到的也只能是在保持一定的题目量的过程中，查缺补漏吧。我怕自己一旦决定休息一天，就会在第二天想着：昨天没看书，今天天气那么热，明天再好好看书。说白了，给自己找退路有各种各样的借口，但是走下去的理由也只有那一个！！！\n我很讨厌去逼着自己做一些不情愿的事情，在自己有了一定的选择能力之后，能够去选择做某一件事的时候，都会给自己找到合适的理由，但我没想到的是这条路，这么难熬啊！！！就算不情愿也得走啊，因为还有许多事情没有做没有能力去实现呢。我也一定能够成为我想成为的那个人。一定！！！\n1.2 悟学习 在备考过程中，不仅仅是学习或者说是巩固知识的过程，让我获得比较多的应该是多给自己留几个问号？ 学这个有什么用？为什么要学这个知识？？这个点和之前学的或者之后要学的有什么关联？这种思考方式放在其它学科能用么？？为什么要……？？为什么……？为什……？？？\n这大概我这三个月来，在脑子里反复的最多的几句话。我们学习往往的不是一个一个零碎的知识点，而是一个整体，一个生态。就好比：在学高数的时候，牵涉到微分中值定理的证明题时，往往需要构造函数，这个时候除了用一些常见的套路之外，还可用后面章节的微分方程来构造；原函数、导数和积分之间的关系又可以建立起彼此之间的联系。还有在数据结构中会有求时间复杂度，就又可以和求极限作类比。所以从我自身学习的角度来看待备考过程的话：与其说是为了考试而去学知识，倒不如说是为了教会我们学习而学习。\n忽然想到，还没几天就要高考了，三年，多美的一个字眼，而三年前现在的我，或许还在犹豫，在焦虑。中学时候，各科老师都喜欢按照他们自己的经验来做题，从而稀里糊涂的就给出一套方法来，用心听课、认真学习的同学再课后刷题就能取得高分。但是很遗憾我不属于这类的人。但我也不会为此而感到惋惜，也正是因为这样，才有了现在的我。有些时候，一个人的状态或者说是机遇，很可能是 求而不得，往往不求而得。\n在这段学习过程中，比较让我头疼的应该就是线性代数。就是比较玄乎。第一次听永乐爷爷的课时，一个头有三个头大；咬着牙一遍过下来，对于里面很多的知识点有了大致的印象，具体要是让我像高数那样说出个一二三来，是做不到的。。拿到题目也能摸索着做出来，就是为什么这么做，还是不太懂，只能说我知道这样做就是对的。。。。呃，就是差了点火候，对于学习来说还点再悟，给我的整体感觉就是隔层纱，没有戳破。\n 二、五月复盘 五月天气逐渐热了起来，晚上可以听见青蛙叫，天上的星星也更亮了些。\n①数学 都说偶数年数学难，而高数更是难中之最？？所以在四月的基础上，进一步查缺补漏，把之前写得笔记、做的题目又拉出来过了一遍，对于各个章节的知识点，做到纲举目张，从而再统一串起来。\n到此，自我感觉良好，于是去做《李林880》，基础篇还是能手撕的，当做的综合篇的时候，直呼好家伙，题目有点意思哈，再啃啃，我自闭了了了。。。对不起，是我不配了，我迷了，不应该，我咋那么菜呢？？？我高数复习了个 der啊？？带着这种心情，我又低下头去刷《1800》了，也意识到是时候进入强化阶段了。\n然后就线代，由于四月份就已经前四章过了一遍，但是总体感觉是模模糊糊的，就又重新过了一遍，学习还得要做到温故知新的嘛！带着疑惑去学习，确实要比一开始好好得多，但是在完整学完之后，就像前面所提到的，还是很迷的。。\n我也说不清为啥，题目会做，很多定理却不知所云。如果再让我安排一次的话，我会选择把线代的复习进度再往后放一放，不开始那么早，直接就基础过完开始强化。可能吧。\n在复习线代的时候，对于高数花的时间自然而然就少了，从而就导致一些题目做起来有些生疏。\n②英语 单词！！！单词！！！单词！！！\n由于使用的是墨墨背单词，每天 220+，看了下每天背单词的总时长大概在 100 分钟左右。再加上中间有可能做点其它的时间，综合下来，每天背单词大约需要两个小时左右的时间。感觉有点多了吧！！！但好在这些时间没有白费，其最之间的体现就是在做真题上。\n阅读进度：每天一篇阅读：看题干、做题目、翻译、再看题目、对答案，最后找原因。一天的时间在一个小时十分钟到一个半小时之间，这个还是可以接受的。做完一张试卷之后，复盘，做总结下一张。然后就刷到了 2013 年了。在做阅读的时候，就好像把自己又带回了之前的那个年代，也算是一种额外的收获吧。\n每天干饭的时候，看了唐叔的《美国背景文化》，确实挺下饭的，哈哈哈哈！\n③专业课 上个月立的 flag，也算做到了，最起码勾勾画画把书本过了一遍。但是吧，在看完之后，我就感觉看得有点太早了，以后肯定会忘。。。。。。（不愧是我，23333）\n再来吐槽一下数据结构，问了下师哥师姐大部分都在夸王道的书好，好吗？？好？？吗？？？或许从应付考试来说还不错，但是从剖析数据结构来说，无论是知识点的讲解，还是给的代码，从我来看都是不合格的。就是有点浅显，在看王道的书的时候，我还把之前《大话数据结构》和《算法4》，无论是从通俗易懂还是硬核知识来说，都被吊打，而且吧，课后习题给的方法，先抛出代码质量来说，有时候边界值都没考虑到。。。。 吐槽结束。\n数据库，根据考纲把知识点过了一遍，也列了个思维导图。在看关系演算的时候，我又迷了。。。其余的还行，整体上保持在预期之内。后期还得花时间啊！！！\n 三、低欲望 其实说实在的，最近才发现自己是属于低欲望却有着野心的那类人。这就导致很多人，拼命去奋斗、去争取的东西，比如成绩排名、个人荣誉、证书啊之类的，我往往都是不屑一顾的。就是感觉很没必要这样做的吧，或者说是很搞笑。就这样，慢慢的，慢慢的，逐渐对周围很多的事情失去了兴趣，生活也就过得越来越简单。也可能是因为我比较懒吧，懒到所有的事情，在无关紧要的情况下，能离远一点就远一点。就像前面所说的，我找不到去做这类事情的理由，对我来说就是在浪费时间。\n再接着就是有时候甚至会对生活失去兴趣，读书学习到底是为了什么呢？？追求学历文凭，只是为了找一份工作，然后结婚生子、养家糊口？？？我对我现在所坚持的事情产生了怀疑，就好比感觉自己所做的努力只是为了像一个普通人一样，仅仅是为了活着而已！！也许读书也就是为了让我们能够变成一个普通人，但是我总感觉，作为当代青年，一个知识分子，能够做的事情有很多，人应该是有理想。自幼读书开始，就想着上了大学就自由了，但后面的挑战也是接踵而至，反观现在无聊的时候，玩玩悠悠球，睡前听歌也只是消磨时光，每天过得生活就像是一个带着情感的机器人。有的时候想要逃离又不敢逃，怕一退缩，迎面而来的是各种咒骂与唾弃。\n人活着的意义是什么呢？？在大部分情况下，我们的明天和今天并没有什么太大的区别。活在当下，也许是最优解。但那是饿了找东西吃，困了就睡的的动物才会做的事情，人之所以为人，那是因为人会幻想未来。那么我想追求的是什么呢？？我的野心又想体现在哪呢？？技术与文明 ，这或许也是我喜欢开源文化、黑客文化的原因之一，只有看过更广阔的对的世界，接触到更前沿的技术，才会感叹自己的渺小与无知，才会明白自己还有很长的路要走，还有梦和理想值得自己为之去努力，去流汗，去坚持，并心甘情愿的为之而受尽煎熬！！！\n最后想用当时曾国藩的一句话送给走在路上的朋友们：千秋邈矣独留我，百战归来再读书 ！！！\n加油！！！\n","description":"","tags":null,"title":"大政的考研 Blog003 —— 五月天","uri":"/life/kaoyan003/"},{"categories":null,"content":"Blog002 —— 阳光正好，四月复盘 一、要命！！！ 经过三月份的折磨，似乎更能明白与花时间熬学习相比，调整好自己，适当的减压，注重学习效率是更重要的。于是我就做减法，做到了什么程度呢？？貌似减得有点多，就导致有点飘，完全有点静不下心来，踏踏实实地学习！！！\n要命！！！\n其实说实话，如果这个月抛去学习不谈，过得还是挺开心的。就先简单聊点这个月我到底干了啥吧。\n1.1 浪潮之巅 看完了吴军博士写得《浪潮之巅》，（都说考研期间不要看课外书，但是考研的课本真的太无聊了了了了。。。。）之前或许是自己，或许是周围的同学总能听到些抱怨：我们出生晚了，最好的时代已经离我们而去了 。但是在看《浪潮之巅》的时候，给我更多的感受是我们现在的时代正是处于互联网的“浪潮之巅”，云原生、5G 时代的到来，将会对于过去的网络再次产生翻天覆地的改变。当下的我们要做的是不怨天尤人，而是把握自己，逆风奔跑，向阳而生！\n生在这个时代最大的幸运就是可以看到商业和科学技术完美结合不断的改变这个世界的面貌，不断的改变我们的生活方式。 吴军博士不断的说能赶上科技发展的浪潮便不枉此生。因此生活在这个时代的我们是幸运的，因为年青，就有资本去学习自己想学的，去追求自己所想追求的。\n1.2 参与 DolphinScheduler 在三月的复盘中有提到，开始转型学习大数据，于是在一次偶然的机会接触到 DS 这个项目。有人说：万物始于 Hello World，但对于我来说参与开源的第一步应该是从 Markdown 开始。首先文档类的任务，与代码层面相比要简单的多，不至于像代码那样牵一发而动全身，而且提交 PR 之后，通过检测的机会也要大的多，可以说门槛是要小一点的。于是参与 DS 的第一份 PR 就是写文档，哈哈哈哈。当自己的 PR 被 merge 的时候，那份满足感是任何事情都替代不了的，特别还是参与 Apache 的顶级项目。\n感受到社区的友好之后，按照我的习惯肯定要撸源码玩玩，徒手撕源码才是真男人嘛！在阅读源码的时候，看看测试案例对于理解和使用来说都是不可缺少的。当时看见了有些类的测试案例还没写，就尝试自己写了一份，结果是显而易见的，PR 没通过检测，然后就导致周末去杭州得背电脑了。。。。。起初最初的问题是代码规范，这个还是比较好改的（与后面遇见的问题相比确实啥都不算），但问题是解决了一个问题，随之而来的是下一个问题，虽然社区的导师给予帮助，但还是很头大。在遇见问题的过程中，最重要的是学会自己动手去解决问题，这个时候就要吹爆 StackOverflow ，以及慢慢体验到 issue 和邮件列表的好处，因为可以从之前的记录中找到类似的问题，解决起来就要好得多。最后看见 LGTM 的时候，感觉一切都值了，所以说还是热爱开源的，还是想写代码的。\n1.3 2050 如果你问我年青人做什么最酷？？ 那一定是参与 2050 大会（也就是因为这个，决定去参加的时候，每天肾上腺激素分泌过多，肯定静不下心学习）。三天下来，有遗憾，有欢笑，也有收获。\n周五到杭州的时候，因为有点晚，遗憾的是错过了“开源人团聚”，但是从博悟馆出来的时候，看见了王坚博士，这何尝不是一种收获呢。这也是我的一种态度：求而不得，往往不求而得。起初见到博士的时候，是先听见他的声音（*之前了解到2050是王坚博士以个人名义发起的时候，就临时补课看了很多博士的视频~~*），这声音好熟悉，抬头一看，我天呐！！！那穿格子衫的可不就是博士嘛！！！这也是我第一次在现实生活中，见到互联网中大神级别的人物。但说到底，还是有点亏的吧。。。。\n第二天，比较开心的应该是遇见了道哥——吴翰清！！！对，没错，就是段子中传说黑进阿里的大神。只不过感觉有点可惜的是道哥再回到阿里之后，不再做开发，而是产品经理。在听完分享之后，不得不承认，到阅历或者说是知识体系到达一定高度之后，看世界的角度真的会发生改变。我们还在为了生活而感到焦虑的时候，有的人都已经在尝试模拟甚至创造生活。然后还有比较开心的就是看见了赵生宇学长，上次见面还是 2020 开源年会，一别就是几个月。当和学长谈到开源的时候，眼里是有光的。能够更深入的探讨一些问题，也是弥补了昨天的遗憾吧。\n五点半的闹钟，早起，六公里的约定 —— 逐日晨跑。还有什么比这更酷的事情吗？？ 虽然说一开始参与晨跑是为了获得 T 恤，但当一路坚持下来的时候，再想想还有什么是自己不敢挑战的呢？路途中，拿起奠基石，为 2050 添砖加瓦；还看见了一路一直坚持下来的小朋友，他们都未停止脚步，二十出头的我们，不更应该起到带头作用嚒。当回到终点，收到奖牌的时候，感觉这一切都足了！\n快乐的时光总是短暂的，奋斗的路还很长，杭州这座城市去的次数，虽然不是很多，但却是去一次爱一次。（回到合肥之后的感觉，就好比用惯了 IDEA 回到了 Eclipse。。。。）\n 四月复盘 说真的，四月给我的感受就好像是什么都没做。。。。\n①数学 四月初，把三月份高数的盲点又花了一周左右的时间整理了一下。这应该可说是零死角了吧。哈哈哈。原本准备这个月把线性代数看完，但是实现往往是高估了我自己的能力和自觉性。\n线代怎么说呢，给我的感觉不像是高数那样，学完一个章节，就能做对应的题目，它更多是对于整个知识体系的融会贯通。再加上李永乐爷爷年级大了，听起来确实不太清楚，还不知汤汤的南京话有个性呢。。。。然后就磕磕巴巴把线代的前四章啃完了。\n高数方面开始二刷 1800，不得不说确实有必要二刷，第一遍做的时候，可能更偏向于基础知识的应用。到了二刷，在之前的基础上再加上一定的技巧，不管是做题速度、正确率方面，还是对于题目对的理解方面，都有了质的飞越。再想起之前还在为选哪本习题册而感到困惑的时候，现在感觉更多的是市场上主流的习题册都各有优缺点，认真啃透一本，再加以补充，我相信问题应该不大。\n②英语 英语重要的就是单词不能停！！说实话，背单词是真的那个痛苦啊，苦不堪言中，还有无聊。。。但哪又能咋办，硬着头皮走下去。长难句方面，看了唐叔的（主要是因为时间较短，一开始是当段子看的）发现，按他那么来玩确实有点意思，就认真又听了一遍，结合真题来，走向正轨。\n搜英语的经验贴，都说上真题，于是这个月把从 2005~2009 所有真题中的阅读精翻了一遍，做前两套试卷的时候，还有比较痛苦的，积累的越多，就稍微好点，每做完一套就复盘一套，会发现从一开始满是红笔的标注慢慢过渡到只标注难点的句子和不认识的单词，红色越少，进步越多，哈哈哈！五月再接再厉！！！\n③专业课 emmmmmmm。。。。从五月开始一定好好准备专业课。我感觉我把准备专业的时间，都用来学习新的知识去了，惭愧！！！\n数据结构，我感觉考得也不是很难嘛、、、、\n 三、谈谈愧疚感 人在不努力或者说觉得自己还不够努力的时候，总会感觉到自己有点愧疚感，甚至是罪恶感。这到底是为什么呢？？每天为了努力而去努力，不是我想要的，也不是我所追求的。带着这样的情绪强迫自己去学习、去工作，是比较难受的。\n明知道这种状态不对、这种状态不好，为何不能及时调整自己呢？？可能是因为贪心太大，我们追求的有太多太多了，这个世界也是太丰富多彩了，以至于给人一种错觉，我不努力，就没资格去享受这个世界所给的一切，于是就陷入了这种状态。\n接受自己的不足，接受自己的不完美。对的，在继续往下走之前，应该先想想自己的能力，所处的环境以及自身的状态等客观因素，因为这些种种都是会影响一个人的主观感受。在图书馆中经常能看见有些同学早上七点之前就在图书馆背单词，晚上也一直到十点多。从我的角度来说，我这种状态我做不到，就算做到了也坚持不了多久，甚至可能会把自己的身体搞垮。\n记得之前问过自己一个问题：是逼自己一把，还是放自己一马？ 一开始想的是逼自己一把，因为一直在给自己找更高的任务，说白了就是和自己杠到底。但更多的时候却发现，具体在执行的时候反而变得更佛，更像是在逼自己一把的同时，在有限的空间给自己偷个懒。\n有的时候接受自己的不足，往往不是为了向生活妥协，反而是为了跑得更远，跳得更高！！就像开头所说的这个月如果不谈学习，我们还是好朋友。\n","description":"","tags":null,"title":"大政的考研 Blog002 —— 阳光正好","uri":"/life/kaoyan002/"},{"categories":null,"content":"Blog001——在路上,三月复盘 一、浮躁 我们生活在一个贩卖焦虑的时代，“小镇做题家”、“读书无用论”、“内卷”等等言论充斥这我们的生活。而这个社会中也往往有些人喜欢制造焦虑，什么你已经被你的同龄人所抛弃，你已经被你所处的社会所抛弃等等。我们时常会感叹道：我才二十刚出头，为何活着的这么累啊！！\n是啊，我们为何会这样想呢？？遵循自己的内心，按照自己喜欢的方式走下去不好嘛？？但是真的好难，在这个信息爆炸的时代，几乎无一人能幸免，一方面在享受科技带给我们的便利，另一方面却又被信息所左右，这个时代的我们太浮躁，心也很难静下来，也就很难能坐得住冷板凳，一天能做到、两天能做到那不叫坚持，真正的坚持往往是带着一种煎熬！！\n考研路上，怎一个“卷”字了得！！看看 2021 的考研成绩，出现四百分似乎一点都不觉得稀奇，往年比较好考的院校，也都成了热门，计算机专业更是把内卷体现到了极致。考研就是一座黑暗森林，每个考研人都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的考研人，如果他发现了别的考研人，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己目前选择的稍微好考的院校都将很快被无数考研人群起冲之，这就是考研的常态？？\n 二、心情状态 三月份回到学校，考研的路途也算是真正的拉开序幕，一开始的时候，充满干劲，却也一脸茫然，找不到方向，不知该如何是好。然后慢慢的找到适合自己的方法，说实话还是挺享受这种过程的，苦吗累吗？？有点吧，但是真的很舒服，每天的付出的都能看得见，能得到正向的反馈就很舒服。而且每天晚上带着一点点疲倦感回到宿舍之后，简单洗漱之后，还有点自己的时间，写写代码，看看杂书，练练球，这也是我当时所理想的状态，我原以为能一直这样下去，结果人绷紧了，还是会出问题的\n在这个月快结束的时候，突然间，整个人不知怎么的就不好了。。。。可能是累了，也可能是倦了。当时几乎是把高数基础又重新过了一遍，汤汤 1800 的基础部分 也做了百分之八十左右，专业课的书本也过了一遍，然后突然间就失去了目标，书不想看，题也只能是机械式的刷，当感觉到的时候，也就意识到自己的状态需要调整。这也是第一次出现心情上的波动，因为离目标太远，不知道到底能否做得到！！怕付出到最后不是自己想要的结果！！！\n忽然想起了高三激励自己的一句话：我不去想能否成功，既然选择了远方便只能风雨兼程！ 现在回过头来看，不免是有点中二的，但也就是这股劲，push 着一步一步走啊，走啊。那到底什么是成功呢？？考上大学算是成功吧，也许在当时看来是的，从宏观角度上看，我们往往把成功定义的太狭隘、太片面。所谓的成功，也许是就是一道坎，跨过去一个，下一个更高。简单来说，慢慢走吧，也许漫无目的，也许有目标，但是请别停下！！\n 三、三月份学习复盘 ①数学 因为之前数学书本已经过了一遍，在看了一些经验贴之后，意识到基础的重要性，所以又花了半个月的时间，结合汤汤的复习全书、基础三十讲以及课本，整理了一份高数基础笔记，把其中的定理能证的都证明了一遍，一些经典例题也都有添加，当看见打印出来的时候，心里还是有点小激动的，哈哈哈。\n因为之前《基础 30 讲》降价，就入手了一本，总结完基础之后，就开始配合宇哥的课程，开始刷 1800。从我的个人角度来说，宇哥的课如果基础不牢固的话，听起来真的有点飘，全程很难 get 到他想表达的点，而且笔记还不太好记。如果基础还行，跟下来，做题技巧确实能学到不少，然后就去 1800 虐菜。再简单说说 1800，题量是真的大！！！ 虽然题目不是很难，还记得当时第一次翻开习题册，第一面极限，磕磕巴巴只能做五六题，从课本过渡到考研的基础阶段，还是要磨的，还好过渡的比较平滑，到现在二刷前面的基础题，极限也几乎可以做到口算，提高篇的内容暂且不谈，因为还没做。\n如果说高数部分哪里还有盲点的话，大概是 多元微分学 以及 常微分方程部分，因为是最后复习的部分，花的时间没有前几章那么多，所以还得抽时间再看看，知识体系不能出现漏洞嘛。\n②英语 英语咋说呢，有一种不太踏实的感觉，起初可能我高估英语的难度了，觉得考研真题就一定很难，不看语法长难句就一定读不懂文章，带着这种想法，看了刘晓燕的长难句课程，再看真题的感受，大概是我好像不看长难句的课程也能把文章的大意读懂，翻译句子我还是喜欢按照自己的语感来，也不怎么分析句子成分，做题效果比自己当时想的要好。但是吧，我不能说长难句的课程就没必要看，因为自己是看了之后才做题目的，虽然这课程真的有点鸡肋的感觉，不看总觉得少了点什么，不太放心，看的话又有点浪费时间。。。。\n单词方面，尝试了一下“作死”的行为，可能是有点急功近利，就开始肝《十天搞定考研词汇》，到了第五天第六天的时候，整个人都快被单词折磨疯了，哦对，这或许也是我考研状态出现波动的原因吧。真的很折磨人，仅仅是背单词几乎占用了一天大部分时间，感觉有点不值得吧。。。。还好肝完了，单词不能说全到熟稔于心吧，但是看真题是够的了。所以我感觉单词还是很重要的吧。\n真题的话，目前只做了阅读部分，进度为 一天一篇：做题、翻译、分析题目。不知是我飘了，还是做的题目有点老（从 05 年开始做的），感觉考研阅读的难度似乎和六级差不多？？？？在有了上面的基础，大约是从 18 号开始正式做真题的，比预期要好！\n③专业课 如果有最不受程序员欢迎的编程语言排行榜的话，我一定给 C\\C++ 投上一票，甚至在开始学 C++ 的时候，我就在想为啥考研还指定编程语言啊，23333~ 大一初学编程的时候，就是因为 C语言 给我一种我不配写代码的感觉，玄学指针！！！当时被支配的恐惧，现在也是时候和它正面刚了，再逃下去就真的没路咯。。。\n数据结构方面，不算太难吧？？ （人言否。。）也可能是之前看过 JDK 源码以及经常刷题的缘故吧，只不过是换了一种语言实现罢了。所以上手还是比较快的。当让静下心来学 C++ 的时候，还是有点收获的，也让我感觉到为何 C++ 更适合刷题。\n但是中国的应试给我的感觉就是，一样东西变成了考试的内容，与实际使用来说，就变味了。。。。\n 四、谈谈备考的生活 整体的感觉是疲惫且充实，启动备考的一个月也在忙碌中结束了。在这期间，对于编程方面做出了一个决定，从后端跨到大数据，目前抽空学完了 Hadoop。问我原因的话，大概是寒假的时候玩了玩 Flink，真的太有意思了，并且看了一些前沿的技术框架，想想还是转吧，哈哈。\n因为当时心情的波动，有想过好久没买悠悠球了，逛了一圈闲鱼，没有太想收的，就把准备买球的钱，买书了，现在我想说，亲 咱能退款不？？。。。。。 有一点点后悔吧。但是多看点书还是好的。\n开源组织这边，也转移到了以开源社为主，毕竟当了组长，还是要干活的呀，带头作用要有。也从一开始几乎把任务都揽到一个人头人，到慢慢学会分配出去，再到招募新的小朋友加入进来，再想想去年自己似乎也是在这个时候接触到开源的吧，真好！\n有人说，你不是准备考研吗，怎么天天还做这些，不怕耽误你自己么？？ ，先说句谢谢您哈！可是我想说，如果把这十个月左右的时间全部用在考研上，就算到时候上岸了，我会开心吗，也许吧。但我更想在这有限的时间里做点自己喜欢的事情，不做一个只读“死书”的考研狗。\n 五、写在之后 之前一直在想，要不要把自己的考研历程给录下来，但是又嫌后期处理麻烦，索性就用博客来记录吧。而且在写之前，还在想，如果到时候没有上岸，是不是太丢人了吧，是啊，那可真拉胯，但我还是想把这一段时间用文字给记录下啦。\n考研的基础阶段，就好比是编程语言的基本语法，算作基本功；一些常用的结论、定理 有点想数据结构和设计模式，可以定义为内功了吧；再看看做题技巧，对应的是常用的框架？？也就是某种定义上的武功秘籍了吧，哈哈。所以说学习是有相通性的，作为一名学生，不能为了学习而学习，而是要学会学习而学习。\n与学习编程相比，考研学的内容可能真的不算太多，但是考研是有一个时间界限的，比的是在规定时间内，谁玩得好。这就很烦。在准备考研之前，我还在问我自己，到底为什么要考研，现在的答案是 我有我所想追求的，现在的身份、圈子，无法得到我想要的状态 ，所以要走下去！\n最后，从我个人的角度来说，还是想读书的，但我并不喜欢学校要求实践、学分、发论文的这种教育，我还没到 21 岁，我还有时间按照我所想的去“浪费”！\n","description":"","tags":null,"title":"大政的考研 Blog001 —— 在路上","uri":"/life/kaoyan001/"},{"categories":null,"content":" 如果可以的话，我想看看明年这个时候的自己是什么状态，或者 回到三年前，对那个时候的自己说一声：其实也没啥大不了，你一定可以成为你想成为的那个人。\n 疫情还没结束，但 2020 就要过去了，似乎这一年过得有点无语、有点匪夷所思，一种说不清道不明的感觉。记得小学的时候，老师让写作文，关于未来，就想着 2020 年的生活怎么样，记得当时有一点是：可以在家上学，没想到的是，我们在这样一种环境实现了在家上学。\n今年过的好嘛？？还行吧，虽然和自己想的完全是两个样子，但是做了一些值得去做的事，认识了一些有趣的人，这就够了。\n如果说 2019 年是我沉淀的一年，那么我想用厚积薄发来形容今年的自己。19 年八月底，发了一个朋友圈。给我三年，\n现在回过头来想想，不免觉得有点中二，哈哈哈哈。但也正是这股中二的动力，一直 push 着我向前走。但其实事实是：说这句话，当时所想的奋斗目标，和自己的现在的样子完全是两个样子。 当时的目标，无外乎就是学习啊、证书啊、名次啊…… 这些世俗的东西，但同样是避免不了的。如果不世俗，又怎么能真正做到不世俗呢？？幸好，在寻找的过程中，找到了目前的自己想做的事情，也是我想真正坚持下去的事情。\n絮絮叨叨说了一堆没啥用的，而且还是关于 2019 的事情，其实关于今年，没啥好说的。就像是一场梦，还没醒来，就结束了。那就说说，今年对我影响比较大的三本书吧。\n《百年独孤》看完这本书是四月份。可能也是和当时自己的处境有关，感觉自己一个人总是孤立的、没人懂我。这本书也是我硬着头皮看完的，里面的人名可以说直接就劝退。为什么这本书对我的影响比较大呢？？当一个人能感受到孤独的时候，才能做到静下心来。就像马尔克斯在书中所写的一样：所有人都显得很寂寞，用自己的方式想尽办法排遣寂寞，事实上仍是延续自己的寂寞。寂寞是造化对群居者的诅咒，孤独才是寂寞的唯一出口。 刚好那个时候，对于Java特别感兴趣，也就是在这种孤独感的环境下，能够让我有足够的耐心去读 JDK 和 JVM 源码，从而可以有效的提高自己的编程水平和技巧，随着越深入的了解和学习，也就对写代码越来越着迷。（其实源码并未完全读完，着迷之后，就在各地找项目练手，刚好那个时候接触到开源，也就有了读一些顶级项目源码的机会，增加查克拉，哈哈哈哈）\n第二本书，我想说的是《人间简史：从动物到上帝》，这本书在书架上已经有一年多了，但是因为标题写得太大，我一向不是不喜欢读这类书籍的，总感觉有点空洞。当时看了一段作者 尤瓦尔·赫拉利的一期关于如何看待疫情的视频，便开始下手准备读下去。这本书，可谓不读不知道，从一个绝对想不到的宏观角度来阐述人类的发展。也正是受到这种宏观角度的影响，从而培养出了我一个良好的思考问题的习惯，可以出圈的来想问题，也就这样，使得我的思维能够超脱出现在的处境，能够找到自己，找到自己想要的时候，找到如何在自己有限的能力之下，做一些有意义的事情。\n最后我想说的是大刘的《三体》，这本书高中的时候就听说过，但一直拖到今年暑期才看完，《三体》除了是一部科幻作品之外，更重要的是关于人性的描绘，有人说，大刘在里面是不是过分的把人类描述的太丑陋了，但脱离人类的身份来思考这个问题，相信每个人都会得到一份属于自己的答案。也是这本书，让我找到活着的意义所在：人，在能够解决自身的基本需求之后，更重要的是要留下些东西。\n这些书都是上半年读的，至于下半年，读得更多的都是一些文言文，我绝对不会想到现在的自己，会“佛”到这种程度，哈哈哈哈哈。\n今年最大的收获就是接触到了开源，这是从我接触的悠悠球之后，重新找到能让我为之付出努力的事情，而且还和我的专业有关，如果说今年有啥值得吹得事情，那就是把自己的第一份 pr，提交给了 Apache 项目。\n最后，我想说，从做得到，到今天已经做到了。\n","description":"","tags":null,"title":"关于 2020_我想说","uri":"/life/about_2020/"},{"categories":null,"content":"第二章：面向对象 面向对象是学习编程过程中一个非常重要的思想，但是它却被很多人理解成了一个比较难，比较深奥的问题，其实不然。其实面向对象在理解之后还是很简单的，简而言之就是程序之中所有的操作都需要通过对象来完成。\n 举例来说：  操作浏览器要使用window对象 操作网页要使用document对象 操作控制台要使用console对象    一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。\n在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。\n1、类（class） 要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。\n  定义类：\n  1 2 3 4 5 6 7 8 9 10 11 12  class 类名 { 属性名: 类型; constructor(参数: 类型){ this.属性名 = 参数; } 方法名(){ .... } }       示例：\n  1 2 3 4 5 6 7 8 9 10 11 12 13  class Person{ name: string; age: number; constructor(name: string, age: number){ this.name = name; this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } }       使用类：\n  1 2  const p = new Person('孙悟空', 18); p.sayHello();       2、面向对象的特点   封装\n  对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装\n  默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置\n  只读属性（readonly）：\n 如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改    TS中属性具有三种修饰符：\n public（默认值），可以在类、子类和对象中修改 protected ，可以在类、子类中修改 private ，可以在类中修改    示例：\n  public\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Person{ public name: string; // 写或什么都不写都是public  public age: number; constructor(name: string, age: number){ this.name = name; // 可以在类中修改  this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } } class Employee extends Person{ constructor(name: string, age: number){ super(name, age); this.name = name; //子类中可以修改  } } const p = new Person('孙悟空', 18); p.name = '猪八戒';// 可以通过对象修改       protected\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Person{ protected name: string; protected age: number; constructor(name: string, age: number){ this.name = name; // 可以修改  this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } } class Employee extends Person{ constructor(name: string, age: number){ super(name, age); this.name = name; //子类中可以修改  } } const p = new Person('孙悟空', 18); p.name = '猪八戒';// 不能修改       private\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Person{ private name: string; private age: number; constructor(name: string, age: number){ this.name = name; // 可以修改  this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } } class Employee extends Person{ constructor(name: string, age: number){ super(name, age); this.name = name; //子类中不能修改  } } const p = new Person('孙悟空', 18); p.name = '猪八戒';// 不能修改         属性存取器\n  对于一些不希望被任意修改的属性，可以将其设置为private\n  直接将其设置为private将导致无法再通过对象修改其中的属性\n  我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器\n  读取属性的方法叫做setter方法，设置属性的方法叫做getter方法\n  示例：\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Person{ private _name: string; constructor(name: string){ this._name = name; } get name(){ return this._name; } set name(name: string){ this._name = name; } } const p1 = new Person('孙悟空'); console.log(p1.name); // 通过getter读取name属性  p1.name = '猪八戒'; // 通过setter修改name属性         静态属性\n  静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用\n  静态属性（方法）使用static开头\n  示例：\n  1 2 3 4 5 6 7 8 9 10  class Tools{ static PI = 3.1415926; static sum(num1: number, num2: number){ return num1 + num2 } } console.log(Tools.PI); console.log(Tools.sum(123, 456));         this\n 在类中，使用this表示当前对象      继承\n  继承时面向对象中的又一个特性\n  通过继承可以将其他类中的属性和方法引入到当前类中\n  示例：\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Animal{ name: string; age: number; constructor(name: string, age: number){ this.name = name; this.age = age; } } class Dog extends Animal{ bark(){ console.log(`${this.name}在汪汪叫！`); } } const dog = new Dog('旺财', 4); dog.bark();         通过继承可以在不修改类的情况下完成对类的扩展\n  重写\n  发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写\n  示例：\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class Animal{ name: string; age: number; constructor(name: string, age: number){ this.name = name; this.age = age; } run(){ console.log(`父类中的run方法！`); } } class Dog extends Animal{ bark(){ console.log(`${this.name}在汪汪叫！`); } run(){ console.log(`子类中的run方法，会重写父类中的run方法！`); } } const dog = new Dog('旺财', 4); dog.bark();     在子类中可以使用super来完成对父类的引用\n      抽象类（abstract class）\n  抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例\n  1 2 3 4 5 6 7 8 9 10 11 12  abstract class Animal{ abstract run(): void; bark(){ console.log('动物在叫~'); } } class Dog extends Animals{ run(){ console.log('狗在跑~'); } }     使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现\n      3、接口（Interface） 接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。\n  示例（检查对象类型）：\n  1 2 3 4 5 6 7 8 9 10 11  interface Person{ name: string; sayHello():void; } function fn(per: Person){ per.sayHello(); } fn({name:'孙悟空', sayHello() {console.log(`Hello, 我是 ${this.name}`)}});       示例（实现）\n  1 2 3 4 5 6 7 8 9 10 11 12 13  interface Person{ name: string; sayHello():void; } class Student implements Person{ constructor(public name: string) { } sayHello() { console.log('大家好，我是'+this.name); } }        4、泛型（Generic） 定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。\n  举个例子：\n  1 2 3  function test(arg: any): any{ return arg; }     上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型\n  使用泛型：\n  1 2 3  function test\u003cT\u003e(arg: T): T{ return arg; }     这里的\u003cT\u003e就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。\n  那么如何使用上边的函数呢？\n  方式一（直接使用）：\n  1  test(10)     使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式\n    方式二（指定类型）：\n  1  test\u003cnumber\u003e(10)     也可以在函数后手动指定泛型\n      可以同时指定多个泛型，泛型间使用逗号隔开：\n  1 2 3 4 5  function test\u003cT, K\u003e(a: T, b: K): K{ return b; } test\u003cnumber, string\u003e(10, \"hello\");     使用泛型时，完全可以将泛型当成是一个普通的类去使用\n    类中同样可以使用泛型：\n  1 2 3 4 5 6 7  class MyClass\u003cT\u003e{ prop: T; constructor(prop: T){ this.prop = prop; } }       除此之外，也可以对泛型的范围进行约束\n  1 2 3 4 5 6 7  interface MyInter{ length: number; } function test\u003cT extends MyInter\u003e(arg: T): number{ return arg.length; }     使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。\n      ","description":"","tags":null,"title":"TypeScript学习笔记02","uri":"/tech/typescript02/"},{"categories":null,"content":"第一章 快速入门 0、TypeScript简介  TypeScript是JavaScript的超集。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。  1、TypeScript 开发环境搭建   下载Node.js\n 64位：https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi 32位：https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi    安装Node.js\n  使用npm全局安装typescript\n 进入命令行 输入：npm i -g typescript    创建一个ts文件\n  使用tsc对ts文件进行编译\n  进入命令行\n  进入ts文件所在目录\n  执行命令：tsc xxx.ts\n    2、基本类型   类型声明\n  类型声明是TS非常重要的一个特点\n  通过类型声明可以指定TS中变量（参数、形参）的类型\n  指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错\n  简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值\n  语法：\n  1 2 3 4 5 6 7  let 变量: 类型; let 变量: 类型 = 值; function fn(参数: 类型, 参数: 类型): 类型{ ... }         自动类型判断\n TS拥有自动的类型判断机制 当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型 所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明    类型：\n   类型 例子 描述     number 1, -33, 2.5 任意数字   string 'hi', \"hi\", hi 任意字符串   boolean true、false 布尔值true或false   字面量 其本身 限制变量的值就是该字面量的值   any * 任意类型   unknown * 类型安全的any   void 空值（undefined） 没有值（或undefined）   never 没有值 不能是任何值   object {name:'孙悟空'} 任意的JS对象   array [1,2,3] 任意JS数组   tuple [4,5] 元素，TS新增类型，固定长度数组   enum enum{A, B} 枚举，TS中新增类型      number\n  1 2 3 4 5  let decimal: number = 6; let hex: number = 0xf00d; let binary: number = 0b1010; let octal: number = 0o744; let big: bigint = 100n;       boolean\n  1  let isDone: boolean = false;       string\n  1 2 3 4 5 6 7 8  let color: string = \"blue\"; color = 'red'; let fullName: string = `Bob Bobbington`; let age: number = 37; let sentence: string = `Hello, my name is ${fullName}. I'll be ${age + 1}years old next month.`;       字面量\n  也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围\n  1 2  let color: 'red' | 'blue' | 'black'; let num: 1 | 2 | 3 | 4 | 5;       any\n  1 2 3  let d: any = 4; d = 'hello'; d = true;       unknown\n  1 2  let notSure: unknown = 4; notSure = 'hello';       void\n  1  let unusable: void = undefined;       never\n  1 2 3  function error(message: string): never { throw new Error(message); }       object（没啥用）\n  1  let obj: object = {};       array\n  1 2  let list: number[] = [1, 2, 3]; let list: Array\u003cnumber\u003e = [1, 2, 3];       tuple\n  1 2  let x: [string, number]; x = [\"hello\", 10];       enum\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  enum Color { Red, Green, Blue, } let c: Color = Color.Green; enum Color { Red = 1, Green, Blue, } let c: Color = Color.Green; enum Color { Red = 1, Green = 2, Blue = 4, } let c: Color = Color.Green;       类型断言\n  有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：\n  第一种\n  1 2  let someValue: unknown = \"this is a string\"; let strLength: number = (someValue as string).length;       第二种\n  1 2  let someValue: unknown = \"this is a string\"; let strLength: number = (\u003cstring\u003esomeValue).length;           3、编译选项   自动编译文件\n  编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。\n  示例：\n  1  tsc xxx.ts -w         自动编译整个项目\n  如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。\n  但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json\n  tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译\n  配置选项：\n  include\n  定义希望被编译文件所在的目录\n  默认值：[\"**/*\"]\n  示例：\n  1  \"include\":[\"src/**/*\", \"tests/**/*\"]     上述示例中，所有src目录和tests目录下的文件都会被编译\n      exclude\n  定义需要排除在外的目录\n  默认值：[\"node_modules\", \"bower_components\", \"jspm_packages\"]\n  示例：\n  1  \"exclude\": [\"./src/hello/**/*\"]     上述示例中，src下hello目录下的文件都不会被编译\n      extends\n  定义被继承的配置文件\n  示例：\n  1  \"extends\": \"./configs/base\"     上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息\n      files\n  指定被编译文件的列表，只有需要编译的文件少时才会用到\n  示例：\n  1 2 3 4 5 6 7 8 9 10 11  \"files\": [ \"core.ts\", \"sys.ts\", \"types.ts\", \"scanner.ts\", \"parser.ts\", \"utilities.ts\", \"binder.ts\", \"checker.ts\", \"tsc.ts\" ]     列表中的文件都会被TS编译器所编译\n    compilerOptions\n  编译选项是配置文件中非常重要也比较复杂的配置选项\n  在compilerOptions中包含多个子选项，用来完成对编译的配置\n  项目选项\n  target\n  设置ts代码编译的目标版本\n  可选值：\n ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext    示例：\n  1 2 3  \"compilerOptions\": { \"target\": \"ES6\" }     如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码\n      lib\n  指定代码运行时所包含的库（宿主环境）\n  可选值：\n ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......    示例：\n  1 2 3 4 5 6  \"compilerOptions\": { \"target\": \"ES6\", \"lib\": [\"ES6\", \"DOM\"], \"outDir\": \"dist\", \"outFile\": \"dist/aa.js\" }         module\n  设置编译后代码使用的模块化系统\n  可选值：\n CommonJS、UMD、AMD、System、ES2020、ESNext、None    示例：\n  1 2 3  \"compilerOptions\": { \"module\": \"CommonJS\" }         outDir\n  编译后文件的所在目录\n  默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置\n  示例：\n  1 2 3  \"compilerOptions\": { \"outDir\": \"dist\" }     设置后编译后的js文件将会生成到dist目录\n      outFile\n  将所有的文件编译为一个js文件\n  默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中\n  示例：\n  1 2 3  \"compilerOptions\": { \"outFile\": \"dist/app.js\" }         rootDir\n  指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录\n  示例：\n  1 2 3  \"compilerOptions\": { \"rootDir\": \"./src\" }         allowJs\n 是否对js文件编译    checkJs\n  是否对js文件进行检查\n  示例：\n  1 2 3 4  \"compilerOptions\": { \"allowJs\": true, \"checkJs\": true }         removeComments\n 是否删除注释 默认值：false    noEmit\n 不对代码进行编译 默认值：false    sourceMap\n 是否生成sourceMap 默认值：false      严格检查\n strict  启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查   alwaysStrict  总是以严格模式对代码进行编译   noImplicitAny  禁止隐式的any类型   noImplicitThis  禁止类型不明确的this   strictBindCallApply  严格检查bind、call和apply的参数列表   strictFunctionTypes  严格检查函数的类型   strictNullChecks  严格的空值检查   strictPropertyInitialization  严格检查属性是否初始化      额外检查\n noFallthroughCasesInSwitch  检查switch语句包含正确的break   noImplicitReturns  检查函数没有隐式的返回值   noUnusedLocals  检查未使用的局部变量   noUnusedParameters  检查未使用的参数      高级\n allowUnreachableCode  检查不可达代码 可选值：  true，忽略不可达代码 false，不可达代码将引起错误     noEmitOnError  有错误的情况下不进行编译 默认值：false                4、webpack   通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。\n  步骤：\n  初始化项目\n 进入项目根目录，执行命令  npm init -y  主要作用：创建package.json文件      下载构建工具\n npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin  共安装了7个包  webpack  构建工具webpack   webpack-cli  webpack的命令行工具   webpack-dev-server  webpack的开发服务器   typescript  ts编译器   ts-loader  ts加载器，用于在webpack中编译ts文件   html-webpack-plugin  webpack中html插件，用来自动创建html文件   clean-webpack-plugin  webpack中的清除插件，每次构建都会先清除目录          根目录下创建webpack的配置文件webpack.config.js\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  const path = require(\"path\"); const HtmlWebpackPlugin = require(\"html-webpack-plugin\"); const { CleanWebpackPlugin } = require(\"clean-webpack-plugin\"); module.exports = { optimization:{ minimize: false // 关闭代码压缩，可选  }, entry: \"./src/index.ts\", devtool: \"inline-source-map\", devServer: { contentBase: './dist' }, output: { path: path.resolve(__dirname, \"dist\"), filename: \"bundle.js\", environment: { arrowFunction: false // 关闭webpack的箭头函数，可选  } }, resolve: { extensions: [\".ts\", \".js\"] }, module: { rules: [ { test: /\\.ts$/, use: { loader: \"ts-loader\" }, exclude: /node_modules/ } ] }, plugins: [ new CleanWebpackPlugin(), new HtmlWebpackPlugin({ title:'TS测试' }), ] }       根目录下创建tsconfig.json，配置可以根据自己需要\n  1 2 3 4 5 6 7  { \"compilerOptions\": { \"target\": \"ES2015\", \"module\": \"ES2015\", \"strict\": true } }       修改package.json添加如下配置\n  1 2 3 4 5 6 7 8 9  { ...略... \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\", \"build\": \"webpack\", \"start\": \"webpack serve --open chrome.exe\" }, ...略... }       在src下创建ts文件，并在并命令行执行npm run build对代码进行编译，或者执行npm start来启动开发服务器\n    5、Babel   经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。\n  安装依赖包：\n npm i -D @babel/core @babel/preset-env babel-loader core-js 共安装了4个包，分别是：  @babel/core  babel的核心工具   @babel/preset-env  babel的预定义环境   @babel-loader  babel在webpack中的加载器   core-js  core-js用来使老版本的浏览器支持新版ES语法        修改webpack.config.js配置文件\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  ...略... module: { rules: [ { test: /\\.ts$/, use: [ { loader: \"babel-loader\", options:{ presets: [ [ \"@babel/preset-env\", { \"targets\":{ \"chrome\": \"58\", \"ie\": \"11\" }, \"corejs\":\"3\", \"useBuiltIns\": \"usage\" } ] ] } }, { loader: \"ts-loader\", } ], exclude: /node_modules/ } ] } ...略...     如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。\n      ","description":"","tags":null,"title":"Typescript 学习笔记01","uri":"/tech/typescript01/"},{"categories":null,"content":"我与开源的那些事儿。  很幸运！！！是的，很幸运，除了幸运，我不知道该怎么形容我和 开源 的缘分。感觉就好像在冥冥之中，肯定会走上这条道路一样。\n 缘起 2020注定是特别的一年，年初，谁也没想到，一场疫情把我们牢牢的困在家里，哪也去不了。。说实话，或多或少有点抱怨吧。但伴随而来的，是一场灾难。那个时候每天一早醒来，看见手机屏幕刷新的数据，冰冷的可怕，红线一直在升。。。当时就在想，为什么我不是学医的，待在家里什么都做不了，似乎捐钱变成了最可悲的方式。\n偶然一次，在知乎上看见关于开发者抗疫的活动——“Wuhan2020”。本身就是学计算机专业的我，对于技术方面的文章也比较感兴趣，就随手点了进去。（ 其实当时内心所想的是，可能有是一个营销号在做文章 ）。在大致了解了Wuhan2020整个项目之后，便开始搜集更多的与之相关的信息。最后偶然在一个公众号中，看见了“黑客松活动”。就水群，进去了，，哈哈哈哈。但当时还是个技术小白，啥都不懂，可以理解成比会写“hello world“强那么一点点。在那之后，也找到了Wuhan2020的官方公众号。那时，想着尽自己的一份力，但是无论是对于开源文化上还是技术上都感到了很大的局限性，说俗点，大概就是心有余而力不足吧。随后大约在四月份（ 精确点是4月4号，因为那一天整个世界都是灰色的 ），看见了Wuhan2020公众号招人，我想了想自己对于做图剪视频之类的，还算是比较擅长的，就去试试水。进入了设计组。这也算是我第一次真正接触到开源吧。\n 幸运 说实话，除了幸运我不知道该怎么来形容这段经历。当时在设计组群里，几乎什么都没做，就发了一份作品＋自我介绍，然后有一位华师大的学姐，就加我为好友，说是带我一起和一位大佬做Apache相关的推广。哈？？Apache是什么？？当时的我是一脸问号。。。。然后就抱着试一试的心态跟着去了。。。（ 现在想想当时真的是有趣，如果我说我什么都不了解，甚至拒绝的话还会有现在的我么。。而且群里那么多人咋就单单选中了我呢，哈哈哈哈）然后和Apache的姜宁老师简单聊了一下，说到hugo啥的。我心里想hugo？？雨果还搞开源？？随后查了一下，是一款搭建静态博客的框架，这也是我正式使用github的起点吧，更新博客。学了点东西总要找点事情做的，要不然时间一长，不就那也记不住了，哈哈哈。\n慢慢的跟着学姐运营ALC-Beijing和Wuhan2020的公众号，也一起了解到更多有关开源的文化。习惯也由之前的天天逛CSDN、知乎变成Github、掘金之类的。成功搭建博客，给我学习新的知识也树立了信心。似乎一切都好了起来，那个时候武汉已经宣布解封。\n 当时接触开源之前，总感觉自己怀才不遇，明明会的不少，懂得知识也挺多的，为什么就还只是一个普普通通的大学生呢？？还是做不到出圈，每天混学分，做着毫无疑义的事情。但当皓月姐姐加我好友的那一刻开始，就感觉那份属于我的运气该来了，还撞的特别准。\n 随后也加入了开源社，慢慢认识了更多的小伙伴，一群人不认识也不了解，分布在各个地方，做着一件共同的事情，可能这就是我当时所理解的开源吧。\n 受阻 当时想着为一些顶级的开源项目做贡献，就开始学会主动去吸取知识，那种学习给我的感觉是由心而发的，主动的。如果问我那时为什么想参与开源，大概是开源本身就具有向善的属性，也认为那是一种体现自己价值的方式。\n当五月份学校宣布返校的时候，回头学校之后，就开始感觉自己有出圈的能力了，也有出圈的想法，可能是技术层面，学校没有需要学习的，也可能是真正意识到现在的自己可以做一些更有意义的事情了。就逐渐向周围的同学唠叨着自己接触开源的事情，很多人的情况和我一样，一开始都是一脸懵圈，但遗憾的是懵圈之后，就什么都没了。这就好比一个主动跳入坑里的人，很难再拉下一个人主动入坑。其实准确点来说，都感觉开源离自身太远。从学生角度来思考，学好文化课，在课余时间参加活动、比赛之类的，赚学分，才是本职工作。至于开源，第一是不了解（不直接和自己的利益挂钩），第二是技术层面达不到。可以发现github上面的顶级项目几乎大多数都不适合学生来做，而且更多的是面向求职者或者说是已经工作了的，这样一来，即使有一腔热血，但是也被挡在门外。（回头想想自己，能想到把blog部署到github上，这样一来，几乎就和github捆绑在一起了，也就是这样能有更多的机会接触更多的项目。）带着这样的问题，我就在思考如何才能让身边的人参与开源，其实参与开源也不一定是技术层面，是不是？？\nCOSCon‘20 期盼已久的开源年会终于来了，尤其是今年年会的主题——“开源向善“ 。这可能也是我接触到开源的初衷。当时去之前，就在脑子里构想了很多有关开源的问题，在自身深入了解开源之后，总感觉没有自己想的那么简单，说大点可以是一种哲学，甚至是一种信仰。这是开源带给我最直观的感受。\n年会现场，也可谓是大型的网友见面会，虽然每个人都不一样，学着不同的专业、不同的城市、不同的年龄段，但是却都可以在彼此身上找到各自的影子，有时候有些事确实挺奇妙的。在第二天，无论是和庄表伟老师的聊天学习，还是和王伟老师的沟通交流，都刷新了我对于开源的认识，就好像是打破之前的定义，更深入的思考，对，这次是思考，不再是了解。如果说皓月姐姐是我接触开源的引路人，这大概就是遇见了自己的伯乐。\n天下没有不散的宴席，虽然很不舍，但是离别是必然的，愿下次再遇见，那个时候的自己更优秀。\n","description":"","tags":null,"title":"我与开源的那些事儿","uri":"/life/coscon/"},{"categories":null,"content":"大三了，二夕回来了？？ 转眼间，大学生活已经过去两年了，一切总感觉一切都还早，一切都不用那么着急，反正很多事情也不是着急的事。这学期临近开学，忽然不知怎么就有了一种无形的压迫感。这种压迫感似乎在怒斥着自己，你前两年都学了些什么？？ 仔细想想，好像什么都没有。。。。\n是的，什么都没有！代码写得还是一如既往的差劲，缺少能够独立思考的能力、做不到举一反三，一切的一切都只会按部就班。在台上依旧会紧张，更少了刚踏入大学门时的斗志。失败吧？？确实挺失败的。\n一开始一直想着考研，感觉打着考研的口号，就能贴上好学生的标签，就不会变得浑浑噩噩，但是环境的影响是必然的，因为自身所处的氛围，从而间接的决定了你所看到的上限。很多人，在大学阶段都在乎名利、奖学金啊之类的，说实话，当时我的也是。恨不得把所有的荣誉都贴在身上。随着时间的推移，慢慢接触了更多的大佬，了解到上一个层面，才知道这一切是多么可笑的事情。从我现在的自己看着两年前的自己，说成降维打击也不为过。当时忙来忙去的，说好听点叫做锻炼自己，实际上谁还不是为了那点可笑的学分呢？？学分有用嘛？？也许有吧，没用怎么才能拿奖学金呢？？那么问题来了，奖学金有用吗？？似乎没吧，能写到简历上吗？？搞笑的嘛？？所以现在回头来看，似乎才知道当时的自己做了许多毫无意义还徒添烦恼的事情。上了大学，很少有人为了学习烦心过，更多的在于这些组织关系的一些杂七杂八的事情，毫无意义且浪费时间。所以从大三开始，我要撕去前两年亲手为自己贴上的标签，做个简简单单的普通大学生。\n但是想撕标签，说的简单，做的时候还是顶着很大的压力，等于摧毁以前苦心营造出来的一个人设，再树立一个与之不同甚至相反的，周围人怎么看？？重新树立的我 还是我吗？？谁知道呢？？往下走就完事了。这也算是对于两年的自己一个交代。\n高三的高考失利，就注定在心里埋下考研的萌芽。当时看着各个高校的专业排名，最中意的是华东师范大学，其次是我喜欢上海这个城市。但是呢，上了大学之后，周围的人都在告诉你，像文达这种学校能考个安大就不错了。。。是呀，安大还是211呢，你稀罕嘛？？反正我可不想。随着最近的忧虑，我恍惚和当时的自己进行了一次对话。大政笑二夕多么的颓废，而二夕却在感叹当时的大政多么心高气傲。如果可以，我更想做回以前的自己。那个做出一点点成绩，就引以为傲的大政。那个血气方刚的中二少年。\n现在，我 回 来 了！！！先从目标开始，考研目标： 华东师范大学 ，说难听点，窝窝囊囊从中学到大学上的都是垃圾学校，考研再不翻身更待何时！！！ 我想把高三时候陪伴大政的一句话，送给现在的二夕： 我不去想是否能够成功，既然选择了远方，便只能风雨兼程。\n现在回答开头提出的问题：我回来了吗？？是的，一个全新的我回来了。\n","description":"","tags":null,"title":"我回来了？？","uri":"/life/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/"},{"categories":null,"content":"可能自己就是天生比较丧的原因，当第一次僵尸的《网易云》就入了坑，这几天，听见了他的《淹没》，就开始单曲循环。\n其实，说到底，rapper也好，yoer也罢，都是小众文化，想要的到大众的认可，谈何容易。但往往就是这种小众的圈子，入圈的人更能找到共鸣，因为有些话，只有小众人才能明白。\n以下内容是根据歌词所想所写：\n 想去冒险，结果一直没有真正的去实践过。我也曾一个人做地铁坐公交到底站，带上耳机的惆怅感只有自己能懂。喝酒吗？？我不喝酒，喝酒伤身体，多喝点奶。有时自己的抑郁的时候，通常是手机开飞行模式，不想遭到任何事情打扰，关上房门，带上耳机，拿起悠悠，就进入另外一个世界了。\n你高考了没？？学习成绩怎么样啊？？对于自己的未来有想法嘛？？考不上大学是不是打算直接就去打工啊？？ 反正谁知道呢，走一步看一步就好。\n我是个yoer，但不是火力少年王那种，电视上面的都是基础招，都是垃圾，哎哟、好吧，其实大家玩的都差不多吧。反正你们也不懂，只是看看热闹罢了。玩的也就一般嘛 在圈子算低端吧。从来没指望这玩意能够赚钱，还不是因为自己喜欢啊。家里啊、家里人一开始最多认为我是三天的新鲜劲，过去就没了，支持嘛？？说不上吧，你想想你儿子整天玩个悠悠球，难不成你还供着他啊……至于现在，不反对就好。\n有时候，就很烦，玩悠悠球毕竟不是未来，鸡汤现在都烂大街咯，成功一定会来，就**放屁。我会不会坚持？？不知道，反正我没想过放弃。\n  凌晨的卧室它会变成汪洋 在每晚一点半准时的重逢\n手机屏散发出微弱的光芒 抵抗这无形中巨浪的重重\n连秒针都变得肆意而猖狂 嘲弄他理想的荒唐\n苦笑的祭奠那逝去的张扬 还有他已不知去向的从容\n我想做到给他们看见 我想成为他们口中特例\n我想做到给他们看见 吐出这口憋了无数年的恶气\n失魂落魄的那个人啊，这个世界又何曾让他选\n一开始就只有这一条路给他走，死不悔改的丧家犬\n暴风雨并不会让人绝望，杀人的不是狂风\n遍体鳞伤的人 绝不会倒在最艰苦的长征\n积压的情绪爆发后 突入其来的平静让人惊讶\n生的了结最可能出现在某个无限美的黄昏\n嘴里说我知道我明白我会照做，心里说死也不要\n他们总逼着你喝下去有一种名字叫为了你好的毒药\n成功竟然比存在本身还重要 他们指着那些伟人\n时至今日我发现哪里有人群 入眼处尽是鬼魂\n 愿世界没有歧视，小众文化forever！\n","description":"","tags":null,"title":"听姜云升——《反抗》","uri":"/life/%E5%90%AC%E5%A7%9C%E4%BA%91%E5%8D%87%E5%8F%8D%E6%8A%97/"},{"categories":null,"content":"致RIOT悠悠球协会全体成员的一封信、 社团名以及LOGO的由来 时间返回到一年前，也大约在这个时候，我可以确信我们的悠悠球社团能够成立，也大约在这个时候，想好了社团的名字，以及设计出社团的LOGO。还是想说说名字的来历吧，主要来源于我比较喜欢的一颗悠悠球 “start the riot” ；还有就是RIOT可以简单分成两部分来看：“RI” 其中R的词根的有再一次的意思，而”OT“呢？？这个可不是打游戏里面的OT，而是圈子里面提倡的一个概念”Original Throw“。因为大多数人，或多或少再小时候都接触过悠悠球，所以我希望的是当再一次接触到悠悠球，请不要再放下她。（ 还好学校里面的领导没文化，不知道riot其实是暴动、暴乱的意思，要不然说不定给我ban了，哈哈哈哈 ）\n至于社团的LOGO呢？？更偏向于街头涂鸦的那种感觉，给人的整体感觉也是比较青春有活力的。与传统的圆形或者中规中矩的方形所不同，甚至可以感觉到一点叛逆的味道在里面。。。\n为何创立？？ 为何创立社团？？以及有没有必要创立一个悠悠球社团？？ 其实这两个问题困惑了我许久。先谈谈第一个：悠悠球作为小众运动，对于绝大多数人而言，甚至还停留在儿时的玩具，只能够普普通通一上一下的简单操作，对于电视上出现的各种操作，更以为是特效。。。。。这个原因也是能说是其中的一点。想打破大家对于悠悠球的认识也是创立的一个主要原因。在刚上大学的时候，我就开始尝试着让更多人了解悠悠球，或者说入坑悠悠球，但是悠悠球相比于其他的玩物，上手难度比较大，因为是小众，文化基础不是很好。再加上需要付出时间和精力去练习等等诸多因素，从而导致更多的人都只是愿意看看。但是正是由于她的小众以及上手难度，这也是使得悠悠球更显得与众不同。在当时尝试推广之下，已经有了一定的群众基础，刚好赶上要举办元旦晚会，因此便和几位小伙伴上台表演了一番，虽然玩得都是基础招，对于许多没有真正了解过的人来说，这已经amazing了！！！是的，表演效果还是可以的。这也让我有了创办的信心。在2019年三月份，华东高校悠悠球联赛正式举办，当时因为一些原因，并没有去现场学习。但通过直播，仍然可以看见有许许多多的大学生对于悠悠球的热爱与执着，特别看见新手组的时候，对我而言感觉是最多的。在五一假期的时候，来到上海，参加了上海悠悠球聚会，起初我以为我是最差的，，但是看见很多意想不到的，有小朋友也有大叔，都是因为对于悠悠球的喜欢与热爱，我们得以相聚。玩悠悠球，玩得开心不就可以了，为什么想那么多呢？、如果创立社团可以让这份快乐延续和传播下去，岂不是更好？？从那时起，我就在心中埋下一颗种子，并尽力让其生根发芽。\n有必要吗？？或许正确的答案是没必要吧。创立社团对我自己而言更多的是徒增了许多烦恼（在实际的过程中也是如此）。但既然能够成立一个社团，又何必去管它有没有必要呢、、 干就完了！！\n为期一年？？ 实际上，在协会会长这个职位上，并没有满一年就下来了。。。\n起初，在刚成立的时候，还在幻想着，纳新能招多少多少人，以后举办什么什么活动之类的，理想总是美好的，实际证明这一切的幻想都是基于我自己对于悠悠球的喜欢，对于一个不冷不热的路人来说，我们更应该思考的是如何让他们对此感兴趣。。 所以说，不管是纳新还是举办活动，都比我预想的要差的很多，甚至在有一段时间，我就在想，社团还有必要继续运营下去吗？？这时，我想起《曾国藩》中的一句话：\n 打破牙和血吞！！！\n 哈哈哈，现在回头看来也没有那么严重，只不过是与心里的预期相差太多，有点接受不了，所以难免有点颓废。颓废过去，社团还是要经营的，最重要的每周的训练是必不可少的，只有在保证训练量的基础上，部员才能有所成长。就这样，新的一年即将到来，随之而来的还有元旦晚会，这也算是社团的一个隐藏起点吧。但是身份却发生了改变，相比较一年前，想在舞台上秀操作，那时更多的是想让协会的部员能够上台展示自己，这是社团的收获，也是你们的收获。和当时不变的还是，舞台肯定要炸，玩悠悠球不蹦迪，那不是在土嗨嘛？？（ 开个玩笑 ） 就这样，经过为期三个月的努力，社团可以呈现一个完整的舞台，足够了，是的。这既是对于社团部员的考核，也是对于我自己的一次检验，还好，不算太差。\n到了2020年，因为疫情原因，没能及时返校，部员的训练量也就落下了。回校之后，就在想，要不就这样吧？？反正接力棒就要交到下一届，到时候就与我无关了了了了、、、 内心还是挺纠结的。最后想了想，活动还是要办的，毕竟要为留下来的部员最大化的谋取福利，顺便可以培养下一届会长的办事能力。也算是对自己交个差吧。\n以上大概差不多就是这一年来经营社团方面的心态变化。接下来简单说一下个人的经验：\n 做好牺牲自己（时间和金钱），当选择成立一个社团或者留任的时候，那就代表着你要担负起属于自己的那一份责任； 要有适当的计划，可以是长远性的，也可以是目前的，比如说在纳新结束后，可以根据部员的时间合理安排每周的训练，再具体点就是每周训练的内容； 调动部员的积极性，相比较参与社团活动，可能大部分部员都会选择做自己的事情，因为在他们看来参与社团活动是为了社团的发展之类的，而往往牺牲的是他们自己的时间，长而久之，就慢慢会退出社团活动，这时作为会长就要结合实际情况，调动部员的积极性； 在比较活跃或者说表现比较积极的部员，要培养他们的归属感，从而可以他们有参与社团活动、留在社团之类的想法，产生良性循环； 认真重视自己的社团，比如在每次训练的时候，可以逐一私给部员私发信息，让部员意识到其重要性，如果作为会长自己都不重视，凭什么要求部员积极呢？？  谈谈收获。。 好像读到现在，整体给人的感觉是有点不太乐观的、甚至还是比较颓废的。但事情都是有两面性的。\n给我收获最大的莫过于看见部员的成长。从什么都不会，到可以玩出点东西；从内向腼腆，到敢于上台表演；从遭受别人的冷眼嘲笑，到慢慢有了掌声……\n记得当时纳新结束，有一个小部员，来找我练球，教他的时候，问他什么都不说，发球手还抖的噼里啪啦的，整个人就是特别内向，更别说在人群面前展示自己了，但是逐渐慢慢的，有了变化，在元旦晚会的时候，上台表演，听见来自台下观众的掌声，也可以肯定自己。这一切的变化，不能说都是来自于悠悠球，但是悠悠球在其中有不可或缺的因素。还有的部员说，我从小就双手不协调，不可能玩好的。但是我想说，只要你相信自己，并且听我的愿意花时间去练习，没有什么做不到的。是的， 只要坚持，结果总不会太差 。\n再说说我自己吧，因为把自己大部分时间都放在社团上，也就没了过多的时间抄招想招，每周都在想着教什么基础招，想必圈子里面很多的老前辈都知道基础招的重要性，从而就有了我现在的手感，这与教授部员基础招有着密不可分的关系。还有就是，心态被磨平了，做事情可以从更多的方面去思考问题，这些也全都是收获。\n 那么现在再想有必要创立社团嘛？？我的回答是：有的。我把社团的定位是传播悠悠球的正确玩法，而不是培养比赛型选手，如果可以向圈子里面输送新人也是更好。但就说传播悠悠球的玩法，我想我尽我自己的能力，做的还行吧。\n如果说社团最大的难题在哪？？莫过于 传承 。\n 我的故事到此为止\n没做好的 你来帮我完成\n永远保持热爱\n ","description":"","tags":null,"title":"关于RIOT悠悠球协会","uri":"/life/%E5%85%B3%E4%BA%8Eriot%E6%82%A0%E6%82%A0%E7%90%83%E5%8D%8F%E4%BC%9A/"},{"categories":null,"content":"说起 《三体》 ，想必大家并不陌生，大约从初中就听说过这套书，但很遗憾的是，当时的我并不喜欢读书，直到现在，也就是大二的时候才读完。但庆幸的是，有些书幸好没有那么早的草草地过一遍，要不书中想表达的含义，在当时的经历与心境来说是无法理解和体会的。\n 地球生命真的是宇宙中偶然里的偶然，宇宙是个空荡荡的大宫殿，人类是这宫殿中唯一的一只小蚂蚁。这想法让我的后半辈子有一种很矛盾的心态：有时觉得生命真珍贵，一切都重如泰山；有时又觉得人是那么渺小，什么都不值一提。反正日子就在这种奇怪的感觉中一天天过去，不知不觉人就老了……\n 这是《三体1》当中叶文洁，对伪主人公汪淼所说的一段话，也是全书中我比较喜欢的一段话。读完书之后，在翻阅之前做的笔记的时候，看到这段。不得不佩服大刘的思维，在读第一本的时候，可能会觉得这只是叶文洁的感叹。但通读全书之后，何尝又不是每个读者心里发出的一声叹息呢。。从宏观的角度来看，与浩渺的宇宙相比，人类确实只是一粒尘埃。但同时，人类是幸运的，生活在地球上。可悲的是，人类本身却不知道爱惜这块土地。\n反观叶文洁，为何要给三体人发信息呢？？甚至不惜犯了反人类罪。当从汪淼的视角，第一次看见叶文洁的时候，不免觉得这样一位老太太有点可怜，失去了自己的女儿，看着她那照看小区里邻居家小孩的样子，哪能想得到是ETO的统帅。。 但结合叶文洁的遭遇，也不难发现，她之所以决定把三体人引来都是有原因的，甚至不惜牺牲丈夫的生命，是人类一次又一次的做出违反道德底线的事情，在文革那个特殊时期，国将不国，人成非人。从而给叶文洁的心中埋下不相信人类的种子，当来到红岸基地之后，凭借自己的技术和手段，在收到三体人的警告：“不要回答！不要回答！不要回答！” 但她还是毫不犹豫地发送信息，暴露出地球的坐标，也就有了三体以后的故事。\n全书中，我最喜欢的角色是：章北海 ；最欣赏的应该是： 维德 。一个是要多想，一个是前进，不择手段的前进！之前，在还没读《三体》之前，隐隐约约看了点书评之类的，知道章北海是一个坚定的失败主义者，那时候就在想，既然是一个失败主义者，为何还有那么多人粉他呢？？不是应该被批评的嘛？？所以一开始对于章北海并没有什么太好的印象，甚至还有点反感。。。。在读到的《黑暗森林》的时候，面对三体人的来临，几乎所有人都慌张失措的时候，联合国更因此，制定了反人类的面壁计划。在这个条件下，反观章北海，没有面壁者的权利有义务，却成为了一个合格的民间面壁者。当大刘写到他问自己的父亲，下一步该怎么做的时候，父亲告诉他：“北海，我只能告诉你那以前要多想”。设想一下，如果我们自己在当时的环境下，我们该如何去做？？更多的可能是崩溃，但他没有。知道人类的特性都明白，逃亡主义是不可能实现的，但面对敌我实力的悬殊，也唯有逃亡，才能为人类文明的延续留下火种，尽管流浪在宇宙中的新人类，已经成为非人。但是毫无疑问，他是成功的，也完成了自己的任务。再来看看看维德，第一反应是这个人未免有点太讨厌了，喜欢欣赏人绝望的时候，就凭这一点就很恶心，是不是。。但是慢慢读下去，发现他是一个彻底的功利主义者，更说出了很多金句，比如： 失去人性，失去很多，失去兽性，失去一切 。但是欣赏归欣赏，要是在现实生活中，要这么一个人，肯定是不愿意和他做朋友的，太危险了，得绕的远远的，哈哈哈~\n简单的说一下阅读感受，在读第一部的时候，能感觉到这本书的格局之大，也被大刘的一些科幻创意点子所惊呆，尤其是在说冯诺依曼用大量的士兵给秦始皇展示计算机模型的时候，绝对的是一大亮点，还有就是从工具人汪淼的视角，来揭开三体人，让人感觉不太像是科幻小说，更有点的侦探悬疑的感觉。再看第二部，主人公罗辑从一个混日子的大学教授，被指定为面壁者，从而慢慢经历在书的末尾与三体人正面对决，可谓惊叹，对于罗辑的心路历程，再看看年少时候到我们。反观第三部，程心被喷圣母biao，但是她做错了什么嘛、是人类选择了程心，在那个时代的人类，可怜更可笑，盲目地自大，所以选择程心是理所当然。在读到书的结尾的时候，被大刘一个接着一个抛出的科幻点子所惊艳，有一种喘不过气的感觉。但又有点急急促促的感觉。\n读科幻小说给我的最大感受，就是每次读的时候都把自己的思想扩展到宏观层面，感觉眼前的所有烦心事，在整个人类文明面前都是不值一提的，可以把问题思考的更深入点，就想到既然文明可以一直延续下去，那么该如何让自己更有意义，成为文明的一部分呢？？我得出的答案是，那就是做些有意义的事情，什么事情是有意义的呢？？放下小了说，就是活好当下。。。\n","description":"","tags":null,"title":"读后感——《三体》","uri":"/life/threebody/"},{"categories":null,"content":"今天想说说 关于知足 、 大家经常说“知足常乐”，但对于知足却没有一个明确的定义。\n 语出《道德经》。认为“祸莫大于不知足”，不知满足，进而追求，定招灾祸。知其足，不追求，安于所得，无为无德，反而常常满足。知足才能避免灾祸，才能全生保身。\n 今天我为数不多的一位朋友，遇到了点烦心事，和我唠嗑。然后我对她说“知足就好。” 她说：“ 我太喜欢这个词了，知足常乐”\n但怎么说呢、知足是个好词，每个人都渴望知足，但是从我的角度来说：其实我想要的是比知足多一丢丢，这样才能因为知不足，而保持学习。 知足确实是挺好的，但是人在成长的过程中，往往会由于自己的贪婪或者说是欲望，而不断提高对于自己的要求。当自己的要求更高、更严，从而可以在一定程度上促使自己变得更好、站得更高，那么在那个时候的自己，可能就会变得不那么知足，甚至有点贪得无厌。其实我感觉这些都是人之常情，如果所有人都安于泛泛而谈的知足，那么又有谁来推动社会的进步呢？？\n其实这种想法也是不对的，把贪婪说成知足，把知足说成安逸。我所理解的知足，是一种享受状态，是在于知道自己想得到什么之后，不用多想其他的什么，是完成目标之后的，有点小小的满足，甚至是骄傲的感觉，似乎整个世界都没有烦心事了，又好似整个世界的事情都与自己无关，可以安安稳稳地去做自己想做的事情，没有为了目标而去努力的劳累感。就这样，一切都安静了。。\n事实证明，知足状态下的我，可能会变得一塌糊涂，如果再这种状态下去，甚至会变得一无是处。在暑期，当忙完了所有要紧的事情的时候，当时的我已经精力交瘁，也有一种“知足”的感觉。因为感觉所有的事情都结束了，似乎可以让自己好好休息一段时间咯。当时理想的状态就是：每天写写代码，看看书，练练球，再学点额外的技能之类的。但是这几样，几乎没有一件事情是完成了的。这就是因为人的惰性，人只会着急与眼前的事情，很难去保证或者说坚持一些有意义的事情，让自己可以变得更优秀。\n等等，写到这里，我不由得想到，前面所说的我想要的是比知足多一丢丢 。这似乎就进入了一个死循环当中，每当处理完一些事情（￥%#\u0026噼里啪啦、乱七八糟之类的事），就会进入短暂的休息期，这个期间的自己是不想做任何事的，或者说不想做任何要动脑、动体力的事情，在这个状态下去，就会想是不是因为自己最近的不努力、懈怠，从而导致自己没有进步，与别人的差距又拉开了？？然后就感觉自己不再知足…… 长此以往下去，似乎会让自己变得更累，总感觉自己没有丝毫喘气的机会。。。\n那么问题来了？？究竟什么样的状态才是知足呢？？就如同五月天在歌词中写到：\n 天上的星星笑地上的人，总是不能懂不能觉得足够。\n ","description":"","tags":null,"title":"谈谈知足","uri":"/life/%E7%9F%A5%E8%B6%B3/"},{"categories":null,"content":"TwoSum 一、题目概述  给定一个整数数组 nums 和一个目标值 target ，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n 示例：\n给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]  二、解法分析 对于这个题目想必大家并不陌生，可以说是绝大多数人的开始刷题之路的敲门砖。如果是一开始起初接触刷题的朋友，看到这题，可能没有思路，也可能是暴力解法 ，对于我自己就是使用双重for循环遍历暴力解，：）\n下面将使用双重for循环和HashMap两种解法供大家参考：\n1、暴力解法 我们首先来简单的分析一下题目：需要从nums数组中寻找两个数，使这两个数的和等于目标值target，并且数组中同一元素不能使用两次。所以我们可以使用for循环来寻找，外层循环的条件是for(int i = 0; i \u003c nums.length; i++) 即从数组的第一个下标开始遍历，直到遍历到数组结束；内层循环的条件是for(int j = i + 1; j \u003c nums.length; j++) 注意内层循环开始的条件不是从数组的第一个下标开始的，而是从nums[i] 的下一个位置开始遍历，结束条件相同。\n就这样，咱们使用双重for循环如此暴力的遍历，直到遇见了符合nums[i] + nums[j] == target  条件时，返回数组对应的下标即可；如果遍历结束之后，仍然没有在该数组中找到需要的数，则抛出异常。\n代码实现如下：\n1 2 3 4 5 6 7 8 9 10 11  // 使用for循环遍历 暴力解题  public int[] twoSum02(int[] nums, int target) { for (int i = 0; i \u003c nums.length; i++) { for (int j = i + 1; j \u003c nums.length; j++) { if (nums[i] + nums[j] == target) { return new int[]{i, j}; } } } throw new IllegalArgumentException(\"Two Sum No Solution\"); }   2、HashMap解法 对于哈希表这种数据结构，这里就不做具体的说明，想要了解的小伙伴可以自己查阅一下相关文档。\n我们先定义一个数组res[] 用于存放最后返回的结果。然后再创建一个哈希表，HashMap\u003cInteger, Integer\u003e map = new HashMap\u003cInteger, Integer\u003e(); 然后对于这个数组进行遍历，每次遍历的时候取出一个数，然后再map 中查询，是否能找到一个合适的数，使两者之和等于目标值target ，如果找到直接返回即可；否则，将该数加入map 。依次进行遍历。\n代码实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // 使用HashMap来解决该问题  public int[] twoSum01(int[] nums, int target) { int[] res = new int[2];// 存放返回的结果  if (nums == null || nums.length \u003c= 1) {// 判断传入的数组是否符合条件  return res; } HashMap\u003cInteger, Integer\u003e map = new HashMap\u003cInteger, Integer\u003e();// 创建哈希表  for (int i = 0; i \u003c nums.length; i++) { int num = nums[i]; int val = target - num; if (map.containsKey(val)) {// 在map中寻找  res[0] = map.get(val); res[1] = i; return res; } else { map.put(num, i); } } return res; }    3、结束语 这个也算是开的一个新坑吧，虽然数据结构篇还没有完结。。。。刷题，几乎是一个程序猿的必经之路。大家一起加油！！！\n源码地址 —\u003e TwoSum\n","description":"","tags":null,"title":"TwoSum","uri":"/leetcode/twosum/"},{"categories":null,"content":"两年前的这个时候，高考也已经告一段落。一直以来，都太强调学习，满脑子里想的都是”知识改变命运“这种空而大的口号。其实这一点，直到今天，还依然未变。要不看了这么多年的书，岂不是白看了嘛？？哈哈哈哈哈……\n在高三的时候，总想着，只要再努力一点，再多背一个单词，多做一道题目，就离考了大学更进一步，但其实不然。当拿到报考指南的那一刻，还是傻眼了。似乎有一种无力感，高考查完分之后的那种兴奋再也找不到了，就在想：当时熬的夜，还值得吗？？都说付出就会有回报，但结果呢？？这大概就是灰色而幽默的现实，当头一棒，给我敲醒。我只是个蝼蚁，还有很长的路要走！！\n在大一的时候，大部分的同学的共同语言，还是关于“高三”。似乎，之前的所有经历和高三相比都不值一提，还是当时眼界太低，能看见的只有高考呢？？上了大学，懵懵懂懂，总想着，摆脱了高中的条条框框的拘束，也有个平台可以展示自己了。其实现在反过来，想想当时自己为什么要加哪些组织、社团呢？？是真的喜欢吗？？还是单纯的为了学分呢？？还是利益相关呢？？大一刚入学的时候，感觉那些当着学生组织负责人的学长学姐好了不起，如果自己到了那个时候，会变得和他们一样优秀吗？？大一，也许在悔恨高中为什么不努力好好学习，也许是刚刚告别高三，还把看书、刷题当做一种习惯，但慢慢的，随着时间的推移，当时的屠龙少年，现在也变成了一条恶龙。（前段时间在整理书柜的时候，发现了大一时候学高数，演算的稿纸，还真的挺佩服那时候的自己）\n到了大二，渐渐的在学校里有了自己的圈子，创立了自己的社团，原以为会变成自己想要的样子，迎来的却是各种毒打，其实也算不上毒打，准确来说是劝退。当热情被慢慢消磨殆尽，坚持下来的可能就是责任了吧。那如果连责任心都没了呢？？我还有什么坚持下去的理由呢？？\n到现在，回过头来，看看高三时候的自己，可能会对他说：把一切都看淡一点，没什么大不了的。是的，没什么大不了的。说句鸡汤的话：只要你努力，总不会变得太差劲。\n 其实这篇文章，在好久之前就想写，但一直找不到带入点，也不知该如何去说起。可能是最近的烦心事多了，又变得消极了点，心里有情绪，总归要抒发出来的嘛。\n","description":"","tags":null,"title":"写个两年前的自己","uri":"/life/%E5%86%99%E4%B8%AA%E4%B8%A4%E5%B9%B4%E5%89%8D%E7%9A%84%E8%87%AA%E5%B7%B1/"},{"categories":null,"content":"关于我？ 叫我二夕就好，可能看到这里，你会好奇，为啥起一个这么怪的名字呢？？\n当时在想昵称的时候一直找不到合适的，打算叫“无名”，但总感觉有点落了俗套。还好，中文是比较有意思的，把“无”和“名”下面的部分拿了，不就是“二夕”了嘛。。。。。哈哈哈哈哈哈\n 玩什么？？ 常常会感慨自己是个老年人了，过了打游戏的年龄。在大学生活中，不打游戏，时间就多了起来。无聊的时候，总想找些东西打发时间。慢慢的，找到新的伙伴——悠悠球。停停停！！！我知道你想说：刚刚还感慨自己是老年人，现在又玩起小孩子的东西。\n大多数人对于悠悠球的印象可能还停留在儿时的玩具，是的，重新开始接触的时候，我也是那么认为的。但随着技术的提升，认识的玩家越来越多，会发现一个全新的世界。你会发现，有很多人都在为之而共同努力。只想把悠悠球，一种玩具，小众文化，推向大众。想得到大众的认可。\n 除了玩？？ 除了玩，那肯定就是吃和睡咯……呸呸呸，这不是我！！！\n学的专业是软件工程，所以平时最多打交道的就是代码，哪还有时间吃吃睡睡的，捋了捋自己的头发。作为一个日常摸鱼的当代大学生，平时无非就是看看书，写写代码，听听歌。就这？？\n","description":"","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"前言 大政的Blog就这样稀里糊涂的开通了。\n 有时候闲着无聊，总想着写点什么，可能是乱七八糟的想法，可能是一段书评，也有可能是一段歌词。因为相对于话语的直白，文字能表达的情感是更加细腻的，它也可以将有些事情一直保存下去。\n也有可能是我天生就有点内向，甚至比较丧，不太喜欢说话。\n 当时之所以想开通Blog最主要是想督促自己保持学习的习惯，并且可以在这里记录一些关于学习的笔记。也有一部分原因是在这段时间接触了许多之前没有接触过的人和事，总想着这些美好的事和可爱的人更应该被文字所记录，而不是埋藏在我的心里。\n所以博客的内容可能是一串代码，一行文字，一条书评，一段歌词，或许是一句心里话。\n我既做不上神明，那当个野兽也好。\n","description":"","tags":null,"title":"Hello World ! Hello Blog !","uri":"/life/hello/"}]