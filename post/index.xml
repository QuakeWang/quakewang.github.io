<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on AKA二夕</title>
    <link>https://quakewang.github.io/post/</link>
    <description>Recent content in Posts on AKA二夕</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2020</copyright>
    <lastBuildDate>Thu, 21 May 2020 21:26:33 +0800</lastBuildDate>
    
	<atom:link href="https://quakewang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据结构--数组模拟队列</title>
      <link>https://quakewang.github.io/post/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97/</link>
      <pubDate>Thu, 21 May 2020 21:26:33 +0800</pubDate>
      
      <guid>https://quakewang.github.io/post/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97/</guid>
      <description>数组模拟队列  一、基本介绍 1、队列介绍：   队列是只允许在一段进行插入操作，而在另一端进行删除操作的线性表，可以使用数组或是链表来实现。
  遵循先入先出的原则，允许插入的一段称为队尾，允许删除的一段称队头。
  2、举例说明： 队列在我们的日常生活中，使用相当广泛，例如在银行排队，再比如用键盘进行各种字母或数字的输入，到显示器上如记事本软件上的输出，遵循的都是先入先出的原则。
二、算法实现 1、所需元素及其方法 在实现数组模拟队列的时候，我们需要先定义一个ArrayQueue类来存放所需的元素以及相关方法，所需元素有：数组arr[]：用于存放数据，模拟队列；数组的最大容量maxSize；队列头front；以及队列尾rear。需要的相关方法有：判断队列是否为满；判断队列是否为空；入队列；出队列；显示队列；以及显示队列的头数据。
代码实现如下：
private int maxSize;// 表示数组的最大容量  private int front;// 队列头  private int rear;// 队列尾  private int[] arr;// 该数组用于存放数据，模拟队列 2、初始化相关变量 在初始化相关变量的时候，我们可以使用构造器，传入一个数组的最大容量maxSize，这时数组可以存放maxSize的数据，但数组下标的范围为arr[0]&amp;ndash;arr[maxSize - 1]。为front和rear赋值为-1，即队列的前一个位置。
代码实现如下：
// 创建队列的构造器  public ArrayQueue(int maxSize) { this.maxSize = maxSize; arr = new int[maxSize]; front = -1;// 指向队列头部，front是指向队列头的前一个位置  rear = -1;// 指向队列的尾部，rear是队列最后一个数据  } 3、判断队列是否为满 ​	在添加数据时，队列头front保持不动，队列尾rear通过后移，从而实现数据入队列。所以在添加数据过程中，rear所指向的下标在不断变大。在初始化数组最大容量的时候，我们提到数组的最大下标为arr[maxSize - 1]，所以当rear指向arr[maxSize - 1]时，则队列为满。即rear == arr[maxSize - 1]。</description>
    </item>
    
    <item>
      <title>数据结构--稀疏数组</title>
      <link>https://quakewang.github.io/post/2020/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 15 May 2020 14:45:36 +0800</pubDate>
      
      <guid>https://quakewang.github.io/post/2020/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</guid>
      <description>稀疏数组  一、基本介绍 1、实际需求 假设一个五子棋盘，用1表示黑子，2表示白子，0表示空白区域，那么则可以把该棋盘利用二维数组实现。如下：
0 0 0 2 0 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 那么在上述这个二维数组中，除了1和2之外，其余的都是0。这些0我们并不关心，但是却占据大量的空间，因此可以使用稀疏数组来保存该数组。</description>
    </item>
    
    <item>
      <title>Hello World ! Hello Blog !</title>
      <link>https://quakewang.github.io/post/2020/05/10/hello-world-hello-blog/</link>
      <pubDate>Sun, 10 May 2020 21:55:40 +0800</pubDate>
      
      <guid>https://quakewang.github.io/post/2020/05/10/hello-world-hello-blog/</guid>
      <description>前言 大政的Blog就这样稀里糊涂的开通了。
 有时候闲着无聊，总想着写点什么，可能是乱七八糟的想法，可能是一段书评，也有可能是一段歌词。因为相对于话语的直白，文字能表达的情感是更加细腻的，它也可以将有些事情一直保存下去。
也有可能是我天生就有点内向，甚至比较丧，不太喜欢说话。
 当时之所以想开通Blog最主要是想督促自己保持学习的习惯，并且可以在这里记录一些关于学习的笔记。也有一部分原因是在这段时间接触了许多之前没有接触过的人和事，总想着这些美好的事和可爱的人更应该被文字所记录，而不是埋藏在我的心里。
所以博客的内容可能是一串代码，一行文字，一条书评，一段歌词，或许是一句心里话。
我既做不上神明，那当个野兽也好。</description>
    </item>
    
  </channel>
</rss>